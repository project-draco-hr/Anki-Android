{
  try {
    if (note == null) {
      boolean firstCard=mEditorNote == null;
      mEditorNote=mCol.newNote();
      if (firstCard && mCaller == CALLER_STUDYOPTIONS && mCurrentDid != mCol.getDecks().current().getLong("id")) {
        mCurrentDid=mCol.getDecks().current().getLong("id");
        ArrayList<JSONObject> models=mCol.getModels().all();
        boolean found=false;
        for (int i=0; i < models.size(); i++) {
          JSONObject m=models.get(i);
          if (m.getLong("did") == mCurrentDid) {
            mEditorNote=new Note(mCol,m);
            found=true;
            break;
          }
        }
        if (!found) {
          mEditorNote.model().put("did",mCurrentDid);
        }
      }
      mModelButton.setText(getResources().getString(R.string.CardEditorModel,mEditorNote.model().getString("name")));
      JSONArray tags=mEditorNote.model().getJSONArray("tags");
      for (int i=0; i < tags.length(); i++) {
        mEditorNote.addTag(tags.getString(i));
      }
    }
 else {
      mEditorNote=note;
      mCurrentDid=mCurrentEditedCard.getDid();
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  mCurrentTags=mEditorNote.getTags();
  updateDeck();
  updateTags();
  populateEditFields();
  swapText(true);
}
