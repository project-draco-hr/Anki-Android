{
  super.onCollectionLoaded(col);
  this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  Intent intent=getIntent();
  Log.i(AnkiDroidApp.TAG,"CardEditor: caller: " + mCaller);
  SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
  if (mCaller == CALLER_INDICLASH && preferences.getBoolean("intentAdditionInstantAdd",false)) {
    fetchIntentInformation(intent);
    MetaDB.saveIntentInformation(CardEditor.this,Utils.joinFields(mSourceText));
    Themes.showThemedToast(CardEditor.this,getResources().getString(R.string.app_name) + ": " + getResources().getString(R.string.CardEditorLaterMessage),false);
    finishWithoutAnimation();
    return;
  }
  registerExternalStorageListener();
  View mainView=getLayoutInflater().inflate(R.layout.card_editor,null);
  setContentView(mainView);
  Themes.setWallpaper(mainView);
  Themes.setContentStyle(mainView,Themes.CALLER_CARD_EDITOR);
  mFieldsLayoutContainer=(LinearLayout)findViewById(R.id.CardEditorEditFieldsLayout);
  mDeckButton=(TextView)findViewById(R.id.CardEditorDeckText);
  mModelButton=(TextView)findViewById(R.id.CardEditorModelText);
  mTagsButton=(TextView)findViewById(R.id.CardEditorTagText);
  Preferences.COMING_FROM_ADD=false;
  mAedictIntent=false;
switch (mCaller) {
case CALLER_NOCALLER:
    Log.i(AnkiDroidApp.TAG,"CardEditor: no caller could be identified, closing");
  finishWithoutAnimation();
return;
case CALLER_REVIEWER:
mCurrentEditedCard=AbstractFlashcardViewer.getEditorCard();
if (mCurrentEditedCard == null) {
finishWithoutAnimation();
return;
}
mEditorNote=mCurrentEditedCard.note();
mAddNote=false;
break;
case CALLER_STUDYOPTIONS:
case CALLER_DECKPICKER:
mAddNote=true;
break;
case CALLER_BIGWIDGET_EDIT:
break;
case CALLER_BIGWIDGET_ADD:
mAddNote=true;
break;
case CALLER_CARDBROWSER_EDIT:
mCurrentEditedCard=CardBrowser.sCardBrowserCard;
if (mCurrentEditedCard == null) {
finishWithoutAnimation();
return;
}
mEditorNote=mCurrentEditedCard.note();
mAddNote=false;
break;
case CALLER_CARDBROWSER_ADD:
mAddNote=true;
break;
case CALLER_CARDEDITOR:
mAddNote=true;
break;
case CALLER_CARDEDITOR_INTENT_ADD:
mAddNote=true;
break;
case CALLER_INDICLASH:
fetchIntentInformation(intent);
if (mSourceText == null) {
finishWithoutAnimation();
return;
}
if (mSourceText[0].equals("Aedict Notepad") && addFromAedict(mSourceText[1])) {
finishWithoutAnimation();
return;
}
mAddNote=true;
break;
}
setNote(mEditorNote);
if (mAddNote) {
setTitle(R.string.cardeditor_title_add_note);
String contents=null;
if (mSourceText != null) {
if (mAedictIntent && (mEditFields.size() == 3) && mSourceText[1].contains("[")) {
contents=mSourceText[1].replaceFirst("\\[","\u001f" + mSourceText[0] + "\u001f");
contents=contents.substring(0,contents.length() - 1);
}
 else {
mEditFields.get(0).setText(mSourceText[0]);
mEditFields.get(1).setText(mSourceText[1]);
}
}
 else {
contents=intent.getStringExtra(EXTRA_CONTENTS);
}
if (contents != null) {
setEditFieldTexts(contents);
}
LinearLayout modelButton=((LinearLayout)findViewById(R.id.CardEditorModelButton));
modelButton.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialog(DIALOG_MODEL_SELECT);
}
}
);
modelButton.setVisibility(View.VISIBLE);
}
 else {
setTitle(R.string.cardeditor_title_edit_card);
}
((LinearLayout)findViewById(R.id.CardEditorDeckButton)).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialog(DIALOG_DECK_SELECT);
}
}
);
mPrefFixArabic=preferences.getBoolean("fixArabicText",false);
((LinearLayout)findViewById(R.id.CardEditorTagButton)).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialogFragment(DIALOG_TAGS_SELECT);
}
}
);
dismissOpeningCollectionDialog();
}
