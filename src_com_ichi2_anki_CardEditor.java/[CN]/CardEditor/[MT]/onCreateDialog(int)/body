{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_TAGS_SELECT:
    builder.setTitle(R.string.card_details_tags);
  builder.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      String tag=mNewTagEditText.getText().toString();
      mCurrentTags=mTagsDialog.getCheckedItems();
      if (tag.length() != 0) {
        if (!mEditorNote.hasTag(tag)) {
          mCurrentTags.add(tag);
        }
      }
      updateTags();
    }
  }
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
builder.setOnDismissListener(new OnDismissListener(){
@Override public void onDismiss(DialogInterface dialog){
  mNewTagEditText.setText("");
}
}
);
mNewTagEditText=new EditText(this);
mNewTagEditText.setHint(R.string.add_new_filter_tags);
mNewTagEditText.addTextChangedListener(new TextWatcher(){
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
mTagsDialog.filterList(s.toString());
}
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void afterTextChanged(Editable s){
}
}
);
InputFilter filter=new InputFilter(){
@Override public CharSequence filter(CharSequence source,int start,int end,Spanned dest,int dstart,int dend){
for (int i=start; i < end; i++) {
if (source.charAt(i) == ' ' || source.charAt(i) == ',') {
return "";
}
}
return null;
}
}
;
mNewTagEditText.setFilters(new InputFilter[]{filter});
ImageView mAddTextButton=new ImageView(this);
mAddTextButton.setImageResource(R.drawable.ic_addtag);
mAddTextButton.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
String tag=mNewTagEditText.getText().toString();
if (tag.length() != 0) {
if (mEditorNote.hasTag(tag)) {
mNewTagEditText.setText("");
return;
}
mCurrentTags.add(tag);
actualizeTagDialog(mTagsDialog);
mNewTagEditText.setText("");
}
}
}
);
FrameLayout frame=new FrameLayout(this);
FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.RIGHT | Gravity.CENTER_VERTICAL);
params.rightMargin=10;
mAddTextButton.setLayoutParams(params);
frame.addView(mNewTagEditText);
frame.addView(mAddTextButton);
builder.setView(frame,false,true);
builder.setSelectAllListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
mTagsDialog.setItemListChecked(isChecked);
mCurrentTags=mTagsDialog.getCheckedItems();
}
}
);
dialog=builder.create();
mTagsDialog=dialog;
break;
case DIALOG_DECK_SELECT:
ArrayList<CharSequence> dialogDeckItems=new ArrayList<CharSequence>();
final ArrayList<Long> dialogDeckIds=new ArrayList<Long>();
ArrayList<JSONObject> decks=mCol.getDecks().all();
Collections.sort(decks,new JSONNameComparator());
builder.setTitle(R.string.deck);
for (JSONObject d : decks) {
try {
if (d.getInt("dyn") == 0) {
dialogDeckItems.add(d.getString("name"));
dialogDeckIds.add(d.getLong("id"));
}
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
String[] items=new String[dialogDeckItems.size()];
dialogDeckItems.toArray(items);
builder.setItems(items,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int item){
long newId=dialogDeckIds.get(item);
if (mCurrentDid != newId) {
mCurrentDid=newId;
updateDeck();
}
}
}
);
dialog=builder.create();
mDeckSelectDialog=dialog;
break;
case DIALOG_MODEL_SELECT:
ArrayList<CharSequence> dialogItems=new ArrayList<CharSequence>();
final ArrayList<Long> dialogIds=new ArrayList<Long>();
ArrayList<JSONObject> models=mCol.getModels().all();
Collections.sort(models,new JSONNameComparator());
builder.setTitle(R.string.note_type);
for (JSONObject m : models) {
try {
dialogItems.add(m.getString("name"));
dialogIds.add(m.getLong("id"));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
String[] items2=new String[dialogItems.size()];
dialogItems.toArray(items2);
builder.setItems(items2,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int item){
long oldModelId;
try {
oldModelId=mCol.getModels().current().getLong("id");
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
long newId=dialogIds.get(item);
if (oldModelId != newId) {
JSONObject model=mCol.getModels().get(newId);
mCol.getModels().setCurrent(model);
JSONObject cdeck=mCol.getDecks().current();
try {
cdeck.put("mid",newId);
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
mCol.getDecks().save(cdeck);
if (!mCol.getConf().optBoolean("addToCur",true)) {
try {
mCurrentDid=model.getLong("did");
updateDeck();
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
int size=mEditFields.size();
String[] oldValues=new String[size];
for (int i=0; i < size; i++) {
oldValues[i]=mEditFields.get(i).getText().toString();
}
setNote();
resetEditFields(oldValues);
mTimerHandler.removeCallbacks(checkDuplicatesRunnable);
duplicateCheck(false);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_RESET_CARD:
builder.setTitle(res.getString(R.string.reset_card_dialog_title));
builder.setMessage(res.getString(R.string.reset_card_dialog_message));
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.setNegativeButton(res.getString(R.string.no),null);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_INTENT_INFORMATION:
dialog=createDialogIntentInformation(builder,res);
break;
case DIALOG_CONFIRM_DUPLICATE:
builder.setTitle(res.getString(R.string.save_duplicate_dialog_title));
builder.setMessage(res.getString(R.string.save_duplicate_dialog_message));
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
saveNote();
}
}
);
builder.setNegativeButton(res.getString(R.string.no),null);
builder.setCancelable(true);
dialog=builder.create();
break;
}
return dialog;
}
