{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_TAGS:
    dialog=createDialogTags(builder,res);
  break;
case DIALOG_DECK_SELECT:
dialog=createDialogDeckSelect(builder,res);
break;
case DIALOG_MODEL_SELECT:
dialog=createDialogModelSelect(builder,res);
break;
case DIALOG_CARD_MODEL_SELECT:
builder.setTitle(res.getString(R.string.select_card_model));
builder.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mSelectedCardModels.clear();
mSelectedCardModels.putAll(mNewSelectedCardModels);
cardModelsChanged();
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
mCardModelDialog=builder.create();
dialog=mCardModelDialog;
break;
case DIALOG_RESET_CARD:
builder.setTitle(res.getString(R.string.reset_card_dialog_title));
builder.setMessage(res.getString(R.string.reset_card_dialog_message));
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
for (long cardId : mDeck.getCardsFromFactId(mEditorFact.getId())) {
mDeck.cardFromId(cardId).resetCard();
}
mDeck.reset();
setResult(Reviewer.RESULT_EDIT_CARD_RESET);
mCardReset=true;
Themes.showThemedToast(CardEditor.this,getResources().getString(R.string.reset_card_dialog_confirmation),true);
}
}
);
builder.setNegativeButton(res.getString(R.string.no),null);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_INTENT_INFORMATION:
dialog=createDialogIntentInformation(builder,res);
}
return dialog;
}
