{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_TAGS_SELECT:
    dialog=createDialogTags(builder,res);
  break;
case DIALOG_DECK_SELECT:
ArrayList<CharSequence> dialogDeckItems=new ArrayList<CharSequence>();
final ArrayList<Long> dialogDeckIds=new ArrayList<Long>();
ArrayList<JSONObject> decks=mCol.getDecks().all();
Collections.sort(decks,new JSONNameComparator());
builder.setTitle(R.string.deck);
for (JSONObject d : decks) {
try {
dialogDeckItems.add(DeckPicker.readableName(d.getString("name").split("::")));
dialogDeckIds.add(d.getLong("id"));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
String[] items=new String[dialogDeckItems.size()];
dialogDeckItems.toArray(items);
builder.setItems(items,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
try {
long oldDid=mCol.getDecks().get(mEditorNote.getDid()).getLong("id");
long newId=dialogDeckIds.get(item);
if (oldDid != newId) {
if (mCaller == CALLER_DECKPICKER) {
mCol.getDecks().select(newId);
}
mEditorNote.setDid(newId);
mDeckButton.setText(getResources().getString(R.string.CardEditorDeck,mCol.getDecks().get(newId).getString("name")));
}
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_MODEL_SELECT:
ArrayList<CharSequence> dialogItems=new ArrayList<CharSequence>();
final ArrayList<Long> dialogIds=new ArrayList<Long>();
ArrayList<JSONObject> models=mCol.getModels().all();
Collections.sort(models,new JSONNameComparator());
builder.setTitle(R.string.model);
for (JSONObject m : models) {
try {
dialogItems.add(m.getString("name"));
dialogIds.add(m.getLong("id"));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
String[] items2=new String[dialogItems.size()];
dialogItems.toArray(items2);
builder.setItems(items2,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
long oldModelId;
try {
oldModelId=mCol.getModels().current().getLong("id");
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
long newId=dialogIds.get(item);
if (oldModelId != newId) {
mCol.getModels().setCurrent(mCol.getModels().get(newId));
int size=mEditFields.size();
String[] oldValues=new String[size];
for (int i=0; i < size; i++) {
oldValues[i]=mEditFields.get(i).getText().toString();
}
modelChanged();
if ((mSourceText == null || mSourceText.length() == 0) && (mTargetText == null || mTargetText.length() == 0)) {
for (int i=0; i < Math.min(size,mEditFields.size()); i++) {
mEditFields.get(i).setText(oldValues[i]);
}
}
}
}
}
);
dialog=builder.create();
break;
case DIALOG_RESET_CARD:
builder.setTitle(res.getString(R.string.reset_card_dialog_title));
builder.setMessage(res.getString(R.string.reset_card_dialog_message));
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.setNegativeButton(res.getString(R.string.no),null);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_INTENT_INFORMATION:
dialog=createDialogIntentInformation(builder,res);
}
return dialog;
}
