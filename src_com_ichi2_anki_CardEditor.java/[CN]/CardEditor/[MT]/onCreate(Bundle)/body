{
  Log.i(AnkiDroidApp.TAG,"CardEditor: onCreate");
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  registerExternalStorageListener();
  View mainView=getLayoutInflater().inflate(R.layout.card_editor,null);
  setContentView(mainView);
  Themes.setWallpaper(mainView);
  Themes.setContentStyle(mainView,Themes.CALLER_CARD_EDITOR);
  mFieldsLayoutContainer=(LinearLayout)findViewById(R.id.CardEditorEditFieldsLayout);
  setTitle(R.string.cardeditor_title);
  mSave=(Button)findViewById(R.id.CardEditorSaveButton);
  mCancel=(Button)findViewById(R.id.CardEditorCancelButton);
  mDeckButton=(TextView)findViewById(R.id.CardEditorDeckText);
  mModelButton=(TextView)findViewById(R.id.CardEditorModelText);
  mTagsButton=(TextView)findViewById(R.id.CardEditorTagText);
  mSwapButton=(Button)findViewById(R.id.CardEditorSwapButton);
  mAedictIntent=false;
  Intent intent=getIntent();
  if (savedInstanceState != null) {
    mCaller=savedInstanceState.getInt("caller");
    mAddNote=savedInstanceState.getBoolean("addFact");
  }
 else {
    mCaller=intent.getIntExtra(EXTRA_CALLER,CALLER_NOCALLER);
    if (mCaller == CALLER_NOCALLER) {
      String action=intent.getAction();
      if (action != null && (ACTION_CREATE_FLASHCARD.equals(action) || ACTION_CREATE_FLASHCARD_SEND.equals(action))) {
        mCaller=CALLER_INDICLASH;
      }
    }
  }
  Log.i(AnkiDroidApp.TAG,"Caller: " + mCaller);
switch (mCaller) {
case CALLER_NOCALLER:
    Log.i(AnkiDroidApp.TAG,"CardEditor: no caller could be identified, closing");
  finish();
return;
case CALLER_REVIEWER:
Card revCard=Reviewer.getEditorCard();
if (revCard == null) {
finish();
return;
}
mEditorNote=revCard.getNote();
mAddNote=false;
break;
case CALLER_STUDYOPTIONS:
case CALLER_DECKPICKER:
mAddNote=true;
break;
case CALLER_BIGWIDGET_EDIT:
break;
case CALLER_BIGWIDGET_ADD:
mAddNote=true;
break;
case CALLER_CARDBROWSER_EDIT:
break;
case CALLER_CARDBROWSER_ADD:
mAddNote=true;
break;
case CALLER_CARDEDITOR:
mAddNote=true;
break;
case CALLER_CARDEDITOR_INTENT_ADD:
mAddNote=true;
String[] fields=intent.getStringExtra(EXTRA_CONTENTS).split("\\x1f");
mSourceText=fields[0];
mTargetText=fields[1];
break;
case CALLER_INDICLASH:
Bundle extras=intent.getExtras();
if (ACTION_CREATE_FLASHCARD.equals(intent.getAction())) {
mSourceText=extras.getString(SOURCE_TEXT);
mTargetText=extras.getString(TARGET_TEXT);
}
 else {
Pair<String,String> messages=new Pair<String,String>(extras.getString(Intent.EXTRA_SUBJECT),extras.getString(Intent.EXTRA_TEXT));
Pair<String,String> cleanMessages=new FilterFacade(getBaseContext()).filter(messages);
mSourceText=cleanMessages.first;
mTargetText=cleanMessages.second;
}
if (mSourceText == null && mTargetText == null) {
finish();
return;
}
if (mSourceText.equals("Aedict Notepad") && addFromAedict(mTargetText)) {
finish();
return;
}
mAddNote=true;
break;
}
mCol=Collection.currentCollection();
if (mCol == null) {
finish();
return;
}
if (mAddNote) {
try {
mDeckButton.setText(getResources().getString(R.string.CardEditorDeck,mCol.getDecks().current().getString("name")));
mModelButton.setText(getResources().getString(R.string.CardEditorDeck,mCol.getModels().current().getString("name")));
modelChanged();
mTagsButton.setText(getResources().getString(R.string.CardEditorTags,""));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
String contents=null;
if (mSourceText != null) {
if (mAedictIntent && (mEditFields.size() == 3) && mTargetText.contains("[")) {
contents=mTargetText.replaceFirst("\\[","\u001f");
contents=contents.substring(0,contents.length() - 1);
}
 else {
mEditFields.get(0).setText(mSourceText);
mEditFields.get(1).setText(mTargetText);
}
}
 else {
contents=intent.getStringExtra(EXTRA_CONTENTS);
}
if (contents != null) {
setEditFieldTexts(contents);
}
mSave.setEnabled(false);
((LinearLayout)findViewById(R.id.CardEditorModelButton)).setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_MODEL_SELECT);
}
}
);
mSave.setText(getResources().getString(R.string.add));
mCancel.setText(getResources().getString(R.string.close));
}
 else {
try {
mModelButton.setText(getResources().getString(R.string.CardEditorDeck,mCol.getDecks().get(mEditorNote.getDid()).getString("name")));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
((LinearLayout)findViewById(R.id.CardEditorDeckButton)).setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_DECK_SELECT);
}
}
);
mTagsButton.setText(getResources().getString(R.string.CardEditorTags,mEditorNote.stringTags()));
mModified=false;
SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
mPrefFixArabic=preferences.getBoolean("fixArabicText",false);
if (mPrefFixArabic && !mAddNote) {
mSave.setEnabled(false);
}
((LinearLayout)findViewById(R.id.CardEditorTagButton)).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialog(DIALOG_TAGS_SELECT);
}
}
);
allTags=null;
mSelectedTags=new HashSet<String>();
mSave.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mAddNote) {
if (duplicateCheck()) {
return;
}
boolean empty=true;
for (FieldEditText current : mEditFields) {
current.updateField();
if (current.getText().length() != 0) {
empty=false;
}
}
if (!empty) {
}
 else {
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
}
}
 else {
Iterator<FieldEditText> iter=mEditFields.iterator();
while (iter.hasNext()) {
FieldEditText current=iter.next();
mModified|=current.updateField();
}
if (mCaller == CALLER_BIGWIDGET_EDIT) {
}
 else if (!mCardReset) {
if (mModified) {
setResult(RESULT_OK);
}
 else {
setResult(RESULT_CANCELED);
}
closeCardEditor();
}
}
}
}
);
mCancel.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
closeCardEditor();
}
}
);
if (!mAddNote) {
populateEditFields();
}
}
