{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  registerExternalStorageListener();
  View mainView=getLayoutInflater().inflate(R.layout.card_editor,null);
  setContentView(mainView);
  Themes.setWallpaper(mainView);
  mFieldsLayoutContainer=(LinearLayout)findViewById(R.id.CardEditorEditFieldsLayout);
  Themes.setTextViewStyle(mFieldsLayoutContainer);
  setTitle(R.string.cardeditor_title);
  mSave=(Button)findViewById(R.id.CardEditorSaveButton);
  mCancel=(Button)findViewById(R.id.CardEditorCancelButton);
  mSwapButton=(Button)findViewById(R.id.CardEditorSwapButton);
  mModelButtons=(LinearLayout)findViewById(R.id.CardEditorSelectModelLayout);
  mModelButton=(Button)findViewById(R.id.CardEditorModelButton);
  mCardModelButton=(Button)findViewById(R.id.CardEditorCardModelButton);
  mTags=(Button)findViewById(R.id.CardEditorTagButton);
  mNewSelectedCardModels=new LinkedHashMap<Long,CardModel>();
  cardModelIds=new ArrayList<Long>();
  Intent intent=getIntent();
  String action=intent.getAction();
  if (action != null && action.equals(INTENT_CREATE_FLASHCARD)) {
    prepareForIntentAddition();
    Bundle extras=intent.getExtras();
    mSourceText=extras.getString(SOURCE_TEXT);
    mTargetText=extras.getString(TARGET_TEXT);
    mAddFact=true;
    mIntentAdd=true;
  }
 else   if (action != null && action.equals(INTENT_CREATE_FLASHCARD_SEND)) {
    prepareForIntentAddition();
    Bundle extras=intent.getExtras();
    mSourceText=extras.getString(Intent.EXTRA_SUBJECT);
    mTargetText=extras.getString(Intent.EXTRA_TEXT);
    mAddFact=true;
    mIntentAdd=true;
  }
 else {
    mDeckPath=intent.getStringExtra(DECKPATH);
    if (mDeckPath != null && mDeckPath.length() > 0) {
      mDeck=DeckManager.getDeck(mDeckPath,DeckManager.REQUESTING_ACTIVITY_CARDEDITOR,false);
    }
 else {
      mDeck=DeckManager.getMainDeck();
    }
switch (intent.getIntExtra(CARD_EDITOR_ACTION,ADD_CARD)) {
case EDIT_REVIEWER_CARD:
      Card revCard=Reviewer.getEditorCard();
    if (revCard == null) {
      finish();
      return;
    }
  mEditorFact=revCard.getFact();
break;
case EDIT_BROWSER_CARD:
Card browCard=CardBrowser.getEditorCard();
if (browCard == null) {
finish();
return;
}
mEditorFact=browCard.getFact();
break;
case COPY_CARD:
mForCopy=true;
case ADD_CARD:
mAddFact=true;
loadContents();
modelChanged();
mSave.setEnabled(false);
if (mForCopy) {
String[] contents=intent.getStringExtra("contents").split("\\x1f");
for (int i=0; i < mEditFields.size(); i++) {
if (i < contents.length) {
mEditFields.get(i).setText(contents[i]);
if (contents[i].length() > 0) {
mSave.setEnabled(true);
}
}
}
}
break;
}
}
if (mAddFact) {
mModelButtons.setVisibility(View.VISIBLE);
mModelButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_MODEL_SELECT);
}
}
);
mCardModelButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_CARD_MODEL_SELECT);
}
}
);
mSave.setText(getResources().getString(R.string.add));
mCancel.setText(getResources().getString(R.string.close));
}
 else {
mFactTags=mEditorFact.getTags();
}
mTags.setText(getResources().getString(R.string.CardEditorTags,mFactTags));
mModified=false;
SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
mPrefFixArabic=preferences.getBoolean("fixArabicText",false);
if (mPrefFixArabic && !mAddFact) {
mSave.setEnabled(false);
}
mTags.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialog(DIALOG_TAGS);
}
}
);
allTags=null;
mSelectedTags=new HashSet<String>();
mSave.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mAddFact) {
boolean empty=true;
for (FieldEditText current : mEditFields) {
current.updateField();
if (current.getText().length() != 0) {
empty=false;
}
}
if (!empty) {
setResult(Reviewer.RESULT_EDIT_CARD_RESET);
mEditorFact.setTags(mFactTags);
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ADD_FACT,mSaveFactHandler,new DeckTask.TaskData(mDeck,mEditorFact,mSelectedCardModels));
}
 else {
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
}
}
 else {
Iterator<FieldEditText> iter=mEditFields.iterator();
while (iter.hasNext()) {
FieldEditText current=iter.next();
mModified|=current.updateField();
}
if (!mEditorFact.getTags().equals(mFactTags)) {
mEditorFact.setTags(mFactTags);
mModified=true;
}
if (!mCardReset) {
if (mModified) {
setResult(RESULT_OK);
}
 else {
setResult(RESULT_CANCELED);
}
}
closeCardEditor();
}
}
}
);
mCancel.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
closeCardEditor();
}
}
);
if (!mAddFact) {
populateEditFields();
}
}
