{
  Log.i(AnkiDroidApp.TAG,"CardEditor: onCreate");
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  registerExternalStorageListener();
  View mainView=getLayoutInflater().inflate(R.layout.card_editor,null);
  setContentView(mainView);
  Themes.setWallpaper(mainView);
  Themes.setContentStyle(mainView,Themes.CALLER_CARD_EDITOR);
  mFieldsLayoutContainer=(LinearLayout)findViewById(R.id.CardEditorEditFieldsLayout);
  setTitle(R.string.cardeditor_title);
  mSave=(Button)findViewById(R.id.CardEditorSaveButton);
  mCancel=(Button)findViewById(R.id.CardEditorCancelButton);
  mSwapButton=(Button)findViewById(R.id.CardEditorSwapButton);
  mModelButtons=(LinearLayout)findViewById(R.id.CardEditorSelectModelLayout);
  mModelButton=(Button)findViewById(R.id.CardEditorModelButton);
  mCardModelButton=(Button)findViewById(R.id.CardEditorCardModelButton);
  mTags=(Button)findViewById(R.id.CardEditorTagButton);
  mNewSelectedCardModels=new LinkedHashMap<Long,CardModel>();
  cardModelIds=new ArrayList<Long>();
  mAedictIntent=false;
  Intent intent=getIntent();
  if (savedInstanceState != null) {
    mDeckPath=savedInstanceState.getString("deckFilename");
    mCaller=savedInstanceState.getInt("caller");
    mAddFact=savedInstanceState.getBoolean("addFact");
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from savedInstanceState: " + mDeckPath);
    DeckManager.getDeck(mDeckPath,DeckManager.REQUESTING_ACTIVITY_CARDEDITOR);
  }
 else {
    mCaller=intent.getIntExtra(EXTRA_CALLER,CALLER_NOCALLER);
    if (mCaller == CALLER_NOCALLER) {
      String action=intent.getAction();
      if (action != null && (ACTION_CREATE_FLASHCARD.equals(action) || ACTION_CREATE_FLASHCARD_SEND.equals(action))) {
        mCaller=CALLER_INDICLASH;
      }
    }
  }
  Log.i(AnkiDroidApp.TAG,"Caller: " + mCaller);
switch (mCaller) {
case CALLER_NOCALLER:
    Log.i(AnkiDroidApp.TAG,"CardEditor: no caller could be identified, closing");
  finishWithoutAnimation();
return;
case CALLER_REVIEWER:
Card revCard=Reviewer.getEditorCard();
if (revCard == null) {
finishWithoutAnimation();
return;
}
mEditorFact=revCard.getFact();
mAddFact=false;
break;
case CALLER_STUDYOPTIONS:
mAddFact=true;
break;
case CALLER_BIGWIDGET_EDIT:
Card widgetCard=AnkiDroidWidgetBig.getCard();
if (widgetCard == null) {
finishWithoutAnimation();
return;
}
mEditorFact=widgetCard.getFact();
mAddFact=false;
break;
case CALLER_BIGWIDGET_ADD:
mAddFact=true;
break;
case CALLER_CARDBROWSER_EDIT:
Card browCard=CardBrowser.getEditorCard();
if (browCard == null) {
finishWithoutAnimation();
return;
}
mEditorFact=browCard.getFact();
mAddFact=false;
break;
case CALLER_CARDBROWSER_ADD:
mAddFact=true;
break;
case CALLER_CARDEDITOR:
mAddFact=true;
break;
case CALLER_CARDEDITOR_INTENT_ADD:
prepareForIntentAddition();
mAddFact=true;
String[] fields=intent.getStringExtra(EXTRA_CONTENTS).split("\\x1f");
mSourceText=fields[0];
mTargetText=fields[1];
break;
case CALLER_INDICLASH:
Bundle extras=intent.getExtras();
if (ACTION_CREATE_FLASHCARD.equals(intent.getAction())) {
mSourceText=extras.getString(SOURCE_TEXT);
mTargetText=extras.getString(TARGET_TEXT);
}
 else {
Pair<String,String> messages=new Pair<String,String>(extras.getString(Intent.EXTRA_SUBJECT),extras.getString(Intent.EXTRA_TEXT));
Pair<String,String> cleanMessages=new FilterFacade(getBaseContext()).filter(messages);
mSourceText=cleanMessages.first;
mTargetText=cleanMessages.second;
}
if (mSourceText == null && mTargetText == null) {
finishWithoutAnimation();
return;
}
if (mSourceText.equals("Aedict Notepad") && addFromAedict(mTargetText)) {
finishWithoutAnimation();
return;
}
prepareForIntentAddition();
mAddFact=true;
break;
}
if (mCaller != CALLER_INDICLASH && mCaller != CALLER_CARDEDITOR_INTENT_ADD) {
mDeckPath=intent.getStringExtra(EXTRA_DECKPATH);
mDeck=DeckManager.getDeck(mDeckPath,DeckManager.REQUESTING_ACTIVITY_CARDEDITOR,false);
if (mDeck == null) {
finishWithoutAnimation();
return;
}
}
if (mAddFact) {
if (mCaller != CALLER_INDICLASH && mCaller != CALLER_CARDEDITOR_INTENT_ADD) {
loadContents();
modelChanged();
mSave.setEnabled(false);
String contents=intent.getStringExtra(EXTRA_CONTENTS);
setEditFieldTexts(contents);
mModelButtons.setVisibility(View.VISIBLE);
}
 else {
mSave.setVisibility(View.INVISIBLE);
mCancel.setVisibility(View.INVISIBLE);
mTags.setVisibility(View.INVISIBLE);
mFieldsLayoutContainer.setVisibility(View.INVISIBLE);
}
mModelButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_MODEL_SELECT);
}
}
);
mCardModelButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
showDialog(DIALOG_CARD_MODEL_SELECT);
}
}
);
mSave.setText(getResources().getString(R.string.add));
mCancel.setText(getResources().getString(R.string.close));
mFactTags="";
}
 else {
mFactTags=mEditorFact.getTags();
}
mTags.setText(getResources().getString(R.string.CardEditorTags,mFactTags));
mModified=false;
SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
mPrefFixArabic=preferences.getBoolean("fixArabicText",false);
if (mPrefFixArabic && !mAddFact) {
mSave.setEnabled(false);
}
mTags.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
showDialog(DIALOG_TAGS);
}
}
);
allTags=null;
mSelectedTags=new HashSet<String>();
mSave.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mAddFact) {
boolean empty=true;
for (FieldEditText current : mEditFields) {
current.updateField();
if (current.getText().length() != 0) {
empty=false;
}
}
if (!empty) {
setResult(Reviewer.RESULT_EDIT_CARD_RESET);
mEditorFact.setTags(mFactTags);
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ADD_FACT,mSaveFactHandler,new DeckTask.TaskData(mDeck,mEditorFact,mSelectedCardModels));
}
 else {
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
}
}
 else {
Iterator<FieldEditText> iter=mEditFields.iterator();
while (iter.hasNext()) {
FieldEditText current=iter.next();
mModified|=current.updateField();
}
if (!mEditorFact.getTags().equals(mFactTags)) {
mEditorFact.setTags(mFactTags);
mModified=true;
}
if (mCaller == CALLER_BIGWIDGET_EDIT) {
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_UPDATE_FACT,mSaveFactHandler,new DeckTask.TaskData(Reviewer.UPDATE_CARD_SHOW_QUESTION,mDeck,AnkiDroidWidgetBig.getCard()));
}
 else if (!mCardReset) {
if (mModified) {
setResult(RESULT_OK);
}
 else {
setResult(RESULT_CANCELED);
}
closeCardEditor();
}
}
}
}
);
mCancel.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!mCardReset) {
setResult(RESULT_CANCELED);
}
closeCardEditor();
}
}
);
if (!mAddFact) {
populateEditFields();
}
}
