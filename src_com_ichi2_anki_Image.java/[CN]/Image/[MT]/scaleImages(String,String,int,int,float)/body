{
  Log.i(TAG,"Image - loadImages, filename = " + deckFilename);
  Log.i(TAG,"Display height = " + displayHeight);
  Log.i(TAG,"Display width = " + displayWidth);
  Log.i(TAG,"Scale In percent = " + scaleInPercent);
  displayWidth-=15;
  String imagePath=deckFilename.replace(".anki",".media/");
  Log.i(TAG,"Image path = " + imagePath);
  Matcher matcher=mImagePattern.matcher(content);
  while (matcher.find()) {
    Log.i(TAG,"img match = " + matcher.group());
    Log.i(TAG,"img file match = " + matcher.group(1));
    String image=matcher.group(1);
    if (image.startsWith("http://")) {
    }
 else {
      Bitmap imageBitmap=BitmapFactory.decodeFile(imagePath + image);
      if (imageBitmap != null) {
        int imageHeight=imageBitmap.getHeight();
        int imageWidth=imageBitmap.getWidth();
        Log.i(TAG,"img height = " + imageHeight + ", width = "+ imageWidth);
        if (imageWidth > displayWidth) {
          float scaleFactor=(float)imageWidth / (float)displayWidth;
          Log.i(TAG,"Scale factor = " + scaleFactor);
          imageHeight=(int)(imageHeight / scaleFactor);
          Log.i(TAG,"Scaled img height = " + imageHeight);
          imageWidth=(int)(imageWidth / scaleFactor);
          Log.i(TAG,"Scaled img width = " + imageWidth);
        }
        imageHeight=(int)(imageHeight / scaleInPercent);
        imageWidth=(int)(imageWidth / scaleInPercent);
        Log.i(TAG,"Final img height = " + imageHeight + ", width = "+ imageWidth);
        content=content.replaceFirst(matcher.group(),matcher.group() + " height=\"" + (imageHeight)+ "\" width=\""+ (imageWidth)+ "\"");
      }
    }
  }
  return content;
}
