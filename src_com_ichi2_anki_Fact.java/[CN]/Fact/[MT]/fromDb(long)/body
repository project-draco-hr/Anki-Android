{
  mId=id;
  AnkiDb ankiDB=AnkiDatabaseManager.getDatabase(mDeck.getDeckPath());
  Cursor cursor=null;
  try {
    cursor=ankiDB.getDatabase().rawQuery("SELECT id, modelId, created, modified, tags, cache " + "FROM facts " + "WHERE id = "+ id,null);
    if (!cursor.moveToFirst()) {
      Log.w(AnkiDroidApp.TAG,"Fact.java (constructor): No result from query.");
      return false;
    }
    mId=cursor.getLong(0);
    mModelId=cursor.getLong(1);
    mCreated=cursor.getDouble(2);
    mModified=cursor.getDouble(3);
    mTags=cursor.getString(4);
    mCache=cursor.getString(5);
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  Cursor fieldsCursor=null;
  try {
    fieldsCursor=ankiDB.getDatabase().rawQuery("SELECT id, factId, fieldModelId, value " + "FROM fields " + "WHERE factId = "+ id,null);
    mFields=new TreeSet<Field>(new FieldOrdinalComparator());
    while (fieldsCursor.moveToNext()) {
      long fieldId=fieldsCursor.getLong(0);
      long fieldModelId=fieldsCursor.getLong(2);
      String fieldValue=fieldsCursor.getString(3);
      Cursor fieldModelCursor=null;
      FieldModel currentFieldModel=null;
      try {
        fieldModelCursor=ankiDB.getDatabase().rawQuery("SELECT id, ordinal, modelId, name, description " + "FROM fieldModels " + "WHERE id = "+ fieldModelId,null);
        fieldModelCursor.moveToFirst();
        currentFieldModel=new FieldModel(fieldModelCursor.getLong(0),fieldModelCursor.getInt(1),fieldModelCursor.getLong(2),fieldModelCursor.getString(3),fieldModelCursor.getString(4));
      }
  finally {
        if (fieldModelCursor != null) {
          fieldModelCursor.close();
        }
      }
      mFields.add(new Field(fieldId,id,currentFieldModel,fieldValue));
    }
  }
  finally {
    if (fieldsCursor != null) {
      fieldsCursor.close();
    }
  }
  return true;
}
