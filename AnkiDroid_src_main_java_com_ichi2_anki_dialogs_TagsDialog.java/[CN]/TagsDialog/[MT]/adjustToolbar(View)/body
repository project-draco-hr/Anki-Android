{
  mToolbar=(Toolbar)tagsDialogView.findViewById(R.id.tags_dialog_toolbar);
  mToolbar.setTitle(mDialogTitle);
  mToolbar.inflateMenu(R.menu.tags_dialog_menu);
  final InputFilter addTagFilter=new InputFilter(){
    @Override public CharSequence filter(    CharSequence source,    int start,    int end,    Spanned dest,    int dstart,    int dend){
      for (int i=start; i < end; i++) {
        if (source.charAt(i) == ' ') {
          return "";
        }
      }
      return null;
    }
  }
;
  mToolbarAddItem=mToolbar.getMenu().findItem(R.id.tags_dialog_action_add);
  mToolbarAddItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem menuItem){
      String query=mToolbarSearchView.getQuery().toString();
      if (MenuItemCompat.isActionViewExpanded(mToolbarSearchItem) && !TextUtils.isEmpty(query)) {
        addTag(query);
        mToolbarSearchView.setQuery("",true);
      }
 else {
        MaterialDialog.Builder addTagBuilder=new MaterialDialog.Builder(getActivity()).title(getString(R.string.add_tag)).negativeText(R.string.dialog_cancel).positiveText(R.string.dialog_ok).inputType(InputType.TYPE_CLASS_TEXT).input(R.string.tag_name,R.string.empty_string,new MaterialDialog.InputCallback(){
          @Override public void onInput(          MaterialDialog dialog,          CharSequence input){
            addTag(input.toString());
          }
        }
);
        final MaterialDialog addTagDialog=addTagBuilder.build();
        EditText inputET=addTagDialog.getInputEditText();
        inputET.setFilters(new InputFilter[]{addTagFilter});
        addTagDialog.show();
      }
      return true;
    }
  }
);
  mToolbarSearchItem=mToolbar.getMenu().findItem(R.id.tags_dialog_action_filter);
  mToolbarSearchView=(SearchView)MenuItemCompat.getActionView(mToolbarSearchItem);
  EditText queryET=(EditText)mToolbarSearchView.findViewById(R.id.search_src_text);
  queryET.setFilters(new InputFilter[]{addTagFilter});
  mToolbarSearchView.setQueryHint(getString(R.string.filter_tags));
  mToolbarSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      mToolbarSearchView.clearFocus();
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      TagsArrayAdapter adapter=(TagsArrayAdapter)mTagsListRecyclerView.getAdapter();
      adapter.getFilter().filter(newText);
      return true;
    }
  }
);
  MenuItem checkAllItem=mToolbar.getMenu().findItem(R.id.tags_dialog_action_select_all);
  checkAllItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem menuItem){
      boolean changed=false;
      if (mCurrentTags.containsAll(mTagsArrayAdapter.mTagsList)) {
        mCurrentTags.removeAll(mTagsArrayAdapter.mTagsList);
        changed=true;
      }
 else {
        for (        String tag : mTagsArrayAdapter.mTagsList) {
          if (!mCurrentTags.contains(tag)) {
            mCurrentTags.add(tag);
            changed=true;
          }
        }
      }
      if (changed) {
        mTagsArrayAdapter.notifyDataSetChanged();
      }
      return true;
    }
  }
);
switch (mType) {
case TYPE_ADD_TAG:
    mToolbarSearchView.setQueryHint(getString(R.string.add_new_filter_tags));
  break;
default :
mToolbarAddItem.setVisible(false);
}
}
