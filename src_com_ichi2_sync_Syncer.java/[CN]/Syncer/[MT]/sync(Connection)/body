{
  mCol.save();
  HttpResponse ret=mServer.meta();
  int returntype=ret.getStatusLine().getStatusCode();
  if (ret == null || returntype == 403) {
    return "badAuth";
  }
 else   if (returntype == 503) {
    return "serverNotAvailable";
  }
 else   if (returntype != 200) {
    return "error";
  }
  long rts;
  long lts;
  try {
    JSONArray ra=HttpSyncer.getDataJSONArray(ret);
    mRMod=ra.getLong(0);
    mRScm=ra.getLong(1);
    mMaxUsn=ra.getInt(2);
    rts=ra.getLong(3);
    mMediaUsn=ra.getInt(4);
    JSONArray la=meta();
    mLMod=la.getLong(0);
    mLScm=la.getLong(1);
    mMinUsn=la.getInt(2);
    lts=la.getLong(3);
    if (Math.abs(rts - lts) > 300) {
      return "clockOff";
    }
    if (mLMod == mRMod) {
    }
 else     if (mLScm != mRScm) {
      return "fullSync";
    }
    mLNewer=mLMod > mRMod;
    JSONObject lrem=removed();
    JSONObject o=new JSONObject();
    o.put("minUsn",mMinUsn);
    o.put("lnewer",mLNewer);
    o.put("graves",lrem);
    JSONObject rrem=mServer.start(o);
    if (rrem == null) {
      return "error";
    }
    remove(rrem);
    JSONObject lchg=changes();
    JSONObject sch=new JSONObject();
    sch.put("changes",lchg);
    JSONObject rchg=mServer.applyChanges(sch);
    if (rchg == null) {
      return "error";
    }
    mergeChanges(lchg,rchg);
    while (true) {
      JSONObject chunk=mServer.chunk();
      if (chunk == null) {
        return "error";
      }
      JSONObject pch=new JSONObject();
      pch.put("chunk",chunk);
      applyChunk(pch);
      if (chunk.getBoolean("done")) {
        break;
      }
    }
    while (true) {
      JSONObject chunk=chunk();
      JSONObject sech=new JSONObject();
      sech.put("chunk",chunk);
      mServer.applyChunk(sech);
      if (chunk.getBoolean("done")) {
        break;
      }
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalStateException e) {
    throw new RuntimeException(e);
  }
  long mod=mServer.finish();
  finish(mod);
  return "success";
}
