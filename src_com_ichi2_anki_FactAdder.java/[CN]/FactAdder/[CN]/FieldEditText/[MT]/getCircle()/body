{
  mCircle=new ImageView(this.getContext());
  mCircle.setImageResource(R.drawable.ic_circle_normal);
  mCircle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ImageView view=((ImageView)v);
      Editable editText=FieldEditText.this.getText();
      if (mCutMode) {
        view.setImageResource(R.drawable.ic_circle_normal);
        FieldEditText.this.setKeyListener(mKeyListener);
        FieldEditText.this.setCursorVisible(true);
        for (        boolean enabled : mEnabled) {
          if (enabled) {
            removeDeleted();
            break;
          }
        }
        StrikethroughSpan[] ss=editText.getSpans(0,editText.length(),StrikethroughSpan.class);
        for (        StrikethroughSpan s : ss) {
          editText.removeSpan(s);
        }
        mCutMode=false;
      }
 else {
        view.setImageResource(R.drawable.ic_circle_pressed);
        InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(FieldEditText.this.getWindowToken(),0);
        mKeyListener=FieldEditText.this.getKeyListener();
        FieldEditText.this.setKeyListener(null);
        FieldEditText.this.setCursorVisible(false);
        mCutMode=true;
        mCutString=editText.toString().split(" ");
        mEnabled=new boolean[mCutString.length];
        int pos=0;
        for (int i=0; i < mCutString.length; i++) {
          editText.setSpan(new StrikethroughSpan(),pos,pos + mCutString[i].length(),0);
          pos+=mCutString[i].length() + 1;
        }
      }
    }
  }
);
  mCircle.setVisibility(View.GONE);
  return mCircle;
}
