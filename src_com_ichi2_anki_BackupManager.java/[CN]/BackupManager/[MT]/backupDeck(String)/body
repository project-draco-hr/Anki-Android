{
  if (mDeckPickerDecks == null) {
    initBackup();
  }
  mDeckPickerDecks.add(deckpath);
  mLastCreatedBackup=null;
  mLastDeckBackups=null;
  File deckFile=new File(deckpath);
  File[] deckBackups=getDeckBackups(deckFile);
  int len=deckBackups.length;
  if (len > 0 && deckBackups[len - 1].lastModified() == deckFile.lastModified()) {
    deleteDeckBackups(deckBackups,mMaxBackups);
    return RETURN_DECK_NOT_CHANGED;
  }
  Date value=Utils.genToday(Utils.utcOffset());
  String backupFilename;
  try {
    backupFilename=String.format(Utils.ENGLISH_LOCALE,deckFile.getName().replace(".anki","") + "-%tF.anki",value);
  }
 catch (  UnknownFormatConversionException e) {
    Log.e(AnkiDroidApp.TAG,"backupDeck: error on creating backup filename: " + e);
    return RETURN_ERROR;
  }
  File backupFile=new File(getBackupDirectory().getPath(),backupFilename);
  if (backupFile.exists()) {
    deleteDeckBackups(deckBackups,mMaxBackups);
    return RETURN_TODAY_ALREADY_BACKUP_DONE;
  }
  if (getFreeDiscSpace(deckFile) < deckFile.length() + (StudyOptions.MIN_FREE_SPACE * 1024 * 1024)) {
    Log.e(AnkiDroidApp.TAG,"Not enough space on sd card to backup " + deckFile.getName() + ".");
    return RETURN_NOT_ENOUGH_SPACE;
  }
  try {
    InputStream stream=new FileInputStream(deckFile);
    Utils.writeToFile(stream,backupFile.getAbsolutePath());
    stream.close();
    backupFile.setLastModified(deckFile.lastModified());
  }
 catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    Log.e(AnkiDroidApp.TAG,"Backup file " + deckFile.getName() + " - Copying of file failed.");
    return RETURN_ERROR;
  }
  mLastCreatedBackup=backupFile;
  mLastDeckBackups=deckBackups;
  return RETURN_BACKUP_CREATED;
}
