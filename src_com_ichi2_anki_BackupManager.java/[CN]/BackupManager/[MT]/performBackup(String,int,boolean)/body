{
  SharedPreferences prefs=AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext());
  if (!prefs.getBoolean("useBackup",true) && !force) {
    return;
  }
  File collectionFile=new File(path);
  File[] deckBackups=getBackups(collectionFile);
  int len=deckBackups.length;
  if (len > 0 && deckBackups[len - 1].lastModified() == collectionFile.lastModified()) {
    return;
  }
  SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd-HH-mm");
  Calendar cal=new GregorianCalendar();
  cal.setTimeInMillis(System.currentTimeMillis());
  Date lastBackupDate=null;
  while (lastBackupDate == null && len > 0) {
    try {
      len--;
      lastBackupDate=df.parse(deckBackups[len].getName().replaceAll("^.*-(\\d{4}-\\d{2}-\\d{2}-\\d{2}-\\d{2}).anki2$","$1"));
    }
 catch (    ParseException e) {
      lastBackupDate=null;
    }
  }
  if (lastBackupDate != null && lastBackupDate.getTime() + interval * 3600000L > Utils.intNow(1000) && !force) {
    return;
  }
  String backupFilename;
  try {
    backupFilename=String.format(Utils.ENGLISH_LOCALE,collectionFile.getName().replace(".anki2","") + "-%s.anki2",df.format(cal.getTime()));
  }
 catch (  UnknownFormatConversionException e) {
    Log.e(AnkiDroidApp.TAG,"performBackup: error on creating backup filename: " + e);
    return;
  }
  File backupFile=new File(getBackupDirectory().getPath(),backupFilename);
  if (backupFile.exists()) {
    return;
  }
  if (getFreeDiscSpace(collectionFile) < collectionFile.length() + (MIN_FREE_SPACE * 1024 * 1024)) {
    Log.e(AnkiDroidApp.TAG,"performBackup: Not enough space on sd card to backup.");
    prefs.edit().putBoolean("noSpaceLeft",true).commit();
    return;
  }
  try {
    InputStream stream=new FileInputStream(collectionFile);
    Utils.writeToFile(stream,backupFile.getAbsolutePath());
    stream.close();
    backupFile.setLastModified(collectionFile.lastModified());
  }
 catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    Log.e(AnkiDroidApp.TAG,"performBackup: Copying of file failed.");
    return;
  }
  deleteDeckBackups(path,prefs.getInt("backupMax",3));
}
