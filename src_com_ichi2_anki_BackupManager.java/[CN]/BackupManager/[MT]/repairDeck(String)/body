{
  File deckFile=new File(deckPath);
  AnkiDatabaseManager.closeDatabase(deckPath);
  String execString="sqlite3 " + deckPath + " .dump | sqlite3 "+ deckPath+ ".tmp";
  try {
    String[] cmd={"/system/bin/sh","-c",execString};
    Process process=Runtime.getRuntime().exec(cmd);
    process.waitFor();
    String brokenDirectory=getBrokenDirectory().getPath();
    Date value=Utils.genToday(Utils.utcOffset());
    String movedFilename=String.format(Utils.ENGLISH_LOCALE,deckFile.getName().replace(".anki","") + "-corrupt-%tF.anki",value);
    File movedFile=new File(brokenDirectory,movedFilename);
    int i=1;
    while (movedFile.exists()) {
      movedFile=new File(brokenDirectory,movedFilename.replace(".anki","-" + Integer.toString(i) + ".anki"));
      i++;
    }
    movedFilename=movedFile.getName();
    if (!deckFile.renameTo(movedFile)) {
      return false;
    }
    File repairedFile=new File(deckPath + ".tmp");
    if (!repairedFile.renameTo(deckFile)) {
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    Log.e("AnkiDroidApp.TAG","repairDeck - error: " + e);
  }
catch (  InterruptedException e) {
    Log.e("AnkiDroidApp.TAG","repairDeck - error: " + e);
  }
  return false;
}
