{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.download_deck_picker);
  initDownloadManagerService();
  registerExternalStorageListener();
  initDialogs();
  mSharedDeckDownloads=new ArrayList<Download>();
  mSharedDecks=new ArrayList<SharedDeck>();
  mFoundSharedDecks=new ArrayList<SharedDeck>();
  mSharedDecksAdapter=new SharedDecksAdapter();
  mSharedDecksListView=(ListView)findViewById(R.id.list);
  mSharedDecksListView.setAdapter(mSharedDecksAdapter);
  registerForContextMenu(mSharedDecksListView);
  mSearchEditText=(EditText)findViewById(R.id.shared_deck_download_search);
  mSearchEditText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      findDecks();
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  mSharedDecksListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Resources res=getResources();
      Object obj=getSharedDeckFromList(position);
      if (obj instanceof SharedDeck) {
        SharedDeck selectedDeck=(SharedDeck)obj;
        for (        Download d : mSharedDeckDownloads) {
          if (d.getTitle().equals(selectedDeck.getTitle())) {
            Themes.showThemedToast(SharedDeckPicker.this,res.getString(R.string.duplicate_download),true);
            return;
          }
        }
        SharedDeckDownload sharedDeckDownload=new SharedDeckDownload(selectedDeck.getId(),selectedDeck.getTitle());
        sharedDeckDownload.setSize(selectedDeck.getSize());
        mSharedDeckDownloads.add(sharedDeckDownload);
        refreshSharedDecksList();
        try {
          startService(mDownloadManagerServiceIntent);
          mDownloadManagerService.downloadFile(sharedDeckDownload);
        }
 catch (        RemoteException e) {
          Log.e(AnkiDroidApp.TAG,"RemoteException = " + e.getMessage());
          e.printStackTrace();
        }
      }
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  Connection.getSharedDecks(mGetSharedDecksListener,new Connection.Payload(new Object[]{}));
}
