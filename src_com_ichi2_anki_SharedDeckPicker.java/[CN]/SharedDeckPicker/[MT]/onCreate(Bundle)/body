{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.download_deck_picker);
  initDownloadManagerService();
  registerExternalStorageListener();
  initDialogs();
  mSharedDeckDownloads=new ArrayList<Download>();
  mSharedDecks=new ArrayList<SharedDeck>();
  mAllSharedDecks=new ArrayList<Object>();
  mSharedDecksAdapter=new SharedDecksAdapter();
  mSharedDecksListView=(ListView)findViewById(R.id.list);
  mSharedDecksListView.setAdapter(mSharedDecksAdapter);
  mSharedDecksListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      SharedDeck selectedDeck=(SharedDeck)mAllSharedDecks.get(position);
      SharedDeckDownload sharedDeckDownload=new SharedDeckDownload(selectedDeck.getId(),selectedDeck.getTitle());
      sharedDeckDownload.setSize(selectedDeck.getSize());
      mSharedDeckDownloads.add(sharedDeckDownload);
      refreshSharedDecksList();
      try {
        startService(mDownloadManagerServiceIntent);
        mDownloadManagerService.downloadFile(sharedDeckDownload);
      }
 catch (      RemoteException e) {
        Log.e(TAG,"RemoteException = " + e.getMessage());
        e.printStackTrace();
      }
    }
  }
);
  Connection.getSharedDecks(getSharedDecksListener,new Connection.Payload(new Object[]{}));
}
