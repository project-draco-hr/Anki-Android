{
  int ver=0;
  try {
    ver=(int)deck.getDB().queryScalar("SELECT version FROM deck LIMIT 1");
  }
 catch (  SQLException e) {
    ver=(int)deck.getDB().queryScalar("SELECT version FROM decks LIMIT 1");
  }
  if (ver < 65) {
    deck.upgradeNotes.add(com.ichi2.anki.R.string.deck_upgrade_too_old_version);
  }
  if (ver < 99) {
    deck.getDB().getDatabase().execSQL("ALTER TABLE FIELDS ADD COLUMN ckssum TEXT " + "NOT NULL DEFAULT \'\'");
    moveTable(deck,"cards");
    deck.getDB().getDatabase().execSQL("INSERT INTO cards SELECT id, factId, cardModelId, created, modified, " + "question, answer, 0, ordinal, 0, relativeDelay, type, lastInterval, interval, " + "due, factor, reps, successive, noCount FROM cards2");
    deck.getDB().getDatabase().execSQL("DROP TABLE cards2");
    moveTable(deck,"facts");
    deck.getDB().getDatabase().execSQL("INSERT OR IGNORE INTO facts id, modelID, created, modified, tags" + "spaceUntil FROM facts2");
    deck.getDB().getDatabase().execSQL("DROP TABLE facts2");
    deck.getDB().getDatabase().execSQL("INSERT INTO deck SELECT id, created, modified, 0, 99, currentModelId, " + "IFNULL(syncName, \"\"), lastSync, utcOffset, newCardOrder, newCardSpacing, newCardsPerDay, revCardOrder, " + "600, sessionRepLimit, sessionTimeLimit, 1, 16, \'\', \'\', \'\', \'\' FROM decks");
    deck.getDB().getDatabase().execSQL("DROP TABLE decks");
    moveTable(deck,"models");
    deck.getDB().getDatabase().execSQL("INSERT OR IGNORE INTO models SELECT id, created, modified, name, " + "\'[0.5, 3, 10]\', \'[1, 7, 4]\', \'[0.5, 3, 10]\', \'[1, 7, 4]\', 0, 2.5 FROM models2");
    deck.getDB().getDatabase().execSQL("DROP TABLE models2");
  }
  return ver;
}
