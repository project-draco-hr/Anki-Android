{
  double oldmod=deck.getModified();
  int version=upgradeSchema(deck);
  deck.upgradeNotes=new ArrayList<Integer>();
  if (version < 100) {
    String[] oldDynamicIndices={"intervalDesc","intervalAsc","randomOrder","dueAsc","dueDesc"};
    for (    String d : oldDynamicIndices) {
      deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d + "2");
      deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d);
    }
    deck.updateDynamicIndices();
    deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_fields_value");
    deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_factor");
    deck.getDB().getDatabase().execSQL("DROP TABLE IF EXISTS stats");
    deck.getDB().getDatabase().execSQL("INSERT INTO revlog SELECT CAST(time * 1000 AS INT), cardId, ease, reps, lastInterval, nextInterval, nextFactor, CAST(MIN(thinkingTime, 60) * 1000 AS INT), 0 FROM reviewHistory");
    deck.getDB().getDatabase().execSQL("DROP TABLE reviewHistory");
    deck.getDB().getDatabase().execSQL("UPDATE revlog SET ease = 1 WHERE ease = 0");
    deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_priority");
    deck.getDB().getDatabase().execSQL("UPDATE cards SET queue -1 WHERE queue BETWEEN -3 AND -1");
    deck.getDB().getDatabase().execSQL("UPDATE cards SET queue -2 WHERE queue BETWEEN 3 AND 5");
    deck.getDB().getDatabase().execSQL("UPDATE cards SET queue -3 WHERE queue BETWEEN 6 AND 8");
    deck.getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_fields_fieldModelId");
    deck.getDB().getDatabase().execSQL(String.format(Utils.ENGLISH_LOCALE,"UPDATE deck SET schemaMod = %f",Utils.now()));
    updateIndices(deck);
    deck.getDB().getDatabase().execSQL("ANALYZE");
    deck.setVersion(100);
    deck.commitToDB();
  }
  assert(deck.getModified() == oldmod);
  return true;
}
