{
  boolean ok=true;
  if (mCol.getDb().queryScalar("SELECT count() FROM cards WHERE nid NOT IN (SELECT id FROM notes)",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are cards without mother notes");
  }
  if (mCol.getDb().queryScalar("SELECT count() FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are notes without cards");
  }
  if (mCol.getDb().queryScalar("SELECT count() FROM cards WHERE usn = -1",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are unsynced cards");
  }
  if (mCol.getDb().queryScalar("SELECT count() FROM notes WHERE usn = -1",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are unsynced notes");
  }
  if (mCol.getDb().queryScalar("SELECT count() FROM revlog WHERE usn = -1",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are unsynced revlogs");
  }
  if (mCol.getDb().queryScalar("SELECT count() FROM graves WHERE usn = -1",false) != 0) {
    ok=false;
    Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are unsynced graves");
  }
  try {
    for (    JSONObject g : mCol.getDecks().all()) {
      if (g.getInt("usn") == -1) {
        ok=false;
        Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: unsynced deck: " + g.getString("name"));
      }
    }
    for (    Integer usn : mCol.getTags().allItems().values()) {
      if (usn == -1) {
        ok=false;
        Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: there are unsynced tags");
      }
    }
    boolean found=false;
    for (    JSONObject m : mCol.getModels().all()) {
      if (mCol.getServer()) {
        if (m.getInt("usn") < 0) {
          m.put("usn",0);
          found=true;
        }
      }
 else {
        if (m.getInt("usn") == -1) {
          ok=false;
          Log.e(AnkiDroidApp.TAG,"Sync - SanityCheck: unsynced model: " + m.getString("name"));
        }
      }
    }
    if (found) {
      mCol.getModels().save();
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  if (!ok) {
    return null;
  }
  mCol.getSched().reset();
  mCol.getSched().deckDueList(Sched.DECK_INFORMATION_SIMPLE_COUNTS);
  JSONArray ja=new JSONArray();
  JSONArray sa=new JSONArray();
  for (  int c : mCol.getSched().counts()) {
    sa.put(c);
  }
  ja.put(sa);
  ja.put(mCol.getDb().queryScalar("SELECT count() FROM cards"));
  ja.put(mCol.getDb().queryScalar("SELECT count() FROM notes"));
  ja.put(mCol.getDb().queryScalar("SELECT count() FROM revlog"));
  ja.put(mCol.getDb().queryScalar("SELECT count() FROM graves"));
  ja.put(mCol.getModels().all().size());
  ja.put(mCol.getDecks().all().size());
  ja.put(mCol.getDecks().allConf().size());
  return ja;
}
