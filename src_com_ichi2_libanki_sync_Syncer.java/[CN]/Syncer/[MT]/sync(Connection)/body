{
  mSyncMsg="";
  mCol.save();
  HttpResponse ret=mServer.meta();
  if (ret == null) {
    return null;
  }
  int returntype=ret.getStatusLine().getStatusCode();
  if (returntype == 403) {
    return new Object[]{"badAuth"};
  }
  try {
    mCol.getDb().getDatabase().beginTransaction();
    try {
      Log.i(AnkiDroidApp.TAG,"Sync: getting meta data from server");
      JSONObject rMeta=new JSONObject(mServer.stream2String(ret.getEntity().getContent()));
      mCol.log("rmeta",rMeta);
      long rscm=rMeta.getLong("scm");
      int rts=rMeta.getInt("ts");
      mRMod=rMeta.getLong("mod");
      mMaxUsn=rMeta.getInt("usn");
      mMediaUsn=rMeta.getInt("musn");
      mSyncMsg=rMeta.getString("msg");
      if (!rMeta.getBoolean("cont")) {
        return new Object[]{"serverAbort"};
      }
 else {
      }
      Log.i(AnkiDroidApp.TAG,"Sync: building local meta data");
      JSONObject lMeta=meta();
      mCol.log("lmeta",lMeta);
      mLMod=lMeta.getLong("mod");
      mMinUsn=lMeta.getInt("usn");
      long lscm=lMeta.getLong("scm");
      int lts=lMeta.getInt("ts");
      long diff=Math.abs(rts - lts);
      if (diff > 300) {
        mCol.log("clock off");
        return new Object[]{"clockOff",diff};
      }
      if (mLMod == mRMod) {
        Log.i(AnkiDroidApp.TAG,"Sync: no changes - returning");
        mCol.log("no changes");
        return new Object[]{"noChanges"};
      }
 else       if (lscm != rscm) {
        Log.i(AnkiDroidApp.TAG,"Sync: full sync necessary - returning");
        mCol.log("schema diff");
        return new Object[]{"fullSync"};
      }
      mLNewer=mLMod > mRMod;
      if (!mCol.basicCheck()) {
        mCol.log("basic check");
        return new Object[]{"basicCheckFailed"};
      }
      publishProgress(con,R.string.sync_deletions_message);
      Log.i(AnkiDroidApp.TAG,"Sync: collection removed data");
      JSONObject lrem=removed();
      JSONObject o=new JSONObject();
      o.put("minUsn",mMinUsn);
      o.put("lnewer",mLNewer);
      o.put("graves",lrem);
      Log.i(AnkiDroidApp.TAG,"Sync: sending and receiving removed data");
      JSONObject rrem=mServer.start(o);
      Log.i(AnkiDroidApp.TAG,"Sync: applying removed data");
      remove(rrem);
      publishProgress(con,R.string.sync_small_objects_message);
      Log.i(AnkiDroidApp.TAG,"Sync: collection small changes");
      JSONObject lchg=changes();
      JSONObject sch=new JSONObject();
      sch.put("changes",lchg);
      Log.i(AnkiDroidApp.TAG,"Sync: sending and receiving small changes");
      JSONObject rchg=mServer.applyChanges(sch);
      Log.i(AnkiDroidApp.TAG,"Sync: merging small changes");
      mergeChanges(lchg,rchg);
      publishProgress(con,R.string.sync_download_chunk);
      while (true) {
        Log.i(AnkiDroidApp.TAG,"Sync: downloading chunked data");
        JSONObject chunk=mServer.chunk();
        mCol.log("server chunk",chunk);
        Log.i(AnkiDroidApp.TAG,"Sync: applying chunked data");
        applyChunk(chunk);
        if (chunk.getBoolean("done")) {
          break;
        }
      }
      publishProgress(con,R.string.sync_upload_chunk);
      while (true) {
        Log.i(AnkiDroidApp.TAG,"Sync: collecting chunked data");
        JSONObject chunk=chunk();
        mCol.log("client chunk",chunk);
        JSONObject sech=new JSONObject();
        sech.put("chunk",chunk);
        Log.i(AnkiDroidApp.TAG,"Sync: sending chunked data");
        mServer.applyChunk(sech);
        if (chunk.getBoolean("done")) {
          break;
        }
      }
      JSONObject c=sanityCheck();
      JSONObject sanity=mServer.sanityCheck2(c);
      if (sanity == null || !sanity.optString("status","bad").equals("ok")) {
        mCol.log("sanity check failed",c,sanity);
        return new Object[]{"sanityCheckError",null};
      }
      publishProgress(con,R.string.sync_finish_message);
      Log.i(AnkiDroidApp.TAG,"Sync: sending finish command");
      long mod=mServer.finish();
      if (mod == 0) {
        return new Object[]{"finishError"};
      }
      Log.i(AnkiDroidApp.TAG,"Sync: finishing");
      finish(mod);
      publishProgress(con,R.string.sync_writing_db);
      mCol.getDb().getDatabase().setTransactionSuccessful();
    }
  finally {
      mCol.getDb().getDatabase().endTransaction();
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalStateException e) {
    throw new RuntimeException(e);
  }
catch (  OutOfMemoryError e) {
    AnkiDroidApp.saveExceptionReportFile(e,"Syncer-sync");
    return new Object[]{"OutOfMemoryError"};
  }
catch (  IOException e) {
    AnkiDroidApp.saveExceptionReportFile(e,"Syncer-sync");
    return new Object[]{"IOException"};
  }
  return new Object[]{"success"};
}
