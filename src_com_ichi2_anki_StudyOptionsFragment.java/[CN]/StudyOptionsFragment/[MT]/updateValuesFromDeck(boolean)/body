{
  String fullName;
  if (!AnkiDroidApp.colIsOpen()) {
    return;
  }
  JSONObject deck=getCol().getDecks().current();
  try {
    if (mTextDeckName == null) {
      initAllContentViews();
      resetAndUpdateValuesFromDeck();
      return;
    }
    fullName=deck.getString("name");
    String[] name=fullName.split("::");
    StringBuilder nameBuilder=new StringBuilder();
    if (name.length > 0) {
      nameBuilder.append(name[0]);
    }
    if (name.length > 1) {
      nameBuilder.append("\n").append(name[1]);
    }
    if (name.length > 3) {
      nameBuilder.append("...");
    }
    if (name.length > 2) {
      nameBuilder.append("\n").append(name[name.length - 1]);
    }
    mTextDeckName.setText(nameBuilder.toString());
    if (mCramInitialConfig != null) {
      openCramDeckOptions(mCramInitialConfig);
      return;
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  if (!mFragmented) {
    getActivity().setTitle(getResources().getString(R.string.studyoptions_title));
    List<String> parts=Arrays.asList(fullName.split("::"));
    AnkiDroidApp.getCompat().setSubtitle(getActivity(),parts.get(parts.size() - 1));
  }
  String desc;
  try {
    if (deck.getInt("dyn") == 0) {
      desc=getCol().getDecks().getActualDescription();
    }
 else {
      desc=getResources().getString(R.string.dyn_deck_desc);
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  if (desc.length() > 0) {
    mTextDeckDescription.setText(Html.fromHtml(desc));
    mTextDeckDescription.setVisibility(View.VISIBLE);
  }
 else {
    mTextDeckDescription.setVisibility(View.GONE);
  }
  DeckTask.launchDeckTask(DeckTask.TASK_TYPE_UPDATE_VALUES_FROM_DECK,mUpdateValuesFromDeckListener,new DeckTask.TaskData(getCol(),new Object[]{reset,mSmallChart != null}));
}
