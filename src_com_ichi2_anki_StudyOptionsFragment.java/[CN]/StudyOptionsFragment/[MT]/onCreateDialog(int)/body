{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder1=new StyledDialog.Builder(this.getActivity());
switch (id) {
case DIALOG_STATISTIC_TYPE:
    dialog=ChartBuilder.getStatisticsDialog(getActivity(),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_STATISTICS,mLoadStatisticsHandler,new DeckTask.TaskData(AnkiDroidApp.getCol(),which,false));
      }
    }
,mFragmented);
  break;
case DIALOG_CUSTOM_STUDY:
builder1.setTitle(res.getString(R.string.custom_study));
builder1.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder1.setItems(res.getStringArray(R.array.custom_study_options_labels),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCustomDialogChoice=which;
if (which == CUSTOM_STUDY_TAGS - 1) {
  showDialog(DIALOG_CUSTOM_STUDY_TAGS);
  return;
}
showDialog(DIALOG_CUSTOM_STUDY_DETAILS);
}
}
);
builder1.setCancelable(true);
dialog=builder1.create();
break;
case DIALOG_CUSTOM_STUDY_TAGS:
if (!AnkiDroidApp.colIsOpen()) {
}
Context context=getActivity().getBaseContext();
RadioGroup rg=formatRGCardType(context,res);
mSelectWhichCards=rg;
builder1.setView(rg,false,true);
Collection col;
col=AnkiDroidApp.getCol();
allTags=col.getTags().all().toArray(new String[0]);
builder1.setTitle(R.string.studyoptions_limit_select_tags);
builder1.setMultiChoiceItems(allTags,new boolean[allTags.length],new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String tag=allTags[which];
if (mSelectedTags.contains(tag)) {
Log.i(AnkiDroidApp.TAG,"unchecked tag: " + tag);
mSelectedTags.remove(tag);
}
 else {
Log.i(AnkiDroidApp.TAG,"checked tag: " + tag);
mSelectedTags.add(tag);
}
}
}
,new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
mTagsDialog.setItemListChecked(isChecked);
mSelectedTags=new HashSet<String>(mTagsDialog.getCheckedItems());
}
}
);
builder1.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCustomStudyEditText.setText("");
String tags=mSelectedTags.toString();
mCustomStudyEditText.setHint(getResources().getString(R.string.card_browser_tags_shown,tags.substring(1,tags.length() - 1)));
StringBuilder sb=new StringBuilder();
switch (mSelectedOption) {
case 1:
sb.append("is:new ");
break;
case 2:
sb.append("is:due ");
break;
default :
break;
}
int i=0;
for (String tag : mSelectedTags) {
if (i != 0) {
sb.append("or ");
}
 else {
sb.append("(");
}
sb.append("tag:").append(tag).append(" ");
i++;
}
if (i > 0) {
sb.append(")");
}
mSearchTerms=sb.toString();
createFilteredDeck(new JSONArray(),new Object[]{mSearchTerms,Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},false);
}
}
);
builder1.setNegativeButton(res.getString(R.string.cancel),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mTagsDialog.setItemListChecked(false);
mSelectedTags.clear();
}
}
);
builder1.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mTagsDialog.setItemListChecked(false);
mSelectedTags.clear();
}
}
);
builder1.setShowFilterTags(true);
mTagsDialog=builder1.create();
dialog=mTagsDialog;
mTagsDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
break;
case DIALOG_CUSTOM_STUDY_DETAILS:
builder1.setContentView(mCustomStudyDetailsView);
builder1.setCancelable(true);
builder1.setNegativeButton(R.string.cancel,null);
builder1.setPositiveButton(R.string.ok,null);
dialog=builder1.create();
break;
default :
dialog=null;
break;
}
dialog.setOwnerActivity(getActivity());
return dialog;
}
