{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this.getActivity());
switch (id) {
case DIALOG_STATISTIC_TYPE:
    dialog=ChartBuilder.getStatisticsDialog(getActivity(),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_STATISTICS,mLoadStatisticsHandler,new DeckTask.TaskData(AnkiDroidApp.getCol(),which,false));
      }
    }
,mFragmented);
  break;
case DIALOG_LEARN_MORE:
builder.setTitle(res.getString(R.string.learnmore_title));
builder.setContentView(mLearnMoreView);
builder.setCancelable(true);
builder.setNegativeButton(R.string.cancel,null);
builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (AnkiDroidApp.colIsOpen()) {
try {
int n=Integer.parseInt(((EditText)mLearnMoreView.findViewById(R.id.learnmore_extend_new_limit)).getText().toString());
int r=Integer.parseInt(((EditText)mLearnMoreView.findViewById(R.id.learnmore_extend_rev_limit)).getText().toString());
Collection col=AnkiDroidApp.getCol();
JSONObject deck=col.getDecks().current();
deck.put("extendNew",n);
deck.put("extendRev",r);
col.getDecks().save(deck);
col.getSched().extendLimits(n,r);
finishCongrats();
resetAndUpdateValuesFromDeck();
}
 catch (NumberFormatException e) {
}
catch (JSONException e) {
throw new RuntimeException(e);
}
}
}
}
);
dialog=builder.create();
break;
case DIALOG_REVIEW_EARLY:
builder.setTitle(res.getString(R.string.reviewearly_title));
TextView instructionsView=((TextView)mReviewEarlyView.findViewById(R.id.reviewearly_instructions));
String instructions=instructionsView.getText().toString();
instructionsView.setText(instructions.replaceAll("XXX",res.getString(R.string.review_early_deck_name)));
builder.setContentView(mReviewEarlyView);
builder.setCancelable(true);
builder.setNegativeButton(R.string.cancel,null);
builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (AnkiDroidApp.colIsOpen()) {
try {
int days=Integer.parseInt(((EditText)mReviewEarlyView.findViewById(R.id.reviewearly_days_ahead)).getText().toString());
Collection col=AnkiDroidApp.getCol();
JSONObject deck=col.getDecks().current();
String search="prop:due<=" + String.valueOf(days) + " 'deck:"+ deck.getString("name")+ "'";
long id=AnkiDroidApp.getCol().getDecks().newDyn(getResources().getString(R.string.review_early_deck_name));
deck=col.getDecks().current();
JSONArray ar=deck.getJSONArray("terms");
ar.getJSONArray(0).put(0,search);
ar.getJSONArray(0).put(1,1000);
ar.getJSONArray(0).put(2,6);
deck.put("terms",ar);
deck.put("resched",true);
deck.put("delays",null);
finishCongrats();
mProgressDialog=StyledProgressDialog.show(getActivity(),"",getResources().getString(R.string.rebuild_cram_deck),true);
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REBUILD_CRAM,mRebuildEarlyReviewListener,new DeckTask.TaskData(AnkiDroidApp.getCol(),AnkiDroidApp.getCol().getDecks().selected(),mFragmented));
}
 catch (NumberFormatException e) {
}
catch (JSONException e) {
throw new RuntimeException(e);
}
}
}
}
);
dialog=builder.create();
break;
default :
dialog=null;
}
dialog.setOwnerActivity(getActivity());
return dialog;
}
