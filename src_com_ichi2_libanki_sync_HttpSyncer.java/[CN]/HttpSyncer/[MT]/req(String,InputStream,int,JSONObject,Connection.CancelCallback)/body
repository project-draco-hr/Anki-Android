{
  File tmpFileBuffer=null;
  try {
    String bdry="--" + BOUNDARY;
    StringWriter buf=new StringWriter();
    mPostVars.put("c",comp != 0 ? 1 : 0);
    for (    String key : mPostVars.keySet()) {
      buf.write(bdry + "\r\n");
      buf.write(String.format(Locale.US,"Content-Disposition: form-data; name=\"%s\"\r\n\r\n%s\r\n",key,mPostVars.get(key)));
    }
    tmpFileBuffer=File.createTempFile("syncer",".tmp",new File(AnkiDroidApp.getCacheStorageDirectory()));
    FileOutputStream fos=new FileOutputStream(tmpFileBuffer);
    BufferedOutputStream bos=new BufferedOutputStream(fos);
    GZIPOutputStream tgt;
    if (fobj != null) {
      buf.write(bdry + "\r\n");
      buf.write("Content-Disposition: form-data; name=\"data\"; filename=\"data\"\r\nContent-Type: application/octet-stream\r\n\r\n");
      buf.close();
      bos.write(buf.toString().getBytes("UTF-8"));
      int len;
      BufferedInputStream bfobj=new BufferedInputStream(fobj);
      byte[] chunk=new byte[65536];
      if (comp != 0) {
        tgt=new GZIPOutputStream(bos);
        while ((len=bfobj.read(chunk)) >= 0) {
          tgt.write(chunk,0,len);
        }
        tgt.close();
        bos=new BufferedOutputStream(new FileOutputStream(tmpFileBuffer,true));
      }
 else {
        while ((len=bfobj.read(chunk)) >= 0) {
          bos.write(chunk,0,len);
        }
      }
      bos.write(("\r\n" + bdry + "--\r\n").getBytes("UTF-8"));
    }
 else {
      buf.close();
      bos.write(buf.toString().getBytes("UTF-8"));
    }
    bos.flush();
    bos.close();
    String url=Consts.SYNC_BASE;
    if (method.equals("register")) {
      url=url + "account/signup" + "?username="+ registerData.getString("u")+ "&password="+ registerData.getString("p");
    }
 else     if (method.startsWith("upgrade")) {
      url=url + method;
    }
 else {
      url=syncURL() + method;
    }
    HttpPost httpPost=new HttpPost(url);
    HttpEntity entity=new ProgressByteEntity(tmpFileBuffer);
    httpPost.setEntity(entity);
    httpPost.setHeader("Content-type","multipart/form-data; boundary=" + BOUNDARY);
    HttpParams params=new BasicHttpParams();
    params.setParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS,30);
    params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE,new ConnPerRouteBean(30));
    params.setParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE,false);
    params.setParameter(CoreProtocolPNames.USER_AGENT,"AnkiDroid-" + AnkiDroidApp.getPkgVersionName());
    HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
    HttpConnectionParams.setSoTimeout(params,Connection.CONN_TIMEOUT);
    SchemeRegistry registry=new SchemeRegistry();
    registry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));
    registry.register(new Scheme("https",new EasySSLSocketFactory(),443));
    ThreadSafeClientConnManager cm=new ThreadSafeClientConnManager(params,registry);
    if (cancelCallback != null) {
      cancelCallback.setConnectionManager(cm);
    }
    try {
      HttpClient httpClient=new DefaultHttpClient(cm,params);
      HttpResponse httpResponse=httpClient.execute(httpPost);
      assertOk(httpResponse);
      return httpResponse;
    }
 catch (    SSLException e) {
      Log.e(AnkiDroidApp.TAG,"SSLException while building HttpClient",e);
      throw new RuntimeException("SSLException while building HttpClient");
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"BasicHttpSyncer.sync: IOException",e);
    throw new RuntimeException(e);
  }
catch (  JSONException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (tmpFileBuffer != null && tmpFileBuffer.exists()) {
      tmpFileBuffer.delete();
    }
  }
}
