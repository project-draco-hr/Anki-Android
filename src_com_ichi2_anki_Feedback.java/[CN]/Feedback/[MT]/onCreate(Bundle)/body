{
  super.onCreate(savedInstanceState);
  Resources res=getResources();
  Context context=getBaseContext();
  SharedPreferences sharedPreferences=PrefSettings.getSharedPrefs(context);
  String reportErrorMode=sharedPreferences.getString("reportErrorMode",REPORT_ASK);
  mNonce=UUID.randomUUID().getMostSignificantBits();
  mFeedbackUrl=res.getString(R.string.feedback_post_url);
  mErrorUrl=res.getString(R.string.error_post_url);
  mPostingFeedback=false;
  getErrorFiles();
  if (reportErrorMode.equals(REPORT_ALWAYS)) {
    try {
    }
 catch (    Exception e) {
      Log.e(AnkiDroidApp.TAG,e.toString());
    }
    deleteFiles(true,false);
    return;
  }
 else   if (reportErrorMode.equals(REPORT_NEVER)) {
    deleteFiles(false,false);
  }
  setContentView(R.layout.feedback);
  Button btnSend=(Button)findViewById(R.id.btnFeedbackSend);
  Button btnKeepLatest=(Button)findViewById(R.id.btnFeedbackKeepLatest);
  Button btnClearAll=(Button)findViewById(R.id.btnFeedbackClearAll);
  mEtFeedbackText=(EditText)findViewById(R.id.etFeedbackText);
  mLvErrorList=(ListView)findViewById(R.id.lvFeedbackErrorList);
  mErrorAdapter=new SimpleAdapter(this,mErrorReports,R.layout.error_item,new String[]{"name","state"},new int[]{R.id.error_item_text,R.id.error_item_progress});
  mErrorAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
    @Override public boolean setViewValue(    View view,    Object arg1,    String text){
      if (view.getId() == R.id.error_item_progress) {
        if (text.equals(STATE_UPLOADING)) {
          view.setVisibility(View.VISIBLE);
        }
 else {
          view.setVisibility(View.GONE);
        }
        return true;
      }
      return false;
    }
  }
);
  btnClearAll.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      deleteFiles(false,false);
      refreshErrorListView();
      refreshInterface();
    }
  }
);
  mLvErrorList.setAdapter(mErrorAdapter);
  btnSend.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!mPostingFeedback) {
        String feedback=mEtFeedbackText.getText().toString();
        Connection.sendFeedback(mSendListener,new Payload(new Object[]{mFeedbackUrl,mErrorUrl,feedback,mErrorReports,mNonce,getApplication()}));
        if (mErrorReports.size() > 0) {
          mPostingFeedback=true;
        }
        if (feedback.length() > 0) {
          mPostingFeedback=true;
        }
        refreshInterface();
      }
    }
  }
);
  btnKeepLatest.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      deleteFiles(false,true);
      refreshErrorListView();
      refreshInterface();
    }
  }
);
  refreshInterface();
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
}
