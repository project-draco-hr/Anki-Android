{
  if (getDrawerToggle().onOptionsItemSelected(item)) {
    return true;
  }
switch (item.getItemId()) {
case R.id.action_add_card_from_card_browser:
    Intent intent=new Intent(CardBrowser.this,NoteEditor.class);
  intent.putExtra(NoteEditor.EXTRA_CALLER,NoteEditor.CALLER_CARDBROWSER_ADD);
startActivityForResultWithAnimation(intent,ADD_NOTE,ActivityTransitionAnimation.LEFT);
return true;
case R.id.action_list_my_searches:
JSONObject savedFiltersObj=getCol().getConf().optJSONObject("savedFilters");
ArrayList<String> savedFilters=new ArrayList<String>();
if (savedFiltersObj != null) {
Iterator<String> it=savedFiltersObj.keys();
while (it.hasNext()) {
savedFilters.add(it.next());
}
}
showDialogFragment(CardBrowserMySearchesDialog.newInstance(savedFilters,mMySearchDialogListener));
return true;
case R.id.action_sort_by_size:
showDialogFragment(CardBrowserOrderDialog.newInstance(mOrder,mOrderAsc,mOrderDialogListener));
return true;
case R.id.action_show_marked:
mSearchTerms="tag:marked";
mSearchView.setQuery("",false);
mSearchView.setQueryHint(getResources().getString(R.string.card_browser_show_marked));
searchCards();
return true;
case R.id.action_show_suspended:
mSearchTerms="is:suspended";
mSearchView.setQuery("",false);
mSearchView.setQueryHint(getResources().getString(R.string.card_browser_show_suspended));
searchCards();
return true;
case R.id.action_search_by_tag:
showDialogFragment(DIALOG_TAGS);
return true;
default :
return super.onOptionsItemSelected(item);
}
}
