{
  super.onCollectionLoaded(col);
  Log.v(AnkiDroidApp.TAG,"Card Browser onCollectionLoaded()");
  mDeckNames=new HashMap<String,String>();
  for (  long did : getCol().getDecks().allIds()) {
    mDeckNames.put(String.valueOf(did),getCol().getDecks().name(did));
  }
  registerExternalStorageListener();
  Intent i=getIntent();
  mWholeCollection=i.hasExtra("fromDeckpicker") && i.getBooleanExtra("fromDeckpicker",false);
  mBackground=Themes.getCardBrowserBackground();
  SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
  Resources res=getResources();
  mDropDownDecks=getCol().getDecks().allSorted();
  mDropDownAdapter=new DeckDropDownAdapter(this,mDropDownDecks);
  mActionBar=getSupportActionBar();
  mActionBar.setDisplayShowTitleEnabled(false);
  mActionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  mActionBar.setListNavigationCallbacks(mDropDownAdapter,this);
  mOrderByFields=res.getStringArray(R.array.card_browser_order_labels);
  try {
    mOrder=CARD_ORDER_NONE;
    String colOrder=getCol().getConf().getString("sortType");
    for (int c=0; c < fSortTypes.length; ++c) {
      if (fSortTypes[c].equals(colOrder)) {
        mOrder=c;
        break;
      }
    }
    if (mOrder == 1 && preferences.getBoolean("cardBrowserNoSorting",false)) {
      mOrder=0;
    }
    mOrderAsc=Upgrade.upgradeJSONIfNecessary(getCol(),getCol().getConf(),"sortBackwards",false);
    if (fSortTypes[mOrder].equals("noteFld")) {
      mOrderAsc=!mOrderAsc;
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  mCards=new ArrayList<HashMap<String,String>>();
  mCardsListView=(ListView)findViewById(R.id.card_browser_list);
  mCardsColumn1Spinner=(Spinner)findViewById(R.id.browser_column1_spinner);
  ArrayAdapter<CharSequence> column1Adapter=ArrayAdapter.createFromResource(this,R.array.browser_column1_headings,android.R.layout.simple_spinner_item);
  column1Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mCardsColumn1Spinner.setAdapter(column1Adapter);
  mCardsColumn1Spinner.setClickable(false);
  mColumn2Index=AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt("cardBrowserColumn2",0);
  mCardsColumn2Spinner=(Spinner)findViewById(R.id.browser_column2_spinner);
  ArrayAdapter<CharSequence> column2Adapter=ArrayAdapter.createFromResource(this,R.array.browser_column2_headings,android.R.layout.simple_spinner_item);
  column2Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mCardsColumn2Spinner.setAdapter(column2Adapter);
  mCardsColumn2Spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos != mColumn2Index) {
        mColumn2Index=pos;
        AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt("cardBrowserColumn2",mColumn2Index).commit();
        String[] fromMap=mCardsAdapter.getFromMapping();
        fromMap[1]=COLUMN_KEYS[mColumn2Index];
        mCardsAdapter.setFromMapping(fromMap);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  int sflRelativeFontSize=preferences.getInt("relativeCardBrowserFontSize",DEFAULT_FONT_SIZE_RATIO);
  String sflCustomFont=preferences.getString("browserEditorFont","");
  mCardsAdapter=new MultiColumnListAdapter(this,mCards,R.layout.card_item_browser,new String[]{"sfld",COLUMN_KEYS[mColumn2Index]},new int[]{R.id.card_sfld,R.id.card_column2},"flags",sflRelativeFontSize,sflCustomFont);
  mCardsListView.setAdapter(mCardsAdapter);
  mCardsListView.setOnScrollListener(new RenderOnScroll());
  mCardsColumn2Spinner.setSelection(mColumn2Index);
  mCardsListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mPositionInCardsList=position;
      long cardId=Long.parseLong(mCards.get(mPositionInCardsList).get("id"));
      sCardBrowserCard=getCol().getCard(cardId);
      Intent editCard=new Intent(CardBrowser.this,NoteEditor.class);
      editCard.putExtra(NoteEditor.EXTRA_CALLER,NoteEditor.CALLER_CARDBROWSER_EDIT);
      editCard.putExtra(NoteEditor.EXTRA_CARD_ID,sCardBrowserCard.getId());
      startActivityForResultWithAnimation(editCard,EDIT_CARD,ActivityTransitionAnimation.LEFT);
    }
  }
);
  mCardsListView.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      mPositionInCardsList=position;
      showDialog(DIALOG_CONTEXT_MENU);
      return true;
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  mSearchTerms="";
  if (!mWholeCollection) {
    String currentDeckName;
    try {
      currentDeckName=getCol().getDecks().current().getString("name");
    }
 catch (    JSONException e) {
      throw new RuntimeException(e);
    }
    for (int dropDownDeckIdx=0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {
      JSONObject deck=mDropDownDecks.get(dropDownDeckIdx);
      String deckName;
      try {
        deckName=deck.getString("name");
      }
 catch (      JSONException e) {
        throw new RuntimeException();
      }
      if (deckName.equals(currentDeckName)) {
        mActionBar.setSelectedNavigationItem(dropDownDeckIdx + 1);
        break;
      }
    }
  }
  dismissOpeningCollectionDialog();
}
