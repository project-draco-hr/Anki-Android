{
  Log.i(AnkiDroidApp.TAG,"doInBackgroundLoadTutorial");
  Resources res=AnkiDroidApp.getInstance().getBaseContext().getResources();
  File sampleDeckFile=new File(params[0].getString());
  publishProgress(new TaskData(res.getString(R.string.tutorial_load)));
  AnkiDb ankiDB=null;
  try {
    InputStream stream=res.getAssets().open(DeckCreator.EMPTY_DECK_NAME);
    Utils.writeToFile(stream,sampleDeckFile.getAbsolutePath());
    stream.close();
    Deck.initializeEmptyDeck(sampleDeckFile.getAbsolutePath());
    String[] questions=res.getStringArray(R.array.tutorial_questions);
    String[] answers=res.getStringArray(R.array.tutorial_answers);
    String[] sampleQuestions=res.getStringArray(R.array.tutorial_capitals_questions);
    String[] sampleAnswers=res.getStringArray(R.array.tutorial_capitals_answers);
    Deck deck=Deck.openDeck(sampleDeckFile.getAbsolutePath());
    ankiDB=AnkiDatabaseManager.getDatabase(deck.getDeckPath());
    ankiDB.getDatabase().beginTransaction();
    try {
      CardModel cardModel=null;
      int len=Math.min(questions.length,answers.length);
      for (int i=0; i < len + Math.min(sampleQuestions.length,sampleAnswers.length); i++) {
        Fact fact=deck.newFact();
        if (cardModel == null) {
          cardModel=deck.activeCardModels(fact).entrySet().iterator().next().getValue();
        }
        int fidx=0;
        for (        Fact.Field f : fact.getFields()) {
          if (fidx == 0) {
            f.setValue((i < len) ? questions[i] : sampleQuestions[i - len]);
          }
 else           if (fidx == 1) {
            f.setValue((i < len) ? answers[i] : sampleAnswers[i - len]);
          }
          fidx++;
        }
        if (!deck.importFact(fact,cardModel)) {
          sampleDeckFile.delete();
          return new TaskData(TUTORIAL_NOT_CREATED);
        }
      }
      deck.setSessionTimeLimit(0);
      deck.flushMod();
      deck.reset();
      ankiDB.getDatabase().setTransactionSuccessful();
    }
  finally {
      ankiDB.getDatabase().endTransaction();
    }
    AnkiDroidApp.setDeck(deck);
    return new TaskData(DECK_LOADED,deck,null);
  }
 catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    Log.e(AnkiDroidApp.TAG,"Empty deck could not be copied to the sd card.");
    sampleDeckFile.delete();
    return new TaskData(TUTORIAL_NOT_CREATED);
  }
catch (  RuntimeException e) {
    Log.e(AnkiDroidApp.TAG,"Error on creating tutorial deck: " + e);
    sampleDeckFile.delete();
    return new TaskData(TUTORIAL_NOT_CREATED);
  }
}
