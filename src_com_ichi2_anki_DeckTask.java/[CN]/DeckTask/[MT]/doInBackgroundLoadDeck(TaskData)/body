{
  String deckFilename=params[0].getString();
  int requestingActivity=params[0].getInt();
  Resources res=AnkiDroidApp.getInstance().getBaseContext().getResources();
  publishProgress(new TaskData(AnkiDroidApp.getInstance().getBaseContext().getResources().getString(R.string.finish_operation)));
  DeckManager.waitForDeckClosingThread(deckFilename);
  int backupResult=BackupManager.RETURN_NULL;
  if (PrefSettings.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).getBoolean("useBackup",true)) {
    publishProgress(new TaskData(res.getString(R.string.backup_deck)));
    backupResult=BackupManager.backupDeck(deckFilename);
  }
  if (BackupManager.getFreeDiscSpace(deckFilename) < (StudyOptions.MIN_FREE_SPACE * 1024 * 1024)) {
    backupResult=BackupManager.RETURN_LOW_SYSTEM_SPACE;
  }
  publishProgress(new TaskData(res.getString(R.string.loading_deck)));
  Deck deck=DeckManager.getDeck(deckFilename,requestingActivity == DeckManager.REQUESTING_ACTIVITY_STUDYOPTIONS,requestingActivity);
  if (deck == null) {
    BackupManager.cleanUpAfterBackupCreation(false);
    return new TaskData(DECK_NOT_LOADED,deckFilename);
  }
  BackupManager.cleanUpAfterBackupCreation(true);
  if (deck.hasFinishScheduler()) {
    deck.finishScheduler();
  }
  publishProgress(new TaskData(backupResult));
  return new TaskData(DECK_LOADED,deck,null);
}
