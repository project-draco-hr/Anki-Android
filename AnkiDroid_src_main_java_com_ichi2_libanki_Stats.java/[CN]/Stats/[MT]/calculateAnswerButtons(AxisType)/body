{
  mHasColoredCumulative=false;
  mCumulative=null;
  mTitle=R.string.stats_answer_buttons;
  mBackwards=false;
  mAxisTitles=new int[]{R.string.stats_answer_type,R.string.stats_answers};
  mValueLabels=new int[]{R.string.statistics_learn,R.string.statistics_young,R.string.statistics_mature};
  mColors=new int[]{R.attr.stats_learn,R.attr.stats_young,R.attr.stats_mature};
  mType=type;
  String lim=_getDeckFilter().replaceAll("[\\[\\]]","");
  Vector<String> lims=new Vector<>();
  int days;
  if (lim.length() > 0) {
    lims.add(lim);
  }
  if (type == AxisType.TYPE_MONTH) {
    days=30;
  }
 else   if (type == AxisType.TYPE_YEAR) {
    days=365;
  }
 else {
    days=-1;
  }
  if (days > 0) {
    lims.add("id > " + ((mCol.getSched().getDayCutoff() - (days * SECONDS_PER_DAY)) * 1000));
  }
  if (lims.size() > 0) {
    lim="where " + lims.get(0);
    for (int i=1; i < lims.size(); i++) {
      lim+=" and " + lims.get(i);
    }
  }
 else {
    lim="";
  }
  ArrayList<double[]> list=new ArrayList<>();
  Cursor cur=null;
  String query="select (case " + "                when type in (0,2) then 0 " + "        when lastIvl < 21 then 1 "+ "        else 2 end) as thetype, "+ "        (case when type in (0,2) and ease = 4 then 3 else ease end), count() from revlog " + lim + " "+ "        group by thetype, ease "+ "        order by thetype, ease";
  Timber.d("AnswerButtons query: %s",query);
  try {
    cur=mCol.getDb().getDatabase().rawQuery(query,null);
    while (cur.moveToNext()) {
      list.add(new double[]{cur.getDouble(0),cur.getDouble(1),cur.getDouble(2)});
    }
  }
  finally {
    if (cur != null && !cur.isClosed()) {
      cur.close();
    }
  }
  if (list.size() == 0) {
    list.add(0,new double[]{0,1,0});
  }
  mSeriesList=new double[4][list.size() + 1];
  for (int i=0; i < list.size(); i++) {
    double[] data=list.get(i);
    int currentType=(int)data[0];
    double ease=data[1];
    double cnt=data[2];
    if (currentType == 1) {
      ease+=5;
    }
 else     if (currentType == 2) {
      ease+=10;
    }
    mSeriesList[0][i]=ease;
    mSeriesList[1 + currentType][i]=cnt;
    if (cnt > mMaxCards) {
      mMaxCards=(int)cnt;
    }
  }
  mSeriesList[0][list.size()]=15;
  mFirstElement=0.5;
  mLastElement=14.5;
  mMcount=100;
  mMaxElements=15;
  if (mMaxCards == 0) {
    mMaxCards=10;
  }
  return list.size() > 0;
}
