{
  mTitle=R.string.stats_cards_types;
  mAxisTitles=new int[]{R.string.stats_answer_type,R.string.stats_answers,R.string.stats_cumulative_correct_percentage};
  mValueLabels=new int[]{R.string.statistics_mature,R.string.statistics_young_and_learn,R.string.statistics_unlearned,R.string.statistics_suspended_and_buried};
  mColors=new int[]{R.attr.stats_mature,R.attr.stats_young,R.attr.stats_unseen,R.attr.stats_suspended_and_buried};
  mType=type;
  ArrayList<double[]> list=new ArrayList<>();
  double[] pieData;
  Cursor cur=null;
  String query="select " + "sum(case when queue=2 and ivl >= 21 then 1 else 0 end), -- mtr\n" + "sum(case when queue in (1,3) or (queue=2 and ivl < 21) then 1 else 0 end), -- yng/lrn\n"+ "sum(case when queue=0 then 1 else 0 end), -- new\n"+ "sum(case when queue<0 then 1 else 0 end) -- susp\n"+ "from cards where did in "+ _limit();
  Timber.d("CardsTypes query: %s",query);
  try {
    cur=mCol.getDb().getDatabase().rawQuery(query,null);
    cur.moveToFirst();
    pieData=new double[]{cur.getDouble(0),cur.getDouble(1),cur.getDouble(2),cur.getDouble(3)};
  }
  finally {
    if (cur != null && !cur.isClosed()) {
      cur.close();
    }
  }
  mSeriesList=new double[1][4];
  mSeriesList[0]=pieData;
  mFirstElement=0.5;
  mLastElement=9.5;
  mMcount=100;
  mMaxElements=10;
  if (mMaxCards == 0) {
    mMaxCards=10;
  }
  return list.size() > 0;
}
