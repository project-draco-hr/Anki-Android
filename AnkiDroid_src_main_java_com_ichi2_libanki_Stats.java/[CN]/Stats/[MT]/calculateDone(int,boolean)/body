{
  mHasColoredCumulative=true;
  mDynamicAxis=true;
  mType=type;
  mBackwards=true;
  if (reps) {
    mTitle=R.string.stats_review_count;
    mAxisTitles=new int[]{type,R.string.stats_answers,R.string.stats_cumulative_answers};
  }
 else {
    mTitle=R.string.stats_review_time;
  }
  mValueLabels=new int[]{R.string.statistics_learn,R.string.statistics_relearn,R.string.statistics_young,R.string.statistics_mature,R.string.statistics_cram};
  mColors=new int[]{R.attr.stats_learn,R.attr.stats_relearn,R.attr.stats_young,R.attr.stats_mature,R.attr.stats_cram};
  int num=0;
  int chunk=0;
switch (type) {
case TYPE_MONTH:
    num=31;
  chunk=1;
break;
case TYPE_YEAR:
num=52;
chunk=7;
break;
case TYPE_LIFE:
num=-1;
chunk=30;
break;
}
ArrayList<String> lims=new ArrayList<>();
if (num != -1) {
lims.add("id > " + ((mCol.getSched().getDayCutoff() - ((num + 1) * chunk * 86400)) * 1000));
}
String lim=_revlogLimit().replaceAll("[\\[\\]]","");
if (lim.length() > 0) {
lims.add(lim);
}
if (lims.size() > 0) {
lim="WHERE ";
while (lims.size() > 1) {
lim+=lims.remove(0) + " AND ";
}
lim+=lims.remove(0);
}
 else {
lim="";
}
String ti;
String tf;
if (!reps) {
ti="time/1000";
if (mType == TYPE_MONTH) {
tf="/60.0";
mAxisTitles=new int[]{type,R.string.stats_minutes,R.string.stats_cumulative_time_minutes};
}
 else {
tf="/3600.0";
mAxisTitles=new int[]{type,R.string.stats_hours,R.string.stats_cumulative_time_hours};
}
}
 else {
ti="1";
tf="";
}
ArrayList<double[]> list=new ArrayList<>();
Cursor cur=null;
String query="SELECT (cast((id/1000 - " + mCol.getSched().getDayCutoff() + ") / 86400.0 AS INT))/"+ chunk+ " AS day, "+ "sum(CASE WHEN type = 0 THEN "+ ti+ " ELSE 0 END)"+ tf+ ", "+ "sum(CASE WHEN type = 1 AND lastIvl < 21 THEN "+ ti+ " ELSE 0 END)"+ tf+ ", "+ "sum(CASE WHEN type = 1 AND lastIvl >= 21 THEN "+ ti+ " ELSE 0 END)"+ tf+ ", "+ "sum(CASE WHEN type = 2 THEN "+ ti+ " ELSE 0 END)"+ tf+ ", "+ "sum(CASE WHEN type = 3 THEN "+ ti+ " ELSE 0 END)"+ tf+ " FROM revlog "+ lim+ " GROUP BY day ORDER BY day";
Timber.d("ReviewCount query: %s",query);
try {
cur=mCol.getDb().getDatabase().rawQuery(query,null);
while (cur.moveToNext()) {
list.add(new double[]{cur.getDouble(0),cur.getDouble(1),cur.getDouble(4),cur.getDouble(2),cur.getDouble(3),cur.getDouble(5)});
}
}
  finally {
if (cur != null && !cur.isClosed()) {
cur.close();
}
}
if (type != TYPE_LIFE && (list.size() == 0 || list.get(0)[0] > -num)) {
list.add(0,new double[]{-num,0,0,0,0,0});
}
 else if (type == TYPE_LIFE && list.size() == 0) {
list.add(0,new double[]{-12,0,0,0,0,0});
}
if (list.get(list.size() - 1)[0] < 0) {
list.add(new double[]{0,0,0,0,0,0});
}
mSeriesList=new double[6][list.size()];
for (int i=0; i < list.size(); i++) {
double[] data=list.get(i);
mSeriesList[0][i]=data[0];
mSeriesList[1][i]=data[1] + data[2] + data[3]+ data[4]+ data[5];
mSeriesList[2][i]=data[2] + data[3] + data[4]+ data[5];
mSeriesList[3][i]=data[3] + data[4] + data[5];
mSeriesList[4][i]=data[4] + data[5];
mSeriesList[5][i]=data[5];
if (mSeriesList[1][i] > mMaxCards) mMaxCards=(int)Math.round(data[1] + data[2] + data[3]+ data[4]+ data[5]);
if (data[5] >= 0.999) mFoundCramCards=true;
if (data[1] >= 0.999) mFoundLearnCards=true;
if (data[2] >= 0.999) mFoundRelearnCards=true;
if (data[0] > mLastElement) mLastElement=data[0];
if (data[0] < mFirstElement) mFirstElement=data[0];
if (data[0] == 0) {
mZeroIndex=i;
}
}
mMaxElements=list.size() - 1;
mCumulative=new double[6][];
mCumulative[0]=mSeriesList[0];
for (int i=1; i < mSeriesList.length; i++) {
mCumulative[i]=createCumulative(mSeriesList[i]);
if (i > 1) {
for (int j=0; j < mCumulative[i - 1].length; j++) {
mCumulative[i - 1][j]-=mCumulative[i][j];
}
}
}
switch (mType) {
case TYPE_MONTH:
mFirstElement=-31;
break;
case TYPE_YEAR:
mFirstElement=-52;
break;
default :
}
mMcount=0;
for (int i=1; i < mCumulative.length; i++) {
for (int j=0; j < mCumulative[i].length; j++) {
if (mMcount < mCumulative[i][j]) mMcount=mCumulative[i][j];
}
}
if (mMaxCards == 0) mMaxCards=10;
if (mMaxElements == 0) {
mMaxElements=10;
}
if (mMcount == 0) {
mMcount=10;
}
if (mFirstElement == mLastElement) {
mFirstElement=-10;
mLastElement=0;
}
return list.size() > 0;
}
