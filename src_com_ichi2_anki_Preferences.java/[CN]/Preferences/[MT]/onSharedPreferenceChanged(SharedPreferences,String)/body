{
  try {
    if (key.equals("swipe")) {
      zoomCheckboxPreference.setChecked(false);
      zoomCheckboxPreference.setEnabled(!swipeCheckboxPreference.isChecked());
    }
 else     if (key.equals("timeoutAnswer")) {
      keepScreenOnCheckBoxPreference.setChecked(showAnswerCheckBoxPreference.isChecked());
    }
 else     if (key.equals("language")) {
      Intent intent=this.getIntent();
      setResult(StudyOptions.RESULT_RESTART,intent);
      finish();
    }
 else     if (key.equals("startup_mode")) {
      Intent intent=this.getIntent();
      setResult(StudyOptions.RESULT_RESTART,intent);
      finish();
    }
 else     if (key.equals("theme")) {
      if (!sharedPreferences.getString("theme","2").equals("2")) {
        animationsCheckboxPreference.setChecked(false);
        animationsCheckboxPreference.setEnabled(false);
      }
 else {
        animationsCheckboxPreference.setEnabled(true);
      }
      Themes.loadTheme();
switch (Integer.parseInt(sharedPreferences.getString("theme","2"))) {
case Themes.THEME_ANDROID_DARK:
case Themes.THEME_ANDROID_LIGHT:
case Themes.THEME_BLUE:
        sharedPreferences.edit().putString("defaultFont","").commit();
      break;
case Themes.THEME_FLAT:
    sharedPreferences.edit().putString("defaultFont","OpenSans-Regular").commit();
  break;
case Themes.THEME_WHITE:
sharedPreferences.edit().putString("defaultFont","OpenSans-Regular").commit();
break;
}
Intent intent=this.getIntent();
setResult(StudyOptions.RESULT_RESTART,intent);
finish();
}
 else if (Arrays.asList(mShowValueInSummList).contains(key)) {
updateListPreference(key);
}
 else if (Arrays.asList(mShowValueInSummSeek).contains(key)) {
updateSeekBarPreference(key);
}
 else if (key.equals("writeAnswers") && sharedPreferences.getBoolean("writeAnswers",false)) {
showDialog(DIALOG_WRITE_ANSWERS);
}
 else if (key.equals("walMode") && !lockCheckAction) {
lockCheckAction=true;
if (sharedPreferences.getBoolean("walMode",false)) {
showDialog(DIALOG_WAL);
}
 else if (walModeInitiallySet) {
walModeInitiallySet=false;
dialogMessage=getResources().getString(R.string.wal_mode_set_message);
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_SET_ALL_DECKS_JOURNAL_MODE,mDeckOperationHandler,new DeckTask.TaskData(DeckManager.getMainDeck(),PrefSettings.getSharedPrefs(getBaseContext()).getString("deckPath",AnkiDroidApp.getStorageDirectory())));
}
 else {
lockCheckAction=false;
}
}
 else if (key.equals("useBackup")) {
if (lockCheckAction) {
lockCheckAction=false;
}
 else if (!useBackupPreference.isChecked()) {
lockCheckAction=true;
useBackupPreference.setChecked(true);
showDialog(DIALOG_BACKUP);
}
 else {
setReloadDeck();
}
}
 else if (key.equals("asyncMode")) {
if (lockCheckAction) {
lockCheckAction=false;
}
 else if (asyncModePreference.isChecked()) {
lockCheckAction=true;
asyncModePreference.setChecked(false);
showDialog(DIALOG_ASYNC);
}
 else {
setReloadDeck();
}
}
 else if (key.equals("deckPath")) {
File decksDirectory=new File(sharedPreferences.getString("deckPath",AnkiDroidApp.getStorageDirectory()));
if (decksDirectory.exists()) {
AnkiDroidApp.createNoMediaFileIfMissing(decksDirectory);
}
}
 else if (key.equals("eInkDisplay")) {
boolean enableAnimation=!eInkDisplayPreference.isChecked();
}
}
 catch (BadTokenException e) {
Log.e(AnkiDroidApp.TAG,"Preferences: BadTokenException on showDialog: " + e);
}
}
