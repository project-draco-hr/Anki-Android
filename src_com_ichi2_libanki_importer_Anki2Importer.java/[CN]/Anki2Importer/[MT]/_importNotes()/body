{
  mNotes=new HashMap<String,Object[]>();
  HashMap<Long,Boolean> existing=new HashMap<Long,Boolean>();
  Cursor cursor=null;
  try {
    cursor=mDst.getDb().getDatabase().rawQuery("SELECT id, guid, mod, mid FROM notes",null);
    while (cursor.moveToNext()) {
      long id=cursor.getLong(0);
      mNotes.put(cursor.getString(1),new Object[]{id,cursor.getLong(2),cursor.getLong(3)});
      existing.put(id,true);
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  mChangedGuids=new HashMap<String,String>();
  ArrayList<Object[]> add=new ArrayList<Object[]>();
  ArrayList<Long> dirty=new ArrayList<Long>();
  int usn=mDst.usn();
  int dupes=0;
  try {
    cursor=mSrc.getDb().getDatabase().rawQuery("SELECT * FROM notes",null);
    while (cursor.moveToNext()) {
      Object[] note=new Object[]{cursor.getLong(0),cursor.getString(1),cursor.getLong(2),cursor.getLong(3),cursor.getInt(4),cursor.getString(5),cursor.getString(6),cursor.getString(7),cursor.getLong(8),cursor.getInt(9),cursor.getString(10)};
      String guid=(String)note[1];
      long mid=(Long)note[3];
      boolean canUseExisting=false;
      boolean alreadyHaveGuid=false;
      if (!mNotes.containsKey(guid)) {
        alreadyHaveGuid=true;
        if ((Long)mNotes.get(guid)[2] == mid) {
          JSONObject srcM=mSrc.getModels().get(mid);
          JSONObject dstM=mDst.getModels().get((Long)mNotes.get(guid)[2]);
          if (mSrc.getModels().scmhash(srcM) == mSrc.getModels().scmhash(dstM)) {
            canUseExisting=true;
          }
        }
      }
      if (!canUseExisting) {
        long lmid=_mid((Long)note[2]);
        while (existing.containsKey(note[0])) {
          note[0]=((Long)note[0]) + 999;
        }
        existing.put((Long)note[0],true);
        note[2]=lmid;
        note[4]=usn;
        add.add(note);
        dirty.add((Long)note[0]);
        if (alreadyHaveGuid) {
          guid=Utils.guid64();
          mChangedGuids.put((String)note[1],guid);
          note[1]=guid;
        }
        mNotes.put((String)note[1],new Object[]{note[0],note[3],note[2]});
      }
 else {
        dupes+=1;
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (dupes != 0) {
  }
  mDst.getDb().executeMany("INSERT OR REPLACE INTO NOTES VALUES (?,?,?,?,?,?,?,?,?,?,?)",add);
  long[] dis=Utils.arrayList2array(dirty);
  mDst.updateFieldCache(dis);
  mDst.getTags().registerNotes(dis);
}
