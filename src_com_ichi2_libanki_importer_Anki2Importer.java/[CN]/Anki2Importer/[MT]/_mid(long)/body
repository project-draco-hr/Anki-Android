{
  try {
    if (mModelMap.containsKey(mid)) {
      return mModelMap.get(mid);
    }
    JSONObject src=new JSONObject(mSrc.getModels().get(mid).toString());
    if (!mNeedCards) {
      src.put("needWizard",1);
    }
    if (!mDst.getModels().have(mid)) {
      mDst.getModels().update(src);
      if (mDeckPrefix != null) {
        src.put("did",mDst.getDecks().current().getLong("id"));
        if (!mDeckPrefix.equals("shared")) {
          src.put("name",src.getString("name") + " (" + mDeckPrefix+ ")");
        }
      }
      mDst.getModels().save(src);
      mModelMap.put(mid,mid);
      return mid;
    }
    JSONObject dst=mDst.getModels().get(mid);
    long shash=mSrc.getModels().scmhash(src);
    long dhash=mSrc.getModels().scmhash(dst);
    if (shash == dhash) {
      mModelMap.put(mid,mid);
      return mid;
    }
    JSONArray vers=dst.getJSONArray("vers");
    for (int i=0; i < vers.length(); i++) {
      JSONObject m=mDst.getModels().get(vers.getLong(i));
      if (mDst.getModels().scmhash(m) == shash) {
        mModelMap.put(mid,m.getLong("id"));
        return m.getLong("id");
      }
    }
    mDst.getModels().add(src);
    vers.put(src.getLong("id"));
    dst.put("vers",vers);
    mDst.getModels().save(dst);
    return src.getLong("id");
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
