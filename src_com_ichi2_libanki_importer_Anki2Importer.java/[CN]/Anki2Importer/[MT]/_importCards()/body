{
  if (!mNeedCards) {
    return 0;
  }
  mCards=new HashMap<String,HashMap<Integer,Long>>();
  HashMap<Long,Boolean> existing=new HashMap<Long,Boolean>();
  Cursor cursor=null;
  try {
    cursor=mDst.getDb().getDatabase().rawQuery("SELECT f.guid, c.ord, c.id FROM cards c, notes f WHERE c.nid = f.id",null);
    while (cursor.moveToNext()) {
      long cid=cursor.getLong(2);
      existing.put(cid,true);
      String guid=cursor.getString(0);
      int ord=cursor.getInt(1);
      if (mCards.containsKey(guid)) {
        mCards.get(guid).put(ord,cid);
      }
 else {
        HashMap<Integer,Long> map=new HashMap<Integer,Long>();
        map.put(ord,cid);
        mCards.put(guid,map);
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  ArrayList<Object[]> cards=new ArrayList<Object[]>();
  ArrayList<Object[]> revlog=new ArrayList<Object[]>();
  int cnt=0;
  int usn=mDst.usn();
  long aheadBy=mSrc.getSched().getToday() - mDst.getSched().getToday();
  try {
    cursor=mSrc.getDb().getDatabase().rawQuery("SELECT f.guid, f.mid, c.* FROM cards c, notes f WHERE c.nid = f.id",null);
    while (cursor.moveToNext()) {
      Object[] card=new Object[]{cursor.getString(0),cursor.getLong(1),cursor.getLong(2),cursor.getLong(3),cursor.getLong(4),cursor.getInt(5),cursor.getLong(6),cursor.getInt(7),cursor.getInt(8),cursor.getInt(9),cursor.getLong(10),cursor.getLong(11),cursor.getLong(12),cursor.getInt(13),cursor.getInt(14),cursor.getInt(15),cursor.getLong(16),cursor.getLong(17),cursor.getInt(18),cursor.getString(19)};
      String guid=(String)card[0];
      if (!mNotes.containsKey(guid)) {
        continue;
      }
      Object[] dnid=mNotes.get(guid);
      int ord=(Integer)card[5];
      if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {
        continue;
      }
      Object[] oc=card;
      card=new Object[oc.length - 2];
      for (int i=0; i < card.length; i++) {
        card[i]=oc[i + 2];
      }
      long scid=(Long)card[0];
      while (existing.containsKey(card[0])) {
        card[0]=(Long)card[0] + 999;
      }
      existing.put((Long)card[0],true);
      card[1]=mNotes.get(guid)[0];
      card[2]=_did((Long)card[2]);
      card[4]=Utils.intNow();
      card[5]=usn;
      if ((Integer)card[7] == 2 || (Integer)card[7] == 3) {
        card[8]=(Long)card[8] - aheadBy;
      }
      cards.add(card);
      Cursor cur2=null;
      try {
        cur2=mDst.getDb().getDatabase().rawQuery("SELECT * FROM revlog WHERE cid = " + scid,null);
        while (cur2.moveToNext()) {
          Object[] rev=new Object[]{cur2.getLong(0),cur2.getLong(1),cur2.getInt(2),cur2.getInt(3),cur2.getLong(4),cur2.getLong(5),cur2.getLong(6),cur2.getLong(7),cur2.getInt(8)};
          rev[1]=card[0];
          rev[2]=mDst.usn();
          revlog.add(rev);
        }
      }
  finally {
        if (cur2 != null) {
          cur2.close();
        }
      }
      cnt+=1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  mDst.getDb().executeMany("INSERT OR IGNORE INTO cards VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",cards);
  mDst.getDb().executeMany("INSERT OR IGNORE INTO revlog VALUES (?,?,?,?,?,?,?,?,?)",revlog);
  return cnt;
}
