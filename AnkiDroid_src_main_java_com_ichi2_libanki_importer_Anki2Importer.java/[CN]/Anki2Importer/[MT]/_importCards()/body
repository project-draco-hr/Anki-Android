{
  mCards=new HashMap<>();
  Map<Long,Boolean> existing=new HashMap<>();
  Cursor cur=null;
  try {
    cur=mDst.getDb().getDatabase().rawQuery("select f.guid, c.ord, c.id from cards c, notes f " + "where c.nid = f.id",null);
    while (cur.moveToNext()) {
      String guid=cur.getString(0);
      int ord=cur.getInt(1);
      long cid=cur.getLong(2);
      existing.put(cid,true);
      if (mCards.containsKey(guid)) {
        mCards.get(guid).put(ord,cid);
      }
 else {
        Map<Integer,Long> map=new HashMap<>();
        map.put(ord,cid);
        mCards.put(guid,map);
      }
    }
  }
  finally {
    if (cur != null) {
      cur.close();
    }
  }
  List<Object[]> cards=new ArrayList<>();
  List<Object[]> revlog=new ArrayList<>();
  int cnt=0;
  int usn=mDst.usn();
  long aheadBy=mSrc.getSched().getToday() - mDst.getSched().getToday();
  try {
    cur=mSrc.getDb().getDatabase().rawQuery("select f.guid, f.mid, c.* from cards c, notes f " + "where c.nid = f.id",null);
    int total=cur.getCount();
    boolean largeCollection=total > 200;
    int onePercent=total / 100;
    int i=0;
    while (cur.moveToNext()) {
      Object[] card=new Object[]{cur.getString(0),cur.getLong(1),cur.getLong(2),cur.getLong(3),cur.getLong(4),cur.getInt(5),cur.getLong(6),cur.getInt(7),cur.getInt(8),cur.getInt(9),cur.getLong(10),cur.getLong(11),cur.getLong(12),cur.getInt(13),cur.getInt(14),cur.getInt(15),cur.getLong(16),cur.getLong(17),cur.getInt(18),cur.getString(19)};
      String guid=(String)card[0];
      if (mChangedGuids.containsKey(guid)) {
        guid=mChangedGuids.get(guid);
      }
      if (mIgnoredGuids.containsKey(guid)) {
        continue;
      }
      if (!mNotes.containsKey(guid)) {
        continue;
      }
      Object[] dnid=mNotes.get(guid);
      int ord=(Integer)card[5];
      if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {
        continue;
      }
      Object[] oc=card;
      card=new Object[oc.length - 2];
      System.arraycopy(oc,2,card,0,card.length);
      long scid=(Long)card[0];
      while (existing.containsKey(card[0])) {
        card[0]=(Long)card[0] + 999;
      }
      existing.put((Long)card[0],true);
      card[1]=mNotes.get(guid)[0];
      card[2]=_did((Long)card[2]);
      card[4]=Utils.intNow();
      card[5]=usn;
      if ((Integer)card[7] == 2 || (Integer)card[7] == 3 || (Integer)card[6] == 2) {
        card[8]=(Long)card[8] - aheadBy;
      }
      if ((Long)card[15] != 0) {
        card[15]=0;
        card[8]=card[14];
        card[14]=0;
        if ((Integer)card[6] == 1) {
          card[7]=0;
        }
 else {
          card[7]=card[6];
        }
        if ((Integer)card[6] == 1) {
          card[6]=0;
        }
      }
      cards.add(card);
      Cursor cur2=null;
      try {
        cur2=mSrc.getDb().getDatabase().rawQuery("select * from revlog where cid = " + scid,null);
        while (cur2.moveToNext()) {
          Object[] rev=new Object[]{cur2.getLong(0),cur2.getLong(1),cur2.getInt(2),cur2.getInt(3),cur2.getLong(4),cur2.getLong(5),cur2.getLong(6),cur2.getLong(7),cur2.getInt(8)};
          rev[1]=card[0];
          rev[2]=mDst.usn();
          revlog.add(rev);
        }
      }
  finally {
        if (cur2 != null) {
          cur2.close();
        }
      }
      cnt+=1;
      i++;
      if (total != 0 && (!largeCollection || i % onePercent == 0)) {
        publishProgress(100,i * 100 / total,0);
      }
    }
    publishProgress(100,100,0);
  }
  finally {
    if (cur != null) {
      cur.close();
    }
  }
  mDst.getDb().executeMany("insert or ignore into cards values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",cards);
  mDst.getDb().executeMany("insert or ignore into revlog values (?,?,?,?,?,?,?,?,?)",revlog);
  mLog.add(getRes().getString(R.string.import_complete_count,cnt));
}
