{
  mNotes=new HashMap<>();
  Map<Long,Boolean> existing=new HashMap<>();
  Cursor cur=null;
  try {
    cur=mDst.getDb().getDatabase().rawQuery("select id, guid, mod, mid from notes",null);
    while (cur.moveToNext()) {
      long id=cur.getLong(0);
      String guid=cur.getString(1);
      long mod=cur.getLong(2);
      long mid=cur.getLong(3);
      mNotes.put(guid,new Object[]{id,mod,mid});
      existing.put(id,true);
    }
  }
  finally {
    if (cur != null) {
      cur.close();
    }
  }
  mChangedGuids=new HashMap<>();
  mIgnoredGuids=new HashMap<>();
  ArrayList<Object[]> add=new ArrayList<>();
  ArrayList<Object[]> update=new ArrayList<>();
  ArrayList<Long> dirty=new ArrayList<>();
  int usn=mDst.usn();
  int dupes=0;
  ArrayList<String> dupesIgnored=new ArrayList<>();
  try {
    cur=mSrc.getDb().getDatabase().rawQuery("select * from notes",null);
    int total=cur.getCount();
    boolean largeCollection=total > 200;
    int onePercent=total / 100;
    int i=0;
    while (cur.moveToNext()) {
      Object[] note=new Object[]{cur.getLong(0),cur.getString(1),cur.getLong(2),cur.getLong(3),cur.getInt(4),cur.getString(5),cur.getString(6),cur.getString(7),cur.getLong(8),cur.getInt(9),cur.getString(10)};
      boolean shouldAdd=_uniquifyNote(note);
      if (shouldAdd) {
        while (existing.containsKey(note[0])) {
          note[0]=((Long)note[0]) + 999;
        }
        existing.put((Long)note[0],true);
        note[4]=usn;
        note[6]=_mungeMedia((Long)note[MID],(String)note[6]);
        add.add(note);
        dirty.add((Long)note[0]);
        mNotes.put((String)note[GUID],new Object[]{note[0],note[3],note[MID]});
      }
 else {
        dupes+=1;
        if (mAllowUpdate) {
          Object[] n=mNotes.get(note[GUID]);
          long oldNid=(Long)n[0];
          long oldMod=(Long)n[1];
          long oldMid=(Long)n[2];
          if (oldMod < (Long)note[MOD]) {
            if (oldMid == (Long)note[MID]) {
              note[0]=oldNid;
              note[4]=usn;
              note[6]=_mungeMedia((Long)note[MID],(String)note[6]);
              update.add(note);
              dirty.add((Long)note[0]);
            }
 else {
              dupesIgnored.add(String.format("%s: %s",mCol.getModels().get(oldMid).getString("name"),((String)note[6]).replace("\u001f",",")));
              mIgnoredGuids.put((String)note[GUID],true);
            }
          }
        }
      }
      i++;
      if (total != 0 && (!largeCollection || i % onePercent == 0)) {
        publishProgress(i * 100 / total,0,0);
      }
    }
    publishProgress(100,0,0);
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (cur != null) {
      cur.close();
    }
  }
  if (dupes > 0) {
    int up=update.size();
    mLog.add(getRes().getString(R.string.import_update_details,update.size(),dupes));
    if (dupesIgnored.size() > 0) {
      mLog.add(getRes().getString(R.string.import_update_ignored));
    }
  }
  mDupes=dupes;
  mAdded=add.size();
  mUpdated=update.size();
  mDst.getDb().executeMany("insert or replace into notes values (?,?,?,?,?,?,?,?,?,?,?)",add);
  mDst.getDb().executeMany("insert or replace into notes values (?,?,?,?,?,?,?,?,?,?,?)",update);
  long[] das=Utils.arrayList2array(dirty);
  mDst.updateFieldCache(das);
  mDst.getTags().registerNotes(das);
}
