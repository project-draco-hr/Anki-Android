{
  try {
    if (mDecks.containsKey(did)) {
      return mDecks.get(did);
    }
    JSONObject g=mSrc.getDecks().get(did);
    String name=g.getString("name");
    if (!TextUtils.isEmpty(mDeckPrefix)) {
      List<String> parts=Arrays.asList(name.split("::",-1));
      String tmpname=TextUtils.join("::",parts.subList(1,parts.size()));
      name=mDeckPrefix;
      if (!TextUtils.isEmpty(tmpname)) {
        name+="::" + tmpname;
      }
    }
    String head="";
    List<String> parents=Arrays.asList(name.split("::",-1));
    for (    String parent : parents.subList(0,parents.size() - 1)) {
      if (!TextUtils.isEmpty(head)) {
        head+="::";
      }
      head+=parent;
      long idInSrc=mSrc.getDecks().id(head);
      _did(idInSrc);
    }
    long newid=mDst.getDecks().id(name);
    if (g.has("conf") && g.getLong("conf") != 1) {
      JSONObject conf=mSrc.getDecks().getConf(g.getLong("conf"));
      mDst.getDecks().save(conf);
      mDst.getDecks().updateConf(conf);
      JSONObject g2=mDst.getDecks().get(newid);
      g2.put("conf",g.getLong("conf"));
      mDst.getDecks().save(g2);
    }
    JSONObject deck=mDst.getDecks().get(newid);
    deck.put("desc",g.getString("desc"));
    mDst.getDecks().save(deck);
    mDecks.put(did,newid);
    return newid;
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
