{
  super.onCollectionLoaded(col);
  this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  Intent intent=getIntent();
  Timber.d("onCollectionLoaded: caller: %d",mCaller);
  SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
  registerExternalStorageListener();
  View mainView=findViewById(android.R.id.content);
  Toolbar toolbar=(Toolbar)mainView.findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
  }
  mFieldsLayoutContainer=(LinearLayout)findViewById(R.id.CardEditorEditFieldsLayout);
  mTagsButton=(TextView)findViewById(R.id.CardEditorTagText);
  mCardsButton=(TextView)findViewById(R.id.CardEditorCardsText);
  mCardsButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Timber.i("NoteEditor:: Cards button pressed. Opening template editor");
      showCardTemplateEditor();
    }
  }
);
  Preferences.COMING_FROM_ADD=false;
  mAedictIntent=false;
switch (mCaller) {
case CALLER_NOCALLER:
    Timber.e("no caller could be identified, closing");
  finishWithoutAnimation();
return;
case CALLER_REVIEWER:
mCurrentEditedCard=AbstractFlashcardViewer.getEditorCard();
if (mCurrentEditedCard == null) {
finishWithoutAnimation();
return;
}
mEditorNote=mCurrentEditedCard.note();
mAddNote=false;
break;
case CALLER_STUDYOPTIONS:
case CALLER_DECKPICKER:
mAddNote=true;
break;
case CALLER_BIGWIDGET_EDIT:
break;
case CALLER_BIGWIDGET_ADD:
mAddNote=true;
break;
case CALLER_CARDBROWSER_EDIT:
mCurrentEditedCard=CardBrowser.sCardBrowserCard;
if (mCurrentEditedCard == null) {
finishWithoutAnimation();
return;
}
mEditorNote=mCurrentEditedCard.note();
mAddNote=false;
break;
case CALLER_CARDBROWSER_ADD:
mAddNote=true;
break;
case CALLER_CARDEDITOR:
mAddNote=true;
break;
case CALLER_CARDEDITOR_INTENT_ADD:
mAddNote=true;
break;
case CALLER_INDICLASH:
fetchIntentInformation(intent);
if (mSourceText == null) {
finishWithoutAnimation();
return;
}
if (mSourceText[0].equals("Aedict Notepad") && addFromAedict(mSourceText[1])) {
finishWithoutAnimation();
return;
}
mAddNote=true;
break;
}
mNoteTypeSpinner=(Spinner)findViewById(R.id.note_type_spinner);
mAllModelIds=new ArrayList<Long>();
final ArrayList<String> modelNames=new ArrayList<String>();
ArrayList<JSONObject> models=getCol().getModels().all();
Collections.sort(models,new JSONNameComparator());
for (JSONObject m : models) {
try {
modelNames.add(m.getString("name"));
mAllModelIds.add(m.getLong("id"));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
ArrayAdapter<String> noteTypeAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,modelNames);
mNoteTypeSpinner.setAdapter(noteTypeAdapter);
noteTypeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
TextView deckTextView=(TextView)findViewById(R.id.CardEditorDeckText);
try {
if (!mAddNote && mEditorNote.model().getJSONArray("tmpls").length() > 1) {
deckTextView.setText(R.string.CardEditorCardDeck);
}
}
 catch (JSONException e1) {
throw new RuntimeException();
}
mNoteDeckSpinner=(Spinner)findViewById(R.id.note_deck_spinner);
mAllDeckIds=new ArrayList<Long>();
final ArrayList<String> deckNames=new ArrayList<String>();
ArrayList<JSONObject> decks=getCol().getDecks().all();
Collections.sort(decks,new JSONNameComparator());
for (JSONObject d : decks) {
try {
long thisDid=d.getLong("id");
long currentDid=getCol().getDecks().current().getLong("id");
if (d.getInt("dyn") == 0 || (!mAddNote && thisDid == currentDid)) {
deckNames.add(d.getString("name"));
mAllDeckIds.add(thisDid);
}
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
}
ArrayAdapter<String> noteDeckAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,deckNames);
mNoteDeckSpinner.setAdapter(noteDeckAdapter);
noteDeckAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
mNoteDeckSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
mCurrentDid=mAllDeckIds.get(pos);
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
setDid(mEditorNote);
setNote(mEditorNote);
int position;
try {
position=mAllModelIds.indexOf(mEditorNote.model().getLong("id"));
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
mNoteTypeSpinner.setSelection(position,false);
if (mAddNote) {
mNoteTypeSpinner.setOnItemSelectedListener(new SetNoteTypeListener());
setTitle(R.string.cardeditor_title_add_note);
String contents=null;
if (mSourceText != null) {
if (mAedictIntent && (mEditFields.size() == 3) && mSourceText[1].contains("[")) {
contents=mSourceText[1].replaceFirst("\\[","\u001f" + mSourceText[0] + "\u001f");
contents=contents.substring(0,contents.length() - 1);
}
 else {
mEditFields.get(0).setText(mSourceText[0]);
mEditFields.get(1).setText(mSourceText[1]);
}
}
 else {
contents=intent.getStringExtra(EXTRA_CONTENTS);
}
if (contents != null) {
setEditFieldTexts(contents);
}
}
 else {
mNoteTypeSpinner.setOnItemSelectedListener(new EditNoteTypeListener());
setTitle(R.string.cardeditor_title_edit_card);
}
((LinearLayout)findViewById(R.id.CardEditorTagButton)).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
Timber.i("NoteEditor:: Tags button pressed... opening tags editor");
showTagsDialog();
}
}
);
if (!mAddNote && mCurrentEditedCard != null) {
Timber.i("NoteEditor:: Edit note activity successfully started with card id %d",mCurrentEditedCard.getId());
}
}
