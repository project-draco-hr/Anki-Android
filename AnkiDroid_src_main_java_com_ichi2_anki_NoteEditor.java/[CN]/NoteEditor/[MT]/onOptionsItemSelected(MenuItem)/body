{
switch (item.getItemId()) {
case android.R.id.home:
    Timber.i("NoteEditor:: Home button pressed");
  closeCardEditorWithCheck();
return true;
case R.id.action_save:
Timber.i("NoteEditor:: Save note button pressed");
saveNote();
return true;
case R.id.action_later:
Timber.i("NoteEditor:: Later button pressed");
String content=getFieldsText();
if (content.length() > mEditFields.size() - 1) {
MetaDB.saveIntentInformation(NoteEditor.this,content);
populateEditFields();
mSourceText=null;
Themes.showThemedToast(NoteEditor.this,getResources().getString(R.string.CardEditorLaterMessage),false);
}
if (mCaller == CALLER_INDICLASH || mCaller == CALLER_CARDEDITOR_INTENT_ADD) {
closeNoteEditor();
}
return true;
case R.id.action_add_card_from_card_editor:
case R.id.action_copy_card:
Timber.i("NoteEditor:: Copy or add card button pressed");
Intent intent=new Intent(NoteEditor.this,NoteEditor.class);
intent.putExtra(EXTRA_CALLER,CALLER_CARDEDITOR);
if (item.getItemId() == R.id.action_copy_card) {
intent.putExtra(EXTRA_CONTENTS,getFieldsText());
}
startActivityForResultWithAnimation(intent,REQUEST_ADD,ActivityTransitionAnimation.LEFT);
return true;
case R.id.action_reset_card_progress:
Timber.i("NoteEditor:: Reset progress button pressed");
showDialog(DIALOG_RESET_CARD);
return true;
case R.id.action_saved_notes:
Timber.i("NoteEditor:: Saved data button pressed");
showDialog(DIALOG_INTENT_INFORMATION);
return true;
case R.id.action_reschedule_card:
Timber.i("NoteEditor:: Reschedule button pressed");
showDialog(DIALOG_RESCHEDULE_CARD);
return true;
default :
return super.onOptionsItemSelected(item);
}
}
