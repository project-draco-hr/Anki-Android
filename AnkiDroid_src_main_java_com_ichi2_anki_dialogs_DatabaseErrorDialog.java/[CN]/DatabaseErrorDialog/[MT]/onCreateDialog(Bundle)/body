{
  super.onCreate(savedInstanceState);
  mType=getArguments().getInt("dialogType");
  Resources res=getResources();
  MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity());
  builder.cancelable(true).title(getTitle());
  boolean sqliteInstalled=false;
  try {
    sqliteInstalled=Runtime.getRuntime().exec("sqlite3 --version").waitFor() == 0;
  }
 catch (  IOException|InterruptedException e) {
    e.printStackTrace();
  }
switch (mType) {
case DIALOG_CURSOR_SIZE_LIMIT_EXCEEDED:
case DIALOG_LOAD_FAILED:
    return builder.cancelable(false).content(getMessage()).iconAttr(R.attr.dialogErrorIcon).positiveText(res.getString(R.string.error_handling_options)).negativeText(res.getString(R.string.close)).callback(new MaterialDialog.ButtonCallback(){
      @Override public void onPositive(      MaterialDialog dialog){
        ((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_ERROR_HANDLING);
      }
      @Override public void onNegative(      MaterialDialog dialog){
        ((DeckPicker)getActivity()).exit();
      }
    }
).show();
case DIALOG_DB_ERROR:
  MaterialDialog dialog=builder.cancelable(false).content(getMessage()).iconAttr(R.attr.dialogErrorIcon).positiveText(res.getString(R.string.error_handling_options)).negativeText(res.getString(R.string.answering_error_report)).neutralText(res.getString(R.string.close)).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      ((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_ERROR_HANDLING);
    }
    @Override public void onNegative(    MaterialDialog dialog){
      ((DeckPicker)getActivity()).sendErrorReport();
      dismissAllDialogFragments();
    }
    @Override public void onNeutral(    MaterialDialog dialog){
      ((DeckPicker)getActivity()).exit();
    }
  }
).show();
dialog.getCustomView().findViewById(R.id.buttonDefaultNegative).setEnabled(((DeckPicker)getActivity()).hasErrorFiles());
return dialog;
case DIALOG_ERROR_HANDLING:
ArrayList<String> options=new ArrayList<>();
ArrayList<Integer> values=new ArrayList<>();
if (!((AnkiActivity)getActivity()).colIsOpen()) {
options.add(res.getString(R.string.backup_retry_opening));
values.add(0);
}
 else {
options.add(res.getString(R.string.check_db));
values.add(1);
}
if (sqliteInstalled) {
options.add(res.getString(R.string.backup_error_menu_repair));
values.add(2);
}
options.add(res.getString(R.string.backup_restore));
values.add(3);
options.add(res.getString(R.string.backup_full_sync_from_server));
values.add(4);
options.add(res.getString(R.string.backup_del_collection));
values.add(5);
String[] titles=new String[options.size()];
mRepairValues=new int[options.size()];
for (int i=0; i < options.size(); i++) {
titles[i]=options.get(i);
mRepairValues[i]=values.get(i);
}
dialog=builder.iconAttr(R.attr.dialogErrorIcon).negativeText(res.getString(R.string.dialog_cancel)).items(titles).itemsCallback(new MaterialDialog.ListCallback(){
@Override public void onSelection(MaterialDialog materialDialog,View view,int which,CharSequence charSequence){
switch (mRepairValues[which]) {
case 0:
((DeckPicker)getActivity()).restartActivity();
return;
case 1:
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_CONFIRM_DATABASE_CHECK);
return;
case 2:
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_REPAIR_COLLECTION);
return;
case 3:
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_RESTORE_BACKUP);
return;
case 4:
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_FULL_SYNC_FROM_SERVER);
return;
case 5:
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_NEW_COLLECTION);
}
}
}
).show();
return dialog;
case DIALOG_REPAIR_COLLECTION:
return builder.content(getMessage()).iconAttr(R.attr.dialogErrorIcon).positiveText(res.getString(R.string.dialog_positive_repair)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
((DeckPicker)getActivity()).repairDeck();
dismissAllDialogFragments();
}
}
).show();
case DIALOG_RESTORE_BACKUP:
String path=CollectionHelper.getInstance().getCollectionPath(getActivity());
File[] files=BackupManager.getBackups(new File(path));
mBackups=new File[files.length];
for (int i=0; i < files.length; i++) {
mBackups[i]=files[files.length - 1 - i];
}
if (mBackups.length == 0) {
builder.title(res.getString(R.string.backup_restore)).content(getMessage()).positiveText(res.getString(R.string.dialog_ok)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_ERROR_HANDLING);
}
}
);
}
 else {
String[] dates=new String[mBackups.length];
for (int i=0; i < mBackups.length; i++) {
dates[i]=mBackups[i].getName().replaceAll(".*-(\\d{4}-\\d{2}-\\d{2})-(\\d{2})-(\\d{2}).apkg","$1 ($2:$3 h)");
}
builder.title(res.getString(R.string.backup_restore_select_title)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog dialog){
dismissAllDialogFragments();
}
}
).items(dates).itemsCallbackSingleChoice(dates.length,new MaterialDialog.ListCallbackSingleChoice(){
@Override public boolean onSelection(MaterialDialog materialDialog,View view,int which,CharSequence charSequence){
if (mBackups[which].length() > 0) {
((DeckPicker)getActivity()).restoreFromBackup(mBackups[which].getPath());
dismissAllDialogFragments();
}
 else {
new MaterialDialog.Builder(getActivity()).title(R.string.backup_error).content(R.string.backup_invalid_file_error).positiveText(R.string.dialog_ok).build().show();
}
return true;
}
}
);
}
return builder.show();
case DIALOG_NEW_COLLECTION:
return builder.content(getMessage()).positiveText(res.getString(R.string.dialog_positive_create)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
CollectionHelper.getInstance().closeCollection(false);
String path=CollectionHelper.getCollectionPath(getActivity());
if (BackupManager.moveDatabaseToBrokenFolder(path,false)) {
((DeckPicker)getActivity()).restartActivity();
}
 else {
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_LOAD_FAILED);
}
}
}
).show();
case DIALOG_CONFIRM_DATABASE_CHECK:
return builder.content(getMessage()).positiveText(res.getString(R.string.dialog_ok)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
((DeckPicker)getActivity()).integrityCheck();
dismissAllDialogFragments();
}
}
).show();
case DIALOG_CONFIRM_RESTORE_BACKUP:
return builder.content(getMessage()).positiveText(res.getString(R.string.dialog_continue)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
((DeckPicker)getActivity()).showDatabaseErrorDialog(DIALOG_RESTORE_BACKUP);
}
}
).show();
case DIALOG_FULL_SYNC_FROM_SERVER:
return builder.content(getMessage()).positiveText(res.getString(R.string.dialog_positive_overwrite)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
((DeckPicker)getActivity()).sync("download");
dismissAllDialogFragments();
}
}
).show();
default :
return null;
}
}
