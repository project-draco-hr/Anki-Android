{
  Sched.DeckDueTreeNode node=mDeckList.get(position);
  RelativeLayout deckLayout=holder.deckLayout;
  int rightPadding=(int)deckLayout.getResources().getDimension(R.dimen.deck_picker_right_padding);
  if (mHasSubdecks) {
    int smallPadding=(int)deckLayout.getResources().getDimension(R.dimen.deck_picker_left_padding_small);
    deckLayout.setPadding(smallPadding,0,rightPadding,0);
    holder.deckExpander.setVisibility(View.VISIBLE);
    setDeckExpander(holder.deckExpander,holder.indentView,node);
  }
 else {
    holder.deckExpander.setVisibility(View.GONE);
    int normalPadding=(int)deckLayout.getResources().getDimension(R.dimen.deck_picker_left_padding);
    deckLayout.setPadding(normalPadding,0,rightPadding,0);
  }
  if (node.children.size() > 0) {
    holder.deckExpander.setTag(node.did);
    holder.deckExpander.setOnClickListener(mDeckExpanderClickListener);
  }
  if (node.did == mCol.getDecks().current().optLong("id")) {
    holder.deckLayout.setBackgroundResource(mRowCurrentDrawable);
  }
 else {
    holder.deckLayout.setBackgroundResource(mRowDefaultDrawable);
  }
  holder.deckName.setText(node.names[0]);
  if (mCol.getDecks().isDyn(node.did)) {
    holder.deckName.setTextColor(mDeckNameDynColor);
  }
 else {
    holder.deckName.setTextColor(mDeckNameDefaultColor);
  }
  holder.deckNew.setText(String.valueOf(node.newCount));
  holder.deckNew.setTextColor((node.newCount == 0) ? mZeroCountColor : mNewCountColor);
  holder.deckLearn.setText(String.valueOf(node.lrnCount));
  holder.deckLearn.setTextColor((node.lrnCount == 0) ? mZeroCountColor : mLearnCountColor);
  holder.deckRev.setText(String.valueOf(node.revCount));
  holder.deckRev.setTextColor((node.revCount == 0) ? mZeroCountColor : mReviewCountColor);
  holder.deckLayout.setTag(node.did);
  holder.deckLayout.setOnClickListener(mDeckClickListener);
  holder.deckLayout.setOnLongClickListener(mDeckLongClickListener);
}
