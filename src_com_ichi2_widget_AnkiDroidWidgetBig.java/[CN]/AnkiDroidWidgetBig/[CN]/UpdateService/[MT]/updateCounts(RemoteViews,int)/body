{
  DeckStatus[] decks=WidgetStatus.fetch(this);
  int eta=0;
  int reps=0;
  int due=0;
  for (  DeckStatus d : decks) {
  }
  int totalreps=reps + due;
  int progressTotal=0;
  if (totalreps != 0) {
    progressTotal=(int)Math.round((100.0d * reps) / totalreps);
  }
  updateViews.setProgressBar(R.id.widget_big_progress_total,100,progressTotal,false);
  if (eta == 0) {
    updateViews.setViewVisibility(R.id.widget_big_eta,View.INVISIBLE);
  }
 else {
    updateViews.setViewVisibility(R.id.widget_big_eta,View.VISIBLE);
    updateViews.setTextViewText(R.id.widget_big_eta,eta > 99 ? "\u2027\u2027\u2027" : Integer.toString(eta));
  }
switch (view) {
case VIEW_SHOW_QUESTION:
case VIEW_NOTHING_DUE:
    double sessionProgress=contentService.mCol.getSched().todaysProgress(null,false,false);
  if (sessionProgress == -1) {
    updateViews.setViewVisibility(R.id.widget_big_progress_frame_deck,View.INVISIBLE);
  }
 else {
    updateViews.setProgressBar(R.id.widget_big_progress_deck,100,(int)(sessionProgress * 100),false);
    updateViews.setViewVisibility(R.id.widget_big_progress_frame_deck,View.VISIBLE);
  }
contentService.mTomorrowDues=null;
break;
case VIEW_CONGRATS:
if (contentService.mTomorrowDues != null && contentService.mTomorrowDues.length > 0) {
updateViews.setViewVisibility(R.id.widget_big_totalcongrats,View.VISIBLE);
setDeckCounts(updateViews,contentService.mTomorrowDues);
}
break;
case VIEW_DECKS:
updateViews.setTextViewText(R.id.widget_big_counts,"");
updateViews.setViewVisibility(R.id.widget_big_progress_frame_deck,View.INVISIBLE);
updateViews.setViewVisibility(R.id.widget_big_deckfield,View.VISIBLE);
updateViews.setViewVisibility(R.id.widget_big_nothing_due,View.INVISIBLE);
setDeckCounts(updateViews,decks);
updateViews.setViewVisibility(R.id.widget_big_totalcongrats,View.GONE);
updateViews.setViewVisibility(R.id.widget_big_decketa,View.VISIBLE);
updateViews.setTextViewText(R.id.widget_big_decketa,"???????????????\n" + getResources().getQuantityString(R.plurals.widget_big_eta,eta,eta));
break;
}
}
