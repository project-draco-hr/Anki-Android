{
  mNonselectedDues=0;
  for (  JSONObject g : mCol.getDecks().all()) {
    try {
      if (!g.getString("name").matches(".*::.*")) {
        long did=g.getLong("id");
        LinkedList<Long> ldid=new LinkedList<Long>();
        ldid.add(did);
        for (        Long c : mCol.getDecks().children(did).values()) {
          ldid.add(c);
        }
        String didLimit=Utils.ids2str(ldid);
        mNonselectedDues+=_walkingCount(ldid,Sched.class.getDeclaredMethod("_deckNewLimitSingle",JSONObject.class),Sched.class.getDeclaredMethod("_cntFnNew",long.class,int.class));
        mNonselectedDues+=_cntFnLrn(didLimit);
        mNonselectedDues+=_walkingCount(ldid,Sched.class.getDeclaredMethod("_deckRevLimitSingle",JSONObject.class),Sched.class.getDeclaredMethod("_cntFnRev",long.class,int.class));
      }
    }
 catch (    JSONException e) {
      throw new RuntimeException(e);
    }
catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
  }
  mNonselectedDues-=mNewCount + mLrnCount + mRevCount;
}
