{
  if (!mRevQueue.isEmpty()) {
    return true;
  }
  if (mRevCount == 0) {
    return false;
  }
  String order=null;
  while (mRevDids.size() > 0) {
    long did=mRevDids.getFirst();
    int lim=Math.min(mQueueLimit,_deckRevLimit(did));
    order=_revOrder(did);
    mRevQueue.clear();
    Cursor cur=null;
    if (lim != 0) {
      try {
        cur=mCol.getDb().getDatabase().rawQuery("SELECT id FROM cards WHERE did = " + did + " AND queue = 2 AND due <= "+ mToday+ " "+ order+ " LIMIT "+ lim,null);
        while (cur.moveToNext()) {
          mRevQueue.add(new long[]{cur.getLong(0)});
        }
      }
  finally {
        if (cur != null && !cur.isClosed()) {
          cur.close();
        }
      }
      if (!mRevQueue.isEmpty()) {
        return true;
      }
    }
    mRevDids.remove();
  }
  if (order.length() == 0) {
    Random r=new Random();
    r.setSeed(mToday);
    Collections.shuffle(mRevQueue,r);
  }
 else {
    Collections.reverse(mRevQueue);
  }
  return true;
}
