{
  super.doInBackground(params);
  if (mPreviousTask != null && mPreviousTask.getStatus() != AsyncTask.Status.FINISHED) {
    Timber.d("Waiting for %d to finish before starting %d",mPreviousTask.mType,mType);
    if (mType == TASK_TYPE_OPEN_COLLECTION && mPreviousTask.mType == TASK_TYPE_CLOSE_DECK) {
      publishProgress(new TaskData(AnkiDroidApp.getInstance().getBaseContext().getResources().getString(R.string.finish_operation)));
    }
    try {
      mPreviousTask.get();
      Timber.d("Finished waiting for %d to finish. Status= %s",mPreviousTask.mType,mPreviousTask.getStatus());
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      Timber.e(e,"interrupted while waiting for previous task: %d",mPreviousTask.mType);
      return null;
    }
catch (    ExecutionException e) {
      Timber.e(e,"previously running task failed with exception: %d",mPreviousTask.mType);
    }
catch (    CancellationException e) {
      Timber.e(e,"previously running task was cancelled: %d",mPreviousTask.mType);
    }
  }
switch (mType) {
case TASK_TYPE_LOAD_DECK_COUNTS:
    return doInBackgroundLoadDeckCounts(params);
case TASK_TYPE_SAVE_COLLECTION:
  return doInBackgroundSaveCollection(params);
case TASK_TYPE_ANSWER_CARD:
return doInBackgroundAnswerCard(params);
case TASK_TYPE_MARK_CARD:
return doInBackgroundMarkCard(params);
case TASK_TYPE_ADD_FACT:
return doInBackgroundAddNote(params);
case TASK_TYPE_UPDATE_FACT:
return doInBackgroundUpdateNote(params);
case TASK_TYPE_UNDO:
return doInBackgroundUndo(params);
case TASK_TYPE_SEARCH_CARDS:
return doInBackgroundSearchCards(params);
case TASK_TYPE_DISMISS_NOTE:
return doInBackgroundDismissNote(params);
case TASK_TYPE_CHECK_DATABASE:
return doInBackgroundCheckDatabase(params);
case TASK_TYPE_DELETE_BACKUPS:
return doInBackgroundDeleteBackups();
case TASK_TYPE_UPDATE_CARD_BROWSER_LIST:
return doInBackgroundUpdateCardBrowserList(params);
case TASK_TYPE_REPAIR_DECK:
return doInBackgroundRepairDeck(params);
case TASK_TYPE_CLOSE_DECK:
return doInBackgroundCloseCollection(params);
case TASK_TYPE_UPDATE_VALUES_FROM_DECK:
return doInBackgroundUpdateValuesFromDeck(params);
case TASK_TYPE_DELETE_DECK:
return doInBackgroundDeleteDeck(params);
case TASK_TYPE_REBUILD_CRAM:
return doInBackgroundRebuildCram(params);
case TASK_TYPE_EMPTY_CRAM:
return doInBackgroundEmptyCram(params);
case TASK_TYPE_IMPORT:
return doInBackgroundImportAdd(params);
case TASK_TYPE_IMPORT_REPLACE:
return doInBackgroundImportReplace(params);
case TASK_TYPE_EXPORT_APKG:
return doInBackgroundExportApkg(params);
case TASK_TYPE_REORDER:
return doInBackgroundReorder(params);
case TASK_TYPE_CONF_CHANGE:
return doInBackgroundConfChange(params);
case TASK_TYPE_CONF_RESET:
return doInBackgroundConfReset(params);
case TASK_TYPE_CONF_REMOVE:
return doInBackgroundConfRemove(params);
case TASK_TYPE_CONF_SET_SUBDECKS:
return doInBackgroundConfSetSubdecks(params);
case TASK_TYPE_RENDER_BROWSER_QA:
return doInBackgroundRenderBrowserQA(params);
case TASK_TYPE_CHECK_MEDIA:
return doInBackgroundCheckMedia(params);
case TASK_TYPE_ADD_TEMPLATE:
return doInBackgroundAddTemplate(params);
case TASK_TYPE_REMOVE_TEMPLATE:
return doInBackgroundRemoveTemplate(params);
default :
Timber.e("unknown task type: %d",mType);
return null;
}
}
