{
  try {
    String bdry="--" + BOUNDARY;
    StringWriter buf=new StringWriter();
    buf.write(bdry + "\r\n");
    buf.write("Content-Disposition: form-data; name=\"c\"\r\n\r\n" + (comp != 0 ? 1 : 0) + "\r\n");
    if (hkey) {
      buf.write(bdry + "\r\n");
      buf.write("Content-Disposition: form-data; name=\"k\"\r\n\r\n" + mHKey + "\r\n");
    }
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    if (fobj != null) {
      buf.write(bdry + "\r\n");
      buf.write("Content-Disposition: form-data; name=\"data\"; filename=\"data\"\r\nContent-Type: application/octet-stream\r\n\r\n");
      buf.close();
      bos.write(buf.toString().getBytes("UTF-8"));
      int len;
      BufferedInputStream bfobj=new BufferedInputStream(fobj);
      byte[] chunk=new byte[65536];
      if (comp != 0) {
        GZIPOutputStream tgt=new GZIPOutputStream(new BufferedOutputStream(bos));
        while ((len=bfobj.read(chunk)) > 0) {
          tgt.write(chunk,0,len);
        }
        tgt.close();
      }
 else {
        BufferedOutputStream tgt=new BufferedOutputStream(bos);
        while ((len=bfobj.read(chunk)) > 0) {
          tgt.write(chunk,0,len);
        }
        tgt.close();
      }
      bos.write(("\r\n" + bdry + "--\r\n").getBytes("UTF-8"));
    }
 else {
      buf.close();
      bos.write(buf.toString().getBytes("UTF-8"));
    }
    bos.close();
    String url=Collection.SYNC_URL;
    if (method.equals("register")) {
      url=url + "account/signup" + "?username="+ registerData.getString("u")+ "&password="+ registerData.getString("p");
    }
 else {
      url=url + "sync/" + method;
    }
    HttpPost httpPost=new HttpPost(url);
    HttpEntity entity=new ProgressByteEntity(bos.toByteArray());
    httpPost.setEntity(entity);
    httpPost.setHeader("Content-type","multipart/form-data; boundary=" + BOUNDARY);
    SchemeRegistry schemeRegistry=new SchemeRegistry();
    schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));
    schemeRegistry.register(new Scheme("https",newSslSocketFactory(),443));
    HttpParams params=new BasicHttpParams();
    params.setParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS,30);
    params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE,new ConnPerRouteBean(30));
    params.setParameter(HttpProtocolParams.USE_EXPECT_CONTINUE,false);
    HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
    ClientConnectionManager cm=new SingleClientConnManager(params,schemeRegistry);
    DefaultHttpClient httpClient=new DefaultHttpClient(cm,params);
    return httpClient.execute(httpPost);
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    return null;
  }
catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
