{
  try {
    ArrayList<Long> ids=new ArrayList<Long>();
    long id=0;
    String extra;
    if (val.toLowerCase().equals("current")) {
      id=mCol.getDecks().current().getLong("id");
    }
 else     if (val.toLowerCase().equals("none")) {
      if (isNeg) {
        extra="";
      }
 else {
        extra="NOT";
      }
      mLims.getJSONArray("preds").put("c.did " + extra + " IN "+ Utils.ids2str(mCol.getDecks().allIds()));
      return;
    }
 else     if (!val.contains("*")) {
      id=mCol.getDecks().id(val,false);
    }
 else {
      val=val.replace("*",".*");
      for (      JSONObject d : mCol.getDecks().all()) {
        if (d.getString("name").matches("(?i)" + val)) {
          id=d.getLong("id");
          ids.add(id);
          for (          long a : mCol.getDecks().children(id).values()) {
            ids.add(a);
          }
        }
        if (ids.size() == 0) {
          mLims.put("valid",false);
          return;
        }
      }
    }
    if (ids.size() == 0) {
      ids.add(id);
      for (      long a : mCol.getDecks().children(id).values()) {
        ids.add(a);
      }
    }
    String sids=Utils.ids2str(Utils.arrayList2array(ids));
    if (!isNeg) {
      mLims.getJSONArray("preds").put("(c.odid IN " + sids + " OR c.did IN "+ sids+ ")");
    }
 else {
      mLims.getJSONArray("preds").put("((CASE c.odid WHEN 0 then 1 else c.odid NOT IN " + sids + " END) AND c.did NOT IN "+ sids+ ")");
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
