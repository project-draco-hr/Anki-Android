{
  mLims=new JSONObject();
  try {
    mLims.put("preds",new JSONArray());
    mLims.put("args",new JSONObject());
    mLims.put("valid",true);
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  ArrayList<Object[]> pq=_parseQuery();
  for (int c=0; c < pq.size(); c++) {
    Object[] o=pq.get(c);
    String token=(String)o[0];
    boolean isNeg=(Boolean)o[1];
    int type=(Integer)o[2];
    if (type == SEARCH_TAG) {
      _findTag(token,isNeg,c);
    }
 else     if (type == SEARCH_TYPE) {
      _findCardState(token,isNeg);
    }
 else     if (type == SEARCH_NID) {
      _findNids(token);
    }
 else     if (type == SEARCH_TEMPLATE) {
      _findTemplate(token,isNeg);
    }
 else     if (type == SEARCH_FIELD) {
      _findField(token,isNeg);
    }
 else     if (type == SEARCH_MODEL) {
      _findModel(token,isNeg);
    }
 else     if (type == SEARCH_DECK) {
      _findDeck(token,isNeg);
    }
 else {
      _findText(token,isNeg,c);
    }
  }
}
