{
  _checkDay();
  mCol.getDecks().recoverOrphans();
  ArrayList<JSONObject> decks=mCol.getDecks().allSorted();
  HashMap<String,Integer[]> lims=new HashMap<String,Integer[]>();
  ArrayList<DeckDueTreeNode> data=new ArrayList<DeckDueTreeNode>();
  try {
    for (    JSONObject deck : decks) {
      if (lims.containsKey(deck.getString("name"))) {
        mCol.getDecks().rem(deck.getLong("id"),false,true);
        return deckDueList();
      }
      String p;
      List<String> parts=Arrays.asList(deck.getString("name").split("::",-1));
      if (parts.size() < 2) {
        p=null;
      }
 else {
        parts=parts.subList(0,parts.size() - 1);
        p=TextUtils.join("::",parts);
      }
      int nlim=_deckNewLimitSingle(deck);
      if (!TextUtils.isEmpty(p)) {
        if (!lims.containsKey(p)) {
          mCol.getDecks().rem(deck.getLong("id"),false,true);
          return deckDueList();
        }
        nlim=Math.min(nlim,lims.get(p)[0]);
      }
      int _new=_newForDeck(deck.getLong("id"),nlim);
      int lrn=_lrnForDeck(deck.getLong("id"));
      int rlim=_deckRevLimitSingle(deck);
      if (!TextUtils.isEmpty(p)) {
        rlim=Math.min(rlim,lims.get(p)[1]);
      }
      int rev=_revForDeck(deck.getLong("id"),rlim);
      data.add(new DeckDueTreeNode(deck.getString("name"),deck.getLong("id"),rev,lrn,_new));
      lims.put(deck.getString("name"),new Integer[]{nlim,rlim});
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  return data;
}
