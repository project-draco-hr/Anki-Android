{
  JSONObject conf=_lrnConf(card);
  int type;
  if (card.getODid() != 0 && !card.getWasNew()) {
    type=3;
  }
 else   if (card.getType() == 2) {
    type=2;
  }
 else {
    type=0;
  }
  boolean leaving=false;
  int lastLeft=card.getLeft();
  if (ease == 3) {
    _rescheduleAsRev(card,conf,true);
    leaving=true;
  }
 else   if (ease == 2 && (card.getLeft() % 1000) - 1 <= 0) {
    _rescheduleAsRev(card,conf,false);
    leaving=true;
  }
 else {
    if (ease == 2) {
      int left=(card.getLeft() % 1000) - 1;
      try {
        card.setLeft(_leftToday(conf.getJSONArray("delays"),left) * 1000 + left);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      card.setLeft(_startingLeft(card));
      boolean resched=_resched(card);
      if (conf.has("mult") && resched) {
        try {
          card.setIvl(Math.max(Math.max(1,(int)(card.getIvl() * conf.getDouble("mult"))),conf.getInt("minInt")));
        }
 catch (        JSONException e) {
          throw new RuntimeException(e);
        }
      }
 else {
      }
      if (resched && card.getODid() != 0) {
        card.setODue(mToday + 1);
      }
    }
    int delay=_delayForGrade(conf,card.getLeft());
    if (card.getDue() < Utils.now()) {
      delay*=Utils.randomFloatInRange(1f,1.25f);
    }
    card.setDue((int)(Utils.now() + delay));
    if (card.getDue() < mDayCutoff) {
      mLrnCount+=card.getLeft() / 1000;
      card.setQueue(1);
      if (!mLrnQueue.isEmpty() && mRevCount == 0 && mNewCount == 0) {
        long smallestDue=mLrnQueue.getFirst()[0];
        card.setDue(Math.max(card.getDue(),smallestDue + 1));
      }
      _sortIntoLrn(card.getDue(),card.getId());
    }
 else {
      long ahead=((card.getDue() - mDayCutoff) / 86400) + 1;
      card.setDue(mToday + ahead);
      card.setQueue(3);
    }
  }
  _logLrn(card,ease,conf,leaving,type,lastLeft);
}
