{
  mCol.log();
  Timber.i("answerCard - ease: %d",ease);
  mCol.markReview(card);
  if (mBurySiblingsOnAnswer) {
    _burySiblings(card);
  }
  card.setReps(card.getReps() + 1);
  card.setWasNew((card.getType() == 0));
  boolean wasNewQ=(card.getQueue() == 0);
  if (wasNewQ) {
    card.setQueue(1);
    if (card.getType() == 0) {
      card.setType(1);
    }
    card.setLeft(_startingLeft(card));
    if (card.getODid() != 0 && card.getType() == 2) {
      if (_resched(card)) {
        card.setIvl(_dynIvlBoost(card));
        card.setODue(mToday + card.getIvl());
      }
    }
    _updateStats(card,"new");
  }
  if (card.getQueue() == 1 || card.getQueue() == 3) {
    _answerLrnCard(card,ease);
    if (!wasNewQ) {
      _updateStats(card,"lrn");
    }
  }
 else   if (card.getQueue() == 2) {
    _answerRevCard(card,ease);
    _updateStats(card,"rev");
  }
 else {
    throw new RuntimeException("Invalid queue");
  }
  _updateStats(card,"time",card.timeTaken());
  card.setMod(Utils.intNow());
  card.setUsn(mCol.usn());
  card.flushSched();
}
