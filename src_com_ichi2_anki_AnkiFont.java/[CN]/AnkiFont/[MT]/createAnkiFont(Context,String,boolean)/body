{
  File fontfile=new File(path);
  String name=Utils.removeExtension(fontfile.getName());
  String family=name;
  List<String> attributes=new ArrayList<String>();
  if (fromAssets) {
    path=fAssetPathPrefix.concat(fontfile.getName());
  }
  Typeface tf=getTypeface(ctx,path);
  if (tf == null) {
    return null;
  }
  if (tf.isBold() || name.toLowerCase().contains("bold")) {
    attributes.add("font-weight: bolder;");
    family=family.replaceFirst("(?i)-?Bold","");
  }
 else   if (name.toLowerCase().contains("light")) {
    attributes.add("font-weight: lighter;");
    family=family.replaceFirst("(?i)-?Light","");
  }
 else {
    attributes.add("font-weight: normal;");
  }
  if (tf.isItalic() || name.toLowerCase().contains("italic")) {
    attributes.add("font-style: italic;");
    family=family.replaceFirst("(?i)-?Italic","");
  }
 else   if (name.toLowerCase().contains("oblique")) {
    attributes.add("font-style: oblique;");
    family=family.replaceFirst("(?i)-?Oblique","");
  }
 else {
    attributes.add("font-style: normal;");
  }
  if (name.toLowerCase().contains("condensed") || name.toLowerCase().contains("narrow")) {
    attributes.add("font-stretch: condensed;");
    family=family.replaceFirst("(?i)-?Condensed","");
    family=family.replaceFirst("(?i)-?Narrow(er)?","");
  }
 else   if (name.toLowerCase().contains("expanded") || name.toLowerCase().contains("wide")) {
    attributes.add("font-stretch: expanded;");
    family=family.replaceFirst("(?i)-?Expanded","");
    family=family.replaceFirst("(?i)-?Wide(r)?","");
  }
 else {
    attributes.add("font-stretch: normal;");
  }
  family=family.replaceFirst("(?i)-?Regular","");
  return new AnkiFont(name,family,attributes,path);
}
