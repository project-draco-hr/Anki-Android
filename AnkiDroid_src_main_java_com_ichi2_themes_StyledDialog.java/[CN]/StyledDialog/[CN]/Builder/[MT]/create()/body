{
  final StyledDialog dialog=new StyledDialog(context);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View layout=inflater.inflate(R.layout.styled_dialog,null);
  dialog.addContentView(layout,new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT));
  if (title != null && title.length() > 0) {
    ((TextView)layout.findViewById(R.id.alertTitle)).setText(title);
    if (icon != 0) {
      ((ImageView)layout.findViewById(R.id.icon)).setImageResource(icon);
    }
 else {
      layout.findViewById(R.id.icon).setVisibility(View.GONE);
    }
  }
 else {
    layout.findViewById(R.id.topPanel).setVisibility(View.GONE);
    layout.findViewById(R.id.titleDivider).setVisibility(View.GONE);
  }
  int numberOfButtons=0;
  if (positiveButtonText != null) {
    Button positiveButton=(Button)layout.findViewById(R.id.positive_button);
    positiveButton.setText(positiveButtonText);
    positiveButton.setOnClickListener(new OnClickForwarder(dialog,DialogInterface.BUTTON_POSITIVE,positiveButtonClickListener));
    numberOfButtons++;
  }
 else {
    layout.findViewById(R.id.positive_button).setVisibility(View.GONE);
  }
  if (negativeButtonText != null) {
    Button negativeButton=(Button)layout.findViewById(R.id.negative_button);
    negativeButton.setText(negativeButtonText);
    negativeButton.setOnClickListener(new OnClickForwarder(dialog,DialogInterface.BUTTON_NEGATIVE,negativeButtonClickListener));
    numberOfButtons++;
  }
 else {
    layout.findViewById(R.id.negative_button).setVisibility(View.GONE);
  }
  if (neutralButtonText != null) {
    Button neutralButton=(Button)layout.findViewById(R.id.neutral_button);
    neutralButton.setText(neutralButtonText);
    neutralButton.setOnClickListener(new OnClickForwarder(dialog,DialogInterface.BUTTON_NEUTRAL,neutralButtonClickListener));
    numberOfButtons++;
  }
 else {
    layout.findViewById(R.id.neutral_button).setVisibility(View.GONE);
  }
  if (numberOfButtons == 0) {
    layout.findViewById(R.id.buttonPanel).setVisibility(View.GONE);
  }
  dialog.setCancelable(cancelable);
  dialog.setOnCancelListener(cancelListener);
  dialog.setOnDismissListener(dismissListener);
  if (message != null) {
    TextView tv=(TextView)layout.findViewById(R.id.message);
    tv.setText(message);
    if (messageSize != 0) {
      tv.setTextSize(messageSize * context.getResources().getDisplayMetrics().scaledDensity);
    }
  }
 else {
    ((LinearLayout)layout.findViewById(R.id.contentPanel)).setVisibility(View.GONE);
  }
  if (itemTitels != null) {
    dialog.setItems(listStyle,(ListView)layout.findViewById(R.id.listview),itemTitels,checkedItem,multipleCheckedItems,itemClickListener);
  }
 else {
    ((View)layout.findViewById(R.id.listViewPanel)).setVisibility(View.GONE);
  }
  if (contentView != null) {
    FrameLayout frame=(FrameLayout)layout.findViewById(R.id.custom);
    float factor=context.getResources().getDisplayMetrics().density;
    frame.setPadding((int)(2 * factor),(int)((5 - bottomMargin) * factor),(int)(2 * factor),(int)(bottomMargin * factor));
    frame.removeAllViews();
    frame.addView(contentView);
  }
 else {
    ((View)layout.findViewById(R.id.customPanel)).setVisibility(View.GONE);
  }
  try {
    Themes.setStyledDialogBackgrounds(layout,numberOfButtons,brightViewBackground);
  }
 catch (  OutOfMemoryError e) {
    Log.e(AnkiDroidApp.TAG,"StyledDialog - Dialog could not be created: " + e);
    Themes.showThemedToast(context,context.getResources().getString(R.string.error_insufficient_memory),false);
    return null;
  }
  if (this.listStyle == 3 && selectAllListener != null) {
    CheckBox selectAll=(CheckBox)layout.findViewById(R.id.SelectAllCheckbox);
    selectAll.setVisibility(View.VISIBLE);
    selectAll.setTag(selectAllListener);
    dialog.adjustSelectAllCheckBox();
  }
  if (mShowFilterEditText) {
    final EditText filterTags=(EditText)layout.findViewById(R.id.filterTags);
    filterTags.setVisibility(View.VISIBLE);
    filterTags.addTextChangedListener(new TextWatcher(){
      @Override public void onTextChanged(      CharSequence s,      int start,      int before,      int count){
        dialog.filterList(s.toString(),new FilterListener(){
          @Override public void onFilterComplete(          int count){
            dialog.adjustSelectAllCheckBox();
          }
        }
);
      }
      @Override public void beforeTextChanged(      CharSequence s,      int start,      int count,      int after){
      }
      @Override public void afterTextChanged(      Editable s){
      }
    }
);
    dialog.setOnDismissListener(new OnDismissListener(){
      @Override public void onDismiss(      DialogInterface dialog){
        filterTags.setText("");
        if (dismissListener != null) {
          dismissListener.onDismiss(dialog);
        }
      }
    }
);
  }
  dialog.setContentView(layout);
  return dialog;
}
