{
  DeckTask.waitToFinish();
  String hkey=(String)data.data[0];
  boolean media=(Boolean)data.data[1];
  String conflictResolution=(String)data.data[2];
  int mediaUsn=(Integer)data.data[3];
  Collection col=Collection.currentCollection();
  if (col == null) {
    data.success=false;
    data.result=new Object[]{"genericError"};
    return data;
  }
  String path=col.getPath();
  BasicHttpSyncer server=new RemoteServer(this,hkey);
  Syncer client=new Syncer(col,server);
  boolean noChanges=false;
  if (conflictResolution == null) {
    Log.i(AnkiDroidApp.TAG,"Sync - starting sync");
    publishProgress(R.string.sync_prepare_syncing);
    Object[] ret=client.sync(this);
    mediaUsn=client.getmMediaUsn();
    if (ret == null) {
      data.success=false;
      data.result=new Object[]{"genericError"};
      return data;
    }
    String retCode=(String)ret[0];
    if (!retCode.equals("noChanges") && !retCode.equals("success")) {
      data.success=false;
      data.result=ret;
      data.data=new Object[]{mediaUsn};
      return data;
    }
    col.save();
    if (retCode.equals("noChanges")) {
      noChanges=true;
    }
 else {
    }
  }
 else {
    try {
      server=new FullSyncer(col,hkey,this);
      if (conflictResolution.equals("upload")) {
        Log.i(AnkiDroidApp.TAG,"Sync - fullsync - upload collection");
        publishProgress(R.string.sync_preparing_full_sync_message);
        Object[] ret=server.upload();
        if (ret == null) {
          data.success=false;
          data.result=new Object[]{"genericError"};
          data.data=new Object[]{Collection.openCollection(path)};
          return data;
        }
        if (!((String)ret[0]).equals(BasicHttpSyncer.ANKIWEB_STATUS_OK)) {
          data.success=false;
          data.result=ret;
          data.data=new Object[]{Collection.openCollection(path)};
          return data;
        }
      }
 else       if (conflictResolution.equals("download")) {
        Log.i(AnkiDroidApp.TAG,"Sync - fullsync - download collection");
        publishProgress(R.string.sync_downloading_message);
        Object[] ret=server.download();
        if (ret == null) {
          data.success=false;
          data.result=new Object[]{"genericError"};
          data.data=new Object[]{Collection.openCollection(path)};
          return data;
        }
        if (!((String)ret[0]).equals("success")) {
          data.success=false;
          data.result=ret;
          data.data=new Object[]{Collection.openCollection(path)};
          return data;
        }
      }
    }
  finally {
      publishProgress(R.string.sync_reload_message);
      col=Collection.openCollection(path);
    }
  }
  boolean noMediaChanges=false;
  if (media) {
    server=new RemoteMediaServer(hkey,this);
    MediaSyncer mediaClient=new MediaSyncer(col,(RemoteMediaServer)server);
    String ret=mediaClient.sync(mediaUsn,this);
    if (ret.equals("noChanges")) {
      publishProgress(R.string.sync_media_no_changes);
      noMediaChanges=true;
    }
 else {
      publishProgress(R.string.sync_media_success);
    }
  }
  if (noChanges && noMediaChanges) {
    data.success=false;
    data.result=new Object[]{"noChanges"};
    return data;
  }
 else {
    data.success=true;
    TreeSet<Object[]> decks=col.getSched().deckDueTree(Sched.DECK_INFORMATION_SIMPLE_COUNTS);
    int[] counts=new int[]{0,0,0};
    for (    Object[] deck : decks) {
      if (((String[])deck[0]).length == 1) {
        counts[0]+=(Integer)deck[2];
        counts[1]+=(Integer)deck[3];
        counts[2]+=(Integer)deck[4];
      }
    }
    data.result=decks;
    data.data=new Object[]{conflictResolution,col,col.getSched().eta(counts),col.cardCount()};
    return data;
  }
}
