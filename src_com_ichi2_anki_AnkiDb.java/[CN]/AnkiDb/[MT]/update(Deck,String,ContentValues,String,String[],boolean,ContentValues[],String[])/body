{
  if (deck.recordUndoInformation()) {
    if (oldValuesArray != null) {
      for (int i=0; i < oldValuesArray.length; i++) {
        deck.addUndoCommand(SQL_UPD,table,oldValuesArray[i],whereClauseArray[i]);
      }
    }
 else {
      ArrayList<String> ar=new ArrayList<String>();
      for (      Entry<String,Object> entry : values.valueSet()) {
        ar.add(entry.getKey());
      }
      int len=ar.size();
      String[] columns=new String[len + 1];
      ar.toArray(columns);
      columns[len]="rowid";
      Cursor cursor=null;
      try {
        cursor=mDatabase.query(table,columns,whereClause,whereArgs,null,null,null);
        while (cursor.moveToNext()) {
          ContentValues oldvalues=new ContentValues();
          for (int i=0; i < len; i++) {
            oldvalues.put(columns[i],cursor.getString(i));
          }
          deck.addUndoCommand(SQL_UPD,table,oldvalues,"rowid = " + cursor.getString(len));
        }
      }
  finally {
        if (cursor != null) {
          cursor.close();
        }
      }
    }
  }
  if (onlyFixedValues) {
    mDatabase.update(table,values,whereClause,whereArgs);
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append("UPDATE ").append(table).append(" SET ");
    for (    Entry<String,Object> entry : values.valueSet()) {
      sb.append(entry.getKey()).append(" = ").append(entry.getValue()).append(", ");
    }
    sb.deleteCharAt(sb.length() - 2);
    if (whereArgs != null) {
      for (int i=0; i < whereArgs.length; i++) {
        whereClause=whereClause.replaceFirst("?",whereArgs[i]);
      }
    }
    sb.append("WHERE ").append(whereClause);
    mDatabase.execSQL(sb.toString());
  }
}
