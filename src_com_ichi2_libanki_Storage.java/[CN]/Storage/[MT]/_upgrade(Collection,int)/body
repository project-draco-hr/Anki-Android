{
  try {
    if (ver < 3) {
      for (      JSONObject d : col.getDecks().all()) {
        d.put("dyn",0);
        d.put("collapsed",false);
        col.getDecks().save(d);
      }
    }
    if (ver < 4) {
      col.modSchema();
      ArrayList<JSONObject> clozes=new ArrayList<JSONObject>();
      for (      JSONObject m : col.getModels().all()) {
        if (!m.getJSONArray("tmpls").getJSONObject(0).getString("qfmt").contains("{{cloze:")) {
          m.put("type",Sched.MODEL_STD);
        }
 else {
          clozes.add(m);
        }
      }
      for (      JSONObject m : clozes) {
        _upgradeClozeModel(col,m);
      }
      col.getDb().execute("UPDATE col SET ver = 4");
    }
    if (ver < 5) {
      col.getDb().execute("UPDATE cards SET odue = 0 WHERE queue = 2");
      col.getDb().execute("UPDATE col SET ver = 5");
    }
    if (ver < 6) {
      col.modSchema();
      for (      JSONObject m : col.getModels().all()) {
        m.put("css",new JSONObject(Models.defaultModel).getString("css"));
        JSONArray ar=m.getJSONArray("tmpls");
        for (int i=0; i < ar.length(); i++) {
          JSONObject t=ar.getJSONObject(i);
          if (!t.has("css")) {
            continue;
          }
          m.put("css",m.getString("css") + "\n" + t.getString("css").replace(".card ",".card" + t.getInt("ord") + 1));
          t.remove("css");
        }
        col.getModels().save(m);
      }
      col.getDb().execute("UPDATE col SET ver = 6");
    }
    if (ver < 7) {
      col.modSchema();
      col.getDb().execute("UPDATE cards SET odue = 0 WHERE (type = 1 OR queue = 2) AND NOT odid");
      col.getDb().execute("UPDATE col SET ver = 7");
    }
    if (ver < 8) {
      col.modSchema();
      col.getDb().execute("UPDATE cards SET due = due / 1000 WHERE due > 4294967296");
      col.getDb().execute("UPDATE col SET ver = 8");
    }
    if (ver < 9) {
      col.getDb().execute("UPDATE col SET ver = 9");
    }
    if (ver < 10) {
      col.getDb().execute("UPDATE cards SET left = left + left * 1000 WHERE queue = 1");
      col.getDb().execute("UPDATE col SET ver = 10");
    }
    if (ver < 11) {
      col.modSchema();
      for (      JSONObject d : col.getDecks().all()) {
        if (d.getInt("dyn") != 0) {
          int order=d.getInt("order");
          if (order >= 5) {
            order-=1;
          }
          JSONArray ja=new JSONArray(Arrays.asList(new Object[]{d.getString("search"),d.getInt("limit"),order}));
          d.put("terms",new JSONArray());
          d.getJSONArray("terms").put(0,ja);
          d.remove("search");
          d.remove("limit");
          d.remove("order");
          d.put("resched",true);
          d.put("return",true);
        }
 else {
          if (!d.has("extendNew")) {
            d.put("extendNew",10);
            d.put("extendRev",50);
          }
        }
        col.getDecks().save(d);
      }
      for (      JSONObject c : col.getDecks().allConf()) {
        JSONObject r=c.getJSONObject("rev");
        r.put("ivlFct",r.optDouble("ivlFct",1));
        if (r.has("ivlfct")) {
          r.remove("ivlfct");
        }
        r.put("maxIvl",36500);
        col.getDecks().save(c);
      }
      for (      JSONObject m : col.getModels().all()) {
        JSONArray tmpls=m.getJSONArray("tmpls");
        for (int ti=0; ti < tmpls.length(); ++ti) {
          JSONObject t=tmpls.getJSONObject(ti);
          t.put("bqfmt","");
          t.put("bafmt","");
        }
        col.getModels().save(m);
      }
      col.getDb().execute("update col set ver = 11");
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
