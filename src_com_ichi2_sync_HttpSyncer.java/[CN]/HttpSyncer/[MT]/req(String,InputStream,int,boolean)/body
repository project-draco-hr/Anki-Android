{
  try {
    String bdry="--" + BOUNDARY;
    StringWriter buf=new StringWriter();
    buf.write(bdry + "\r\n");
    buf.write("Content-Disposition: form-data; name=\"c\"\r\n\r\n" + (comp != 0 ? 1 : 0) + "\r\n");
    if (hkey) {
      buf.write(bdry + "\r\n");
      buf.write("Content-Disposition: form-data; name=\"k\"\r\n\r\n" + mHKey + "\r\n");
    }
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    if (fobj != null) {
      buf.write(bdry + "\r\n");
      buf.write("Content-Disposition: form-data; name=\"data\"; filename=\"data\"\r\nContent-Type: application/octet-stream\r\n\r\n");
      buf.close();
      bos.write(buf.toString().getBytes());
      int len;
      BufferedInputStream bfobj=new BufferedInputStream(fobj);
      byte[] chunk=new byte[65536];
      if (comp != 0) {
        GZIPOutputStream tgt=new GZIPOutputStream(new BufferedOutputStream(bos));
        while ((len=bfobj.read(chunk)) > 0) {
          tgt.write(chunk,0,len);
        }
        tgt.close();
      }
 else {
        BufferedOutputStream tgt=new BufferedOutputStream(bos);
        while ((len=bfobj.read(chunk)) > 0) {
          tgt.write(chunk,0,len);
        }
      }
      bos.write(("\r\n" + bdry + "--\r\n").getBytes());
    }
 else {
      buf.close();
      bos.write(buf.toString().getBytes());
    }
    bos.close();
    HttpPost httpPost=new HttpPost(SYNC_URL + method);
    HttpEntity entity=new ByteArrayEntity(bos.toByteArray());
    httpPost.setEntity(entity);
    httpPost.setHeader("Content-type","multipart/form-data; boundary=" + BOUNDARY);
    DefaultHttpClient httpClient=new DefaultHttpClient();
    return httpClient.execute(httpPost);
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
