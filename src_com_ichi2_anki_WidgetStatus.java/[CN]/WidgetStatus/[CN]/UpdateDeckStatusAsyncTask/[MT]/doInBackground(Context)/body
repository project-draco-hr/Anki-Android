{
  Context context=params[0];
  SharedPreferences preferences=PrefSettings.getSharedPrefs(context);
  String deckPath=preferences.getString("deckPath",AnkiDroidApp.getStorageDirectory() + "/AnkiDroid");
  File dir=new File(deckPath);
  File[] fileList=dir.listFiles(new AnkiFileFilter());
  if (fileList == null || fileList.length == 0) {
    mDecks=EMPTY_DECK_STATUS;
    return context;
  }
  ArrayList<DeckStatus> decks=new ArrayList<DeckStatus>(fileList.length);
  for (  File file : fileList) {
    try {
      String absPath=file.getAbsolutePath();
      String deckName=file.getName().replaceAll(".anki","");
      Deck deck=Deck.openDeck(absPath,false);
      if (deck == null) {
        Log.e(AnkiDroidApp.TAG,"Skipping null deck: " + absPath);
        for (        DeckStatus deckStatus : mDecks) {
          if (absPath.equals(deckStatus.mDeckPath)) {
            decks.add(deckStatus);
            break;
          }
        }
        continue;
      }
      int dueCards=deck.getDueCount();
      int newCards=deck.getNewCountToday();
      int failedCards=deck.getFailedSoonCount();
      Deck currentDeck=AnkiDroidApp.deck();
      if (currentDeck != null && currentDeck.getDB() != deck.getDB()) {
        deck.closeDeck();
      }
      decks.add(new DeckStatus(absPath,deckName,newCards,dueCards,failedCards));
    }
 catch (    SQLException e) {
      Log.e(AnkiDroidApp.TAG,e.toString());
    }
  }
  if (!decks.isEmpty() && decks.size() > 1) {
    Collections.sort(decks,new ByDueComparator());
  }
  mDecks=decks.toArray(EMPTY_DECK_STATUS);
  return context;
}
