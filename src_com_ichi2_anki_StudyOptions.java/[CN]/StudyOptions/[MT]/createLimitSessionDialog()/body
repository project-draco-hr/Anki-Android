{
  View contentView=getLayoutInflater().inflate(R.layout.studyoptions_limit_dialog_contents,null);
  mEditSessionTime=(EditText)contentView.findViewById(R.id.studyoptions_session_minutes);
  mEditSessionQuestions=(EditText)contentView.findViewById(R.id.studyoptions_session_questions);
  mSessionLimitCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_session_check);
  mLimitTagsCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_check);
  mLimitTagNewActiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_new_active_check);
  mLimitTagNewInactiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_new_inactive_check);
  mLimitTagRevActiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_rev_active_check);
  mLimitTagRevInactiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_rev_inactive_check);
  mLimitSessionTv1=(TextView)contentView.findViewById(R.id.studyoptions_limit_session_tv1);
  mLimitSessionTv2=(TextView)contentView.findViewById(R.id.studyoptions_limit_session_tv2);
  mLimitTagTv1=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv1);
  mLimitTagTv2=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv2);
  mLimitTagTv3=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv3);
  mLimitTagTv4=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv4);
  mLimitTagTv5=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv5);
  mLimitTagTv6=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv6);
  mLimitTagTv2.setOnClickListener(mButtonClickListener);
  mLimitTagTv3.setOnClickListener(mButtonClickListener);
  mLimitTagTv5.setOnClickListener(mButtonClickListener);
  mLimitTagTv6.setOnClickListener(mButtonClickListener);
  mSessionLimitCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mEditSessionTime.setEnabled(isChecked);
      mEditSessionQuestions.setEnabled(isChecked);
      if (!isChecked) {
        mEditSessionTime.setText("");
        mEditSessionQuestions.setText("");
        mEditSessionTime.clearFocus();
        mEditSessionQuestions.clearFocus();
        ((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(mEditSessionTime.getWindowToken(),0);
      }
      int color=getResources().getColor((isChecked) ? R.color.studyoptions_foreground : R.color.studyoptions_foreground_deactivated);
      mLimitSessionTv1.setTextColor(color);
      mLimitSessionTv2.setTextColor(color);
    }
  }
);
  mLimitTagsCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mLimitTagNewActiveCheckBox.setEnabled(isChecked);
      mLimitTagNewInactiveCheckBox.setEnabled(isChecked);
      mLimitTagRevActiveCheckBox.setEnabled(isChecked);
      mLimitTagRevInactiveCheckBox.setEnabled(isChecked);
      if (!isChecked) {
        mLimitTagNewActiveCheckBox.setChecked(false);
        mLimitTagNewInactiveCheckBox.setChecked(false);
        mLimitTagRevActiveCheckBox.setChecked(false);
        mLimitTagRevInactiveCheckBox.setChecked(false);
      }
      int color=getResources().getColor((isChecked) ? R.color.studyoptions_foreground : R.color.studyoptions_foreground_deactivated);
      mLimitTagTv1.setTextColor(color);
      mLimitTagTv2.setTextColor(color);
      mLimitTagTv3.setTextColor(color);
      mLimitTagTv4.setTextColor(color);
      mLimitTagTv5.setTextColor(color);
      mLimitTagTv6.setTextColor(color);
    }
  }
);
  mLimitTagNewActiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
  mLimitTagNewInactiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
  mLimitTagRevActiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
  mLimitTagRevInactiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
  allTags=new String[0];
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.studyoptions_limit_dialog_title);
  builder.setPositiveButton(R.string.studyoptions_more_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Deck deck=AnkiDroidApp.deck();
      int changed=0;
      String textTime=mEditSessionTime.getText().toString();
      if (!textTime.equals(Long.toString(deck.getSessionTimeLimit() / 60))) {
        if (textTime.equals("")) {
          deck.setSessionTimeLimit(0);
        }
 else         if (isValidLong(textTime)) {
          deck.setSessionTimeLimit(Long.parseLong(textTime) * 60);
        }
      }
      String textReps=mEditSessionQuestions.getText().toString();
      if (!textReps.equals(Long.toString(deck.getSessionRepLimit()))) {
        if (textReps.equals("")) {
          deck.setSessionRepLimit(0);
        }
 else         if (isValidLong(textReps)) {
          deck.setSessionRepLimit(Long.parseLong(textReps));
        }
        changed=1;
      }
      if (!deck.getVar("newActive").equals(mLimitNewActive)) {
        deck.setVar("newActive",mLimitNewActive);
        changed=2;
      }
      if (!deck.getVar("newInactive").equals(mLimitNewInactive)) {
        deck.setVar("newInactive",mLimitNewInactive);
        changed=2;
      }
      if (!deck.getVar("revActive").equals(mLimitRevActive)) {
        deck.setVar("revActive",mLimitRevActive);
        changed=2;
      }
      if (!deck.getVar("revInactive").equals(mLimitRevInactive)) {
        deck.setVar("revInactive",mLimitRevInactive);
        changed=2;
      }
      if (changed == 2) {
        reloadDeck();
      }
 else       if (changed == 1) {
        updateValuesFromDeck();
      }
      mToggleLimit.setChecked((mSessionLimitCheckBox.isChecked() && !(textTime.length() == 0 && textReps.length() == 0)) || (mLimitTagsCheckBox.isChecked() && (mLimitTagNewActiveCheckBox.isChecked() || mLimitTagNewInactiveCheckBox.isChecked() || mLimitTagRevActiveCheckBox.isChecked()|| mLimitTagRevInactiveCheckBox.isChecked())));
    }
  }
);
  builder.setView(contentView);
  return builder.create();
}
