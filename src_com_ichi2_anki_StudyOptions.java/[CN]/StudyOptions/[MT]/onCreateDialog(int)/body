{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_SYNC_LOG:
    builder.setTitle(getResources().getString(R.string.sync_log_title));
  builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_NO_SPACE_LEFT:
builder.setNegativeButton(getResources().getString(R.string.dont_show_again),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
PrefSettings.getSharedPrefs(getBaseContext()).edit().putBoolean("dontShowLowMemory",true).commit();
}
}
);
case DIALOG_BACKUP_NO_SPACE_LEFT:
builder.setTitle(getResources().getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_BACKUP_ERROR:
builder.setTitle(getResources().getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(getResources().getString(R.string.backup_deck_error));
builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_NO_CONNECTION:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_needed));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
builder.setPositiveButton(res.getString(R.string.log_in),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(StudyOptions.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN);
if (getApiLevel() > 4) {
ActivityTransitionAnimation.slide(StudyOptions.this,ActivityTransitionAnimation.LEFT);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SWAP_QA:
builder.setTitle(getResources().getString(R.string.swap_qa_title));
builder.setMessage(getResources().getString(R.string.swap_qa_text));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mSwapQA.setChecked(true);
mSwap=true;
savePreferences("swapqa");
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_CONNECTION_ERROR:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_error_message));
builder.setPositiveButton(res.getString(R.string.retry),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
syncDeck(null);
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SYNC_CONFLICT_RESOLUTION:
builder.setTitle(res.getString(R.string.sync_conflict_title));
builder.setIcon(android.R.drawable.ic_input_get);
builder.setMessage(res.getString(R.string.sync_conflict_message));
builder.setPositiveButton(res.getString(R.string.sync_conflict_local),mSyncConflictResolutionListener);
builder.setNeutralButton(res.getString(R.string.sync_conflict_remote),mSyncConflictResolutionListener);
builder.setNegativeButton(res.getString(R.string.sync_conflict_cancel),mSyncConflictResolutionListener);
builder.setCancelable(false);
dialog=builder.create();
break;
case DIALOG_STATISTIC_PERIOD:
builder.setTitle(res.getString(R.string.statistics_period_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_period_labels),0,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_STATISTIC_TYPE:
builder.setTitle(res.getString(R.string.statistics_type_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_type_labels),Statistics.TYPE_DUE,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_DECK_NOT_LOADED:
builder.setTitle(res.getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.retry),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
displayProgressDialogAndLoadDeck();
}
}
);
builder.setNeutralButton(res.getString(R.string.backup_restore),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Resources res=getResources();
mBackups=BackupManager.getDeckBackups(new File(mDeckFilename));
if (mBackups.length == 0) {
StyledDialog.Builder builder=new StyledDialog.Builder(StudyOptions.this);
builder.setTitle(res.getString(R.string.backup_manager_title)).setIcon(android.R.drawable.ic_dialog_alert).setMessage(res.getString(R.string.backup_restore_no_backups)).setPositiveButton(res.getString(R.string.ok),new Dialog.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).setCancelable(true).setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).show();
}
 else {
String[] dates=new String[mBackups.length];
for (int i=0; i < mBackups.length; i++) {
dates[i]=mBackups[i].getName().replaceAll(".*-(\\d{4}-\\d{2}-\\d{2}).anki","$1");
}
StyledDialog.Builder builder=new StyledDialog.Builder(StudyOptions.this);
builder.setTitle(res.getString(R.string.backup_restore_select_title)).setIcon(android.R.drawable.ic_input_get).setSingleChoiceItems(dates,dates.length,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_RESTORE_DECK,mRestoreDeckHandler,new DeckTask.TaskData(null,new String[]{mDeckFilename,mBackups[which].getPath()},0,0));
dialog.dismiss();
}
}
).setCancelable(true).setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).show();
}
}
}
);
builder.setNegativeButton(res.getString(R.string.delete_deck_title),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Resources res=getResources();
StyledDialog.Builder builder=new StyledDialog.Builder(StudyOptions.this);
builder.setCancelable(true).setTitle(res.getString(R.string.delete_deck_title)).setIcon(android.R.drawable.ic_dialog_alert).setMessage(String.format(res.getString(R.string.delete_deck_message),new File(mDeckFilename).getName().replace(".anki",""))).setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (BackupManager.moveDeckToBrokenFolder(mDeckFilename)) {
Themes.showThemedToast(StudyOptions.this,getResources().getString(R.string.delete_deck_success,new File(mDeckFilename).getName().replace(".anki",""),BackupManager.BROKEN_DECKS_SUFFIX.replace("/","")),false);
}
showContentView(CONTENT_NO_DECK);
}
}
).setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).show();
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showContentView(CONTENT_DECK_NOT_LOADED);
}
}
);
dialog=builder.create();
break;
case DIALOG_MORE:
View contentViewMore=getLayoutInflater().inflate(R.layout.studyoptions_more_dialog_contents,null);
mSpinnerNewCardOrder=(Spinner)contentViewMore.findViewById(R.id.studyoptions_new_card_order);
mSpinnerNewCardSchedule=(Spinner)contentViewMore.findViewById(R.id.studyoptions_new_card_schedule);
mSpinnerRevCardOrder=(Spinner)contentViewMore.findViewById(R.id.studyoptions_rev_card_order);
mSpinnerFailCardOption=(Spinner)contentViewMore.findViewById(R.id.studyoptions_fail_card_option);
mEditMaxFailCard=(EditText)contentViewMore.findViewById(R.id.studyoptions_max_fail_card);
mEditNewPerDay=(EditText)contentViewMore.findViewById(R.id.studyoptions_new_cards_per_day);
mCheckBoxPerDay=(CheckBox)contentViewMore.findViewById(R.id.studyoptions_per_day);
mCheckBoxSuspendLeeches=(CheckBox)contentViewMore.findViewById(R.id.studyoptions_suspend_leeches);
builder.setTitle(R.string.studyoptions_more_dialog_title);
builder.setPositiveButton(R.string.studyoptions_more_save,mDialogSaveListener);
builder.setView(contentViewMore,true);
dialog=builder.create();
break;
case DIALOG_DOWNLOAD_SELECTOR:
builder.setTitle(res.getString(R.string.menu_download_deck));
String[] items;
items=new String[2];
items[0]=res.getString(R.string.menu_download_personal_deck);
items[1]=res.getString(R.string.menu_download_shared_deck);
builder.setItems(items,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
if (item == 0) {
openPersonalDeckPicker();
}
 else {
openSharedDeckPicker();
}
}
}
);
dialog=builder.create();
break;
case DIALOG_LIMIT_SESSION:
View contentView=getLayoutInflater().inflate(R.layout.studyoptions_limit_dialog_contents,null);
mEditSessionTime=(EditText)contentView.findViewById(R.id.studyoptions_session_minutes);
mEditSessionQuestions=(EditText)contentView.findViewById(R.id.studyoptions_session_questions);
mSessionLimitCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_session_check);
mLimitTagsCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_check);
mLimitTagNewActiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_new_active_check);
mLimitTagNewInactiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_new_inactive_check);
mLimitTagRevActiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_rev_active_check);
mLimitTagRevInactiveCheckBox=(CheckBox)contentView.findViewById(R.id.studyoptions_limit_tag_rev_inactive_check);
mLimitSessionTv1=(TextView)contentView.findViewById(R.id.studyoptions_limit_session_tv1);
mLimitSessionTv2=(TextView)contentView.findViewById(R.id.studyoptions_limit_session_tv2);
mLimitTagTv1=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv1);
mLimitTagTv2=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv2);
mLimitTagTv3=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv3);
mLimitTagTv4=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv4);
mLimitTagTv5=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv5);
mLimitTagTv6=(TextView)contentView.findViewById(R.id.studyoptions_limit_tag_tv6);
mLimitTagTv2.setOnClickListener(mButtonClickListener);
mLimitTagTv3.setOnClickListener(mButtonClickListener);
mLimitTagTv5.setOnClickListener(mButtonClickListener);
mLimitTagTv6.setOnClickListener(mButtonClickListener);
mSessionLimitCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
mEditSessionTime.setEnabled(isChecked);
mEditSessionQuestions.setEnabled(isChecked);
if (!isChecked) {
mEditSessionTime.setText("");
mEditSessionQuestions.setText("");
mEditSessionTime.clearFocus();
mEditSessionQuestions.clearFocus();
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(mEditSessionTime.getWindowToken(),0);
}
int color=getResources().getColor((isChecked) ? R.color.studyoptions_foreground : R.color.studyoptions_foreground_deactivated);
mLimitSessionTv1.setTextColor(color);
mLimitSessionTv2.setTextColor(color);
}
}
);
mLimitTagsCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
mLimitTagNewActiveCheckBox.setEnabled(isChecked);
mLimitTagNewInactiveCheckBox.setEnabled(isChecked);
mLimitTagRevActiveCheckBox.setEnabled(isChecked);
mLimitTagRevInactiveCheckBox.setEnabled(isChecked);
if (!isChecked) {
mLimitTagNewActiveCheckBox.setChecked(false);
mLimitTagNewInactiveCheckBox.setChecked(false);
mLimitTagRevActiveCheckBox.setChecked(false);
mLimitTagRevInactiveCheckBox.setChecked(false);
}
int color=getResources().getColor((isChecked) ? R.color.studyoptions_foreground : R.color.studyoptions_foreground_deactivated);
mLimitTagTv1.setTextColor(color);
mLimitTagTv2.setTextColor(color);
mLimitTagTv3.setTextColor(color);
mLimitTagTv4.setTextColor(color);
mLimitTagTv5.setTextColor(color);
mLimitTagTv6.setTextColor(color);
}
}
);
mLimitTagNewActiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
mLimitTagNewInactiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
mLimitTagRevActiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
mLimitTagRevInactiveCheckBox.setOnCheckedChangeListener(mLimitTagCheckedChangeListener);
builder.setTitle(R.string.studyoptions_limit_dialog_title);
builder.setPositiveButton(R.string.studyoptions_more_save,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Deck deck=AnkiDroidApp.deck();
boolean changed=false;
String textTime=mEditSessionTime.getText().toString();
if (!textTime.equals(Long.toString(deck.getSessionTimeLimit() / 60))) {
if (textTime.equals("")) {
deck.setSessionTimeLimit(0);
}
 else if (isValidLong(textTime)) {
deck.setSessionTimeLimit(Long.parseLong(textTime) * 60);
}
}
String textReps=mEditSessionQuestions.getText().toString();
if (!textReps.equals(Long.toString(deck.getSessionRepLimit()))) {
if (textReps.equals("")) {
deck.setSessionRepLimit(0);
}
 else if (isValidLong(textReps)) {
deck.setSessionRepLimit(Long.parseLong(textReps));
}
changed=true;
}
if (!deck.getVar("newActive").equals(mLimitNewActive)) {
deck.setVar("newActive",mLimitNewActive);
changed=true;
}
if (!deck.getVar("newInactive").equals(mLimitNewInactive)) {
deck.setVar("newInactive",mLimitNewInactive);
changed=true;
}
if (!deck.getVar("revActive").equals(mLimitRevActive)) {
deck.setVar("revActive",mLimitRevActive);
changed=true;
}
if (!deck.getVar("revInactive").equals(mLimitRevInactive)) {
deck.setVar("revInactive",mLimitRevInactive);
changed=true;
}
if (changed) {
resetAndUpdateValuesFromDeck();
}
mToggleLimit.setChecked((mSessionLimitCheckBox.isChecked() && !(textTime.length() == 0 && textReps.length() == 0)) || (mLimitTagsCheckBox.isChecked() && (mLimitTagNewActiveCheckBox.isChecked() || mLimitTagNewInactiveCheckBox.isChecked() || mLimitTagRevActiveCheckBox.isChecked()|| mLimitTagRevInactiveCheckBox.isChecked())));
}
}
);
builder.setView(contentView,true);
dialog=builder.create();
break;
case DIALOG_TAGS:
builder.setTitle(R.string.studyoptions_limit_select_tags);
builder.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String readableText=mSelectedTags.toString();
updateLimitTagText(mSelectedLimitTagText,readableText.substring(1,readableText.length() - 1));
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
updateLimitTagText(mSelectedLimitTagText,getSelectedTags(mSelectedLimitTagText));
}
}
);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
updateLimitTagText(mSelectedLimitTagText,getSelectedTags(mSelectedLimitTagText));
}
}
);
dialog=builder.create();
break;
case DIALOG_CRAM:
builder.setTitle(R.string.studyoptions_cram_dialog_title);
builder.setPositiveButton(res.getString(R.string.begin_cram),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mToggleCram.setChecked(true);
onCram();
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
Spinner spinner=new Spinner(this);
ArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.cram_review_order_labels,android.R.layout.simple_spinner_item);
adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
spinner.setAdapter(adapter);
spinner.setSelection(0);
spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
cramOrder=cramOrderList[position];
}
@Override public void onNothingSelected(AdapterView<?> arg0){
return;
}
}
);
builder.setView(spinner,false,true);
dialog=builder.create();
break;
case DIALOG_WELCOME:
builder.setTitle(R.string.studyoptions_welcome_title);
WebView view=new WebView(this);
view.setBackgroundColor(res.getColor(Themes.getDialogBackgroundColor()));
view.loadDataWithBaseURL("","<html><body text=\"#FFFFFF\" link=\"#E37068\" alink=\"#E37068\" vlink=\"#E37068\">" + res.getString(R.string.studyoptions_welcome_dialog).replace("\n","<br>") + "</body></html>","text/html","UTF-8","");
builder.setView(view,true);
builder.setCancelable(true);
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
PrefSettings.getSharedPrefs(StudyOptions.this.getBaseContext()).edit().putBoolean("firstStart",false).commit();
mNewVersionAlert=null;
loadSampleDeck();
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
PrefSettings.getSharedPrefs(StudyOptions.this.getBaseContext()).edit().putBoolean("firstStart",false).commit();
if (mNewVersionAlert != null) {
mNewVersionAlert.show();
}
 else {
BroadcastMessages.checkForNewMessages(StudyOptions.this);
}
}
}
);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
if (mNewVersionAlert != null) {
mNewVersionAlert.show();
}
 else {
BroadcastMessages.checkForNewMessages(StudyOptions.this);
}
}
}
);
dialog=builder.create();
mWelcomeAlert=dialog;
break;
default :
dialog=null;
}
return dialog;
}
