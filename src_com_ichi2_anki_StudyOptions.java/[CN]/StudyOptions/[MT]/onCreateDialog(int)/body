{
  StyledDialog dialog=null;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_SYNC_LOG:
    builder.setTitle(getResources().getString(R.string.sync_log_title));
  builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_BACKUP_NO_SPACE_LEFT:
builder.setTitle(getResources().getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_BACKUP_ERROR:
builder.setTitle(getResources().getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(getResources().getString(R.string.backup_deck_error));
builder.setPositiveButton(getResources().getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_NO_CONNECTION:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_needed));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
builder.setPositiveButton(res.getString(R.string.log_in),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(StudyOptions.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(StudyOptions.this,ActivityTransitionAnimation.LEFT);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SWAP_QA:
builder.setTitle(getResources().getString(R.string.swap_qa_title));
builder.setMessage(getResources().getString(R.string.swap_qa_text));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.yes),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mSwapQA.setChecked(true);
mSwap=true;
savePreferences("swapqa");
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_CONNECTION_ERROR:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_error_message));
builder.setPositiveButton(res.getString(R.string.retry),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
syncDeck(null);
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SYNC_CONFLICT_RESOLUTION:
builder.setTitle(res.getString(R.string.sync_conflict_title));
builder.setIcon(android.R.drawable.ic_input_get);
builder.setMessage(res.getString(R.string.sync_conflict_message));
builder.setPositiveButton(res.getString(R.string.sync_conflict_local),mSyncConflictResolutionListener);
builder.setNeutralButton(res.getString(R.string.sync_conflict_remote),mSyncConflictResolutionListener);
builder.setNegativeButton(res.getString(R.string.sync_conflict_cancel),mSyncConflictResolutionListener);
builder.setCancelable(false);
dialog=builder.create();
break;
case DIALOG_STATISTIC_PERIOD:
builder.setTitle(res.getString(R.string.statistics_period_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_period_labels),0,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_STATISTIC_TYPE:
builder.setTitle(res.getString(R.string.statistics_type_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_type_labels),Statistics.TYPE_DUE,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_DECK_NOT_LOADED:
builder.setTitle(res.getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.retry),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
displayProgressDialogAndLoadDeck();
}
}
);
builder.setNegativeButton(res.getString(R.string.backup_restore),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Resources res=getResources();
mBackups=BackupManager.getDeckBackups(new File(mDeckFilename));
if (mBackups.length == 0) {
StyledDialog.Builder builder=new StyledDialog.Builder(StudyOptions.this);
builder.setTitle(res.getString(R.string.backup_manager_title)).setIcon(android.R.drawable.ic_dialog_alert).setMessage(res.getString(R.string.backup_restore_no_backups)).setPositiveButton(res.getString(R.string.ok),new Dialog.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).setCancelable(true).setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).show();
}
 else {
String[] dates=new String[mBackups.length];
for (int i=0; i < mBackups.length; i++) {
dates[i]=mBackups[i].getName().replaceAll(".*-(\\d{4}-\\d{2}-\\d{2}).anki","$1");
}
StyledDialog.Builder builder=new StyledDialog.Builder(StudyOptions.this);
builder.setTitle(res.getString(R.string.backup_restore_select_title)).setIcon(android.R.drawable.ic_input_get).setSingleChoiceItems(dates,dates.length,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
dialog.dismiss();
}
}
).setCancelable(true).setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_DECK_NOT_LOADED);
}
}
).show();
}
}
}
);
builder.setNeutralButton(res.getString(R.string.backup_repair_deck),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK,mRepairDeckHandler,new DeckTask.TaskData(mDeckFilename));
}
}
);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_MORE:
View contentViewMore=getLayoutInflater().inflate(R.layout.studyoptions_more_dialog_contents,null);
mSpinnerNewCardOrder=(Spinner)contentViewMore.findViewById(R.id.studyoptions_new_card_order);
mSpinnerNewCardSchedule=(Spinner)contentViewMore.findViewById(R.id.studyoptions_new_card_schedule);
mSpinnerRevCardOrder=(Spinner)contentViewMore.findViewById(R.id.studyoptions_rev_card_order);
mSpinnerFailCardOption=(Spinner)contentViewMore.findViewById(R.id.studyoptions_fail_card_option);
mEditMaxFailCard=(EditText)contentViewMore.findViewById(R.id.studyoptions_max_fail_card);
mEditNewPerDay=(EditText)contentViewMore.findViewById(R.id.studyoptions_new_cards_per_day);
mCheckBoxPerDay=(CheckBox)contentViewMore.findViewById(R.id.studyoptions_per_day);
mCheckBoxSuspendLeeches=(CheckBox)contentViewMore.findViewById(R.id.studyoptions_suspend_leeches);
builder.setTitle(R.string.studyoptions_more_dialog_title);
builder.setPositiveButton(R.string.studyoptions_more_save,mDialogSaveListener);
builder.setView(contentViewMore,true);
dialog=builder.create();
break;
case DIALOG_LIMIT_SESSION:
break;
case DIALOG_TAGS:
builder.setTitle(R.string.studyoptions_limit_select_tags);
builder.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String readableText=mSelectedTags.toString();
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
}
}
);
dialog=builder.create();
break;
case DIALOG_CRAM:
builder.setTitle(R.string.studyoptions_cram_dialog_title);
builder.setPositiveButton(res.getString(R.string.begin_cram),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mToggleCram.setChecked(true);
onCram();
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
Spinner spinner=new Spinner(this);
ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(this,R.array.cram_review_order_labels,android.R.layout.simple_spinner_item);
adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
spinner.setAdapter(adapter);
spinner.setSelection(0);
spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
cramOrder=cramOrderList[position];
}
@Override public void onNothingSelected(AdapterView<?> arg0){
return;
}
}
);
builder.setView(spinner,false,true);
dialog=builder.create();
break;
case DIALOG_DB_ERROR:
builder.setTitle(R.string.answering_error_title);
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(R.string.answering_error_message);
builder.setPositiveButton(res.getString(R.string.backup_repair_deck),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK,mRepairDeckHandler,new DeckTask.TaskData(mDeckFilename != null ? mDeckFilename : mRepairFileName));
}
}
);
builder.setNeutralButton(res.getString(R.string.answering_error_report),new OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mShowRepairDialog=true;
Intent i=new Intent(StudyOptions.this,Feedback.class);
dialog.dismiss();
startActivityForResult(i,REPORT_ERROR);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(StudyOptions.this,ActivityTransitionAnimation.FADE);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.close),null);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_SELECT_HELP:
builder.setTitle(res.getString(R.string.help_title));
builder.setItems(new String[]{res.getString(R.string.help_tutorial),res.getString(R.string.help_online),res.getString(R.string.help_faq)},new OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
if (arg1 == 0) {
loadSampleDeck();
}
 else {
if (Utils.isIntentAvailable(StudyOptions.this,"android.intent.action.VIEW")) {
Intent intent=new Intent("android.intent.action.VIEW",Uri.parse(getResources().getString(arg1 == 0 ? R.string.link_help : R.string.link_faq)));
startActivity(intent);
}
 else {
startActivity(new Intent(StudyOptions.this,About.class));
}
}
}
}
);
dialog=builder.create();
break;
default :
dialog=null;
}
dialog.setOwnerActivity(StudyOptions.this);
return dialog;
}
