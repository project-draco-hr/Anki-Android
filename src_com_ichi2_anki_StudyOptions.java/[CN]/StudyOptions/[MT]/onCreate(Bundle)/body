{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  Log.i(AnkiDroidApp.TAG,"StudyOptions - OnCreate()");
  if (hasErrorFiles()) {
    Intent i=new Intent(this,Feedback.class);
    startActivityForResult(i,REPORT_ERROR);
  }
  SharedPreferences preferences=restorePreferences();
  BackupManager.initBackup();
  registerExternalStorageListener();
  activeCramTags=new HashSet<String>();
  mSelectedTags=new HashSet<String>();
  initAllContentViews();
  Intent intent=getIntent();
  if (Intent.ACTION_VIEW.equalsIgnoreCase(intent.getAction()) && intent.getDataString() != null) {
    mDeckFilename=Uri.parse(intent.getDataString()).getPath();
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from VIEW intent: " + mDeckFilename);
  }
 else   if (Intent.ACTION_MAIN.equalsIgnoreCase(intent.getAction()) && intent.hasExtra(EXTRA_DECK)) {
    mDeckFilename=intent.getStringExtra(EXTRA_DECK);
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from MAIN intent: " + mDeckFilename);
  }
 else   if (savedInstanceState != null) {
    mDeckFilename=savedInstanceState.getString("deckFilename");
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from savedInstanceState: " + mDeckFilename);
  }
 else {
    mDeckFilename=preferences.getString("deckFilename",null);
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from preferences: " + mDeckFilename);
  }
  if (!mSdCardAvailable) {
    showContentView(CONTENT_NO_EXTERNAL_STORAGE);
  }
 else {
    if (mDeckFilename == null || !new File(mDeckFilename).exists()) {
      showContentView(CONTENT_NO_DECK);
    }
 else {
      if ((showDeckPickerOnStartup() || getIntent().getBooleanExtra("startDeckpicker",false)) && (!hasErrorFiles())) {
        openDeckPicker();
      }
 else {
        loadPreviousDeck();
      }
    }
  }
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
  if (getApiLevel() >= 11) {
    mCompat=new CompatV11();
  }
 else {
    mCompat=new CompatV3();
  }
  if (AnkiDroidApp.zeemoteController() == null)   AnkiDroidApp.setZeemoteController(new Controller(Controller.CONTROLLER_1));
  controllerUi=new ControllerAndroidUi(this,AnkiDroidApp.zeemoteController());
  com.zeemote.util.Strings zstrings=com.zeemote.util.Strings.getStrings();
  if (zstrings.isLocaleAvailable(mLocale)) {
    Log.d("Zeemote","Zeemote locale " + mLocale + " is available. Setting.");
    zstrings.setLocale(mLocale);
  }
 else {
    Log.d("Zeemote","Zeemote locale " + mLocale + " is not available.");
  }
  if (mZeemoteEnabled) {
    if (!AnkiDroidApp.zeemoteController().isConnected()) {
      Log.d("Zeemote","starting connection in onCreate");
      controllerUi.startConnectionProcess();
    }
  }
}
