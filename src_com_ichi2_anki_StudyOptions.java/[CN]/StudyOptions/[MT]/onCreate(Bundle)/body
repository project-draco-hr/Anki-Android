{
  if (!isTaskRoot()) {
    Log.i(AnkiDroidApp.TAG,"StudyOptions - onCreate: Detected multiple instance of this activity, closing it and return to root activity");
    Intent reloadIntent=new Intent(StudyOptions.this,StudyOptions.class);
    reloadIntent.setAction(Intent.ACTION_MAIN);
    reloadIntent.putExtras(getIntent().getExtras());
    reloadIntent.addCategory(Intent.CATEGORY_LAUNCHER);
    reloadIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    finish();
    startActivityIfNeeded(reloadIntent,0);
  }
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  Log.i(AnkiDroidApp.TAG,"StudyOptions - OnCreate()");
  Intent intent=getIntent();
  mStartedByBigWidget=intent.getIntExtra(EXTRA_START,EXTRA_START_NOTHING);
  if (hasErrorFiles() && mStartedByBigWidget == EXTRA_START_NOTHING) {
    Intent i=new Intent(this,Feedback.class);
    startActivityForResult(i,REPORT_ERROR);
  }
  SharedPreferences preferences=restorePreferences();
  BackupManager.initBackup();
  registerExternalStorageListener();
  activeCramTags=new HashSet<String>();
  mSelectedTags=new HashSet<String>();
  initAllContentViews();
  if (Intent.ACTION_VIEW.equalsIgnoreCase(intent.getAction()) && intent.getDataString() != null) {
    mDeckFilename=Uri.parse(intent.getDataString()).getPath();
    Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from VIEW intent: " + mDeckFilename);
  }
 else   if (Intent.ACTION_MAIN.equalsIgnoreCase(intent.getAction()) && mStartedByBigWidget != EXTRA_START_NOTHING) {
switch (intent.getIntExtra(EXTRA_START,EXTRA_START_NOTHING)) {
case EXTRA_START_REVIEWER:
      openReviewer();
    break;
case EXTRA_START_DECKPICKER:
  openDeckPicker(false);
break;
case EXTRA_DB_ERROR:
mRepairFileName=intent.getStringExtra(EXTRA_DECK);
onActivityResult(REQUEST_REVIEW,Reviewer.RESULT_ANSWERING_ERROR,null);
break;
}
}
 else if (Intent.ACTION_MAIN.equalsIgnoreCase(intent.getAction()) && intent.hasExtra(EXTRA_DECK)) {
mDeckFilename=intent.getStringExtra(EXTRA_DECK);
Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from MAIN intent: " + mDeckFilename);
}
 else if (savedInstanceState != null) {
mDeckFilename=savedInstanceState.getString("deckFilename");
Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from savedInstanceState: " + mDeckFilename);
}
 else {
mDeckFilename=preferences.getString("deckFilename",null);
Log.i(AnkiDroidApp.TAG,"onCreate - deckFilename from preferences: " + mDeckFilename);
}
if (!mSdCardAvailable) {
showContentView(CONTENT_NO_EXTERNAL_STORAGE);
}
 else {
if (mStartedByBigWidget == EXTRA_START_DECKPICKER || mStartedByBigWidget == EXTRA_START_REVIEWER) {
showContentView(CONTENT_STUDY_OPTIONS);
showDeckInformation(false);
}
 else if (mDeckFilename == null || !new File(mDeckFilename).exists()) {
showContentView(CONTENT_NO_DECK);
}
 else if (mStartedByBigWidget == EXTRA_START_NOTHING) {
if ((showDeckPickerOnStartup()) && (!hasErrorFiles())) {
openDeckPicker();
}
 else {
loadPreviousDeck();
}
}
}
gestureDetector=new GestureDetector(new MyGestureDetector());
gestureListener=new View.OnTouchListener(){
public boolean onTouch(View v,MotionEvent event){
if (gestureDetector.onTouchEvent(event)) {
return true;
}
return false;
}
}
;
mCompat=Utils.createCompat();
if (AnkiDroidApp.zeemoteController() == null) AnkiDroidApp.setZeemoteController(new Controller(Controller.CONTROLLER_1));
controllerUi=new ControllerAndroidUi(this,AnkiDroidApp.zeemoteController());
com.zeemote.util.Strings zstrings=com.zeemote.util.Strings.getStrings();
if (zstrings.isLocaleAvailable(mLocale)) {
Log.d("Zeemote","Zeemote locale " + mLocale + " is available. Setting.");
zstrings.setLocale(mLocale);
}
 else {
Log.d("Zeemote","Zeemote locale " + mLocale + " is not available.");
}
if (mZeemoteEnabled) {
if (!AnkiDroidApp.zeemoteController().isConnected()) {
Log.d("Zeemote","starting connection in onCreate");
controllerUi.startConnectionProcess();
}
}
}
