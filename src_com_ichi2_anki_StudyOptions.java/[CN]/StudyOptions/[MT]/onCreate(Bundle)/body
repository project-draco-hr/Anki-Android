{
  super.onCreate(savedInstanceState);
  if (hasErrorFiles()) {
    Intent i=new Intent(this,Feedback.class);
    startActivityForResult(i,REPORT_ERROR);
  }
  SharedPreferences preferences=restorePreferences();
  registerExternalStorageListener();
  activeCramTags=new HashSet<String>();
  mSelectedTags=new HashSet<String>();
  initAllContentViews();
  initAllDialogs();
  if ((AnkiDroidApp.deck() != null) && (AnkiDroidApp.deck().hasFinishScheduler())) {
    AnkiDroidApp.deck().finishScheduler();
  }
  Intent intent=getIntent();
  if (Intent.ACTION_VIEW.equalsIgnoreCase(intent.getAction()) && intent.getDataString() != null) {
    mDeckFilename=Uri.parse(intent.getDataString()).getPath();
  }
 else   if (Intent.ACTION_MAIN.equalsIgnoreCase(intent.getAction()) && intent.hasExtra(EXTRA_DECK)) {
    mDeckFilename=intent.getStringExtra(EXTRA_DECK);
  }
 else   if (savedInstanceState != null) {
    mDeckFilename=savedInstanceState.getString("deckFilename");
  }
 else {
    mDeckFilename=preferences.getString("deckFilename",null);
  }
  if (!mSdCardAvailable) {
    showContentView(CONTENT_NO_EXTERNAL_STORAGE);
  }
 else {
    if (mDeckFilename == null || !new File(mDeckFilename).exists()) {
      showContentView(CONTENT_NO_DECK);
    }
 else {
      if (showDeckPickerOnStartup() && !hasErrorFiles()) {
        openDeckPicker();
      }
 else {
        loadPreviousDeck();
      }
    }
  }
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
}
