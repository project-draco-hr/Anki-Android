{
  Resources res=getResources();
  if (allTags == null) {
    allTags=AnkiDroidApp.deck().allTags_();
    Log.i(AnkiDroidApp.TAG,"all tags: " + Arrays.toString(allTags));
  }
  mSelectedTags.clear();
  List<String> selectedList=Arrays.asList(Utils.parseTags(getSelectedTags(mSelectedLimitTagText)));
  int length=allTags.length;
  boolean[] checked=new boolean[length];
  for (int i=0; i < length; i++) {
    String tag=allTags[i];
    if (selectedList.contains(tag)) {
      checked[i]=true;
      mSelectedTags.add(tag);
    }
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.studyoptions_limit_select_tags);
  builder.setMultiChoiceItems(allTags,checked,new DialogInterface.OnMultiChoiceClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton,    boolean isChecked){
      String tag=allTags[whichButton];
      if (!isChecked) {
        Log.i(AnkiDroidApp.TAG,"unchecked tag: " + tag);
        mSelectedTags.remove(tag);
      }
 else {
        Log.i(AnkiDroidApp.TAG,"checked tag: " + tag);
        mSelectedTags.add(tag);
      }
    }
  }
);
  builder.setPositiveButton(res.getString(R.string.select),new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      String readableText=mSelectedTags.toString();
      updateLimitTagText(mSelectedLimitTagText,readableText.substring(1,readableText.length() - 1));
    }
  }
);
  builder.setNegativeButton(res.getString(R.string.cancel),new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      updateLimitTagText(mSelectedLimitTagText,getSelectedTags(mSelectedLimitTagText));
    }
  }
);
  builder.setOnCancelListener(new OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      updateLimitTagText(mSelectedLimitTagText,getSelectedTags(mSelectedLimitTagText));
    }
  }
);
  mTagsDialog=builder.create();
}
