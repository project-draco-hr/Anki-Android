{
  if (mDb.queryScalar("select 1 from cards where nid not in (select id from notes) limit 1") > 0) {
    return false;
  }
  boolean badNotes=mDb.queryScalar(String.format(Locale.US,"select 1 from notes where id not in (select distinct nid from cards) " + "or mid not in %s limit 1",Utils.ids2str(mModels.ids()))) > 0;
  if (badNotes) {
    return false;
  }
  try {
    for (    JSONObject m : mModels.all()) {
      if (m.getInt("type") != Consts.MODEL_STD) {
        continue;
      }
      JSONArray tmpls=m.getJSONArray("tmpls");
      int[] ords=new int[tmpls.length()];
      for (int t=0; t < tmpls.length(); t++) {
        ords[t]=tmpls.getJSONObject(t).getInt("ord");
      }
      boolean badOrd=mDb.queryScalar(String.format(Locale.US,"select 1 from cards where ord not in %s and nid in ( " + "select id from notes where mid = %d) limit 1",Utils.ids2str(ords),m.getLong("id"))) > 0;
      if (badOrd) {
        return false;
      }
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  return true;
}
