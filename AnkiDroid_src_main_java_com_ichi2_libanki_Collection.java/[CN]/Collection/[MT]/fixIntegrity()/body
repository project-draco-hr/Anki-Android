{
  File file=new File(mPath);
  ArrayList<String> problems=new ArrayList<String>();
  long oldSize=file.length();
  try {
    mDb.getDatabase().beginTransaction();
    try {
      save();
      if (!mDb.queryString("PRAGMA integrity_check").equals("ok")) {
        return -1;
      }
      ArrayList<Long> ids=mDb.queryColumn(Long.class,"SELECT id FROM notes WHERE mid NOT IN " + Utils.ids2str(mModels.ids()),0);
      if (ids.size() != 0) {
        problems.add("Deleted " + ids.size() + " note(s) with missing note type.");
        _remNotes(Utils.arrayList2array(ids));
      }
      for (      JSONObject m : mModels.all()) {
        if (m.getInt("type") == Consts.MODEL_STD) {
          ArrayList<Integer> ords=new ArrayList<Integer>();
          JSONArray tmpls=m.getJSONArray("tmpls");
          for (int t=0; t < tmpls.length(); t++) {
            ords.add(tmpls.getJSONObject(t).getInt("ord"));
          }
          ids=mDb.queryColumn(Long.class,"SELECT id FROM cards WHERE ord NOT IN " + Utils.ids2str(ords) + " AND nid IN ( "+ "SELECT id FROM notes WHERE mid = "+ m.getLong("id")+ ")",0);
          if (ids.size() > 0) {
            problems.add("Deleted " + ids.size() + " card(s) with missing template.");
            remCards(Utils.arrayList2array(ids));
          }
        }
        ids=new ArrayList<Long>();
        Cursor cur=null;
        try {
          cur=mDb.getDatabase().rawQuery("select id, flds from notes where mid = " + m.getLong("id"),null);
          while (cur.moveToNext()) {
            String flds=cur.getString(1);
            long id=cur.getLong(0);
            int fldsCount=0;
            for (int i=0; i < flds.length(); i++) {
              if (flds.charAt(i) == 0x1f) {
                fldsCount++;
              }
            }
            if (fldsCount + 1 != m.getJSONArray("flds").length()) {
              ids.add(id);
            }
          }
          if (ids.size() > 0) {
            problems.add("Deleted " + ids.size() + " note(s) with wrong field count.");
            _remNotes(Utils.arrayList2array(ids));
          }
        }
  finally {
          if (cur != null && !cur.isClosed()) {
            cur.close();
          }
        }
      }
      ids=mDb.queryColumn(Long.class,"SELECT id FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)",0);
      if (ids.size() != 0) {
        problems.add("Deleted " + ids.size() + " note(s) with missing no cards.");
        _remNotes(Utils.arrayList2array(ids));
      }
      ids=mDb.queryColumn(Long.class,"SELECT id FROM cards WHERE nid NOT IN (SELECT id FROM notes)",0);
      if (ids.size() != 0) {
        problems.add("Deleted " + ids.size() + " card(s) with missing note.");
        remCards(Utils.arrayList2array(ids));
      }
      ids=mDb.queryColumn(Long.class,"select id from cards where odue > 0 and (type=1 or queue=2) and not odid",0);
      if (ids.size() != 0) {
        problems.add("Fixed " + ids.size() + " card(s) with invalid properties.");
        mDb.execute("update cards set odue=0 where id in " + Utils.ids2str(ids));
      }
      ArrayList<Long> dids=new ArrayList<Long>();
      for (      long id : mDecks.allIds()) {
        if (!mDecks.isDyn(id)) {
          dids.add(id);
        }
      }
      ids=mDb.queryColumn(Long.class,"select id from cards where odid > 0 and did in " + Utils.ids2str(dids),0);
      if (ids.size() != 0) {
        problems.add("Fixed " + ids.size() + " card(s) with invalid properties.");
        mDb.execute("update cards set odid=0, odue=0 where id in " + Utils.ids2str(ids));
      }
      mTags.registerNotes();
      for (      JSONObject m : mModels.all()) {
        updateFieldCache(Utils.arrayList2array(mModels.nids(m)));
      }
      mDb.execute("UPDATE cards SET due = 1000000, mod = " + Utils.intNow() + ", usn = "+ usn()+ " WHERE due > 1000000 AND queue = 0");
      mConf.put("nextPos",mDb.queryScalar("SELECT max(due) + 1 FROM cards WHERE type = 0",false));
      ids=mDb.queryColumn(Long.class,"SELECT id FROM cards WHERE queue = 2 AND due > 10000",0);
      if (ids.size() > 0) {
        problems.add("Reviews had incorrect due date.");
        mDb.execute("UPDATE cards SET due = 0, mod = " + Utils.intNow() + ", usn = "+ usn()+ " WHERE id IN "+ Utils.ids2str(Utils.arrayList2array(ids)));
      }
      mDb.getDatabase().setTransactionSuccessful();
      int ixs=mDb.queryScalar("select count(name) from sqlite_master where type = 'index'");
      if (ixs < 7) {
        problems.add("Indices were missing.");
        Storage.addIndices(mDb);
      }
    }
 catch (    JSONException e) {
      throw new RuntimeException(e);
    }
 finally {
      mDb.getDatabase().endTransaction();
    }
  }
 catch (  RuntimeException e) {
    Timber.e(e,"doInBackgroundCheckDatabase - RuntimeException on marking card");
    AnkiDroidApp.sendExceptionReport(e,"doInBackgroundCheckDatabase");
    return -1;
  }
  optimize();
  file=new File(mPath);
  long newSize=file.length();
  if (problems.size() > 0) {
    modSchemaNoCheck();
  }
  return (long)((oldSize - newSize) / 1024);
}
