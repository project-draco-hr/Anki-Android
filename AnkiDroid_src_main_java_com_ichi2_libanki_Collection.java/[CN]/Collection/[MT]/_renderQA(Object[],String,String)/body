{
  String[] flist=Utils.splitFields((String)data[6]);
  Map<String,String> fields=new HashMap<String,String>();
  JSONObject model=mModels.get((Long)data[2]);
  Map<String,Pair<Integer,JSONObject>> fmap=mModels.fieldMap(model);
  for (  String name : fmap.keySet()) {
    fields.put(name,flist[fmap.get(name).first]);
  }
  try {
    int cardNum=((Integer)data[4]) + 1;
    fields.put("Tags",((String)data[5]).trim());
    fields.put("Type",(String)model.get("name"));
    fields.put("Deck",mDecks.name((Long)data[3]));
    String[] parents=fields.get("Deck").split("::");
    fields.put("Subdeck",parents[parents.length - 1]);
    JSONObject template;
    if (model.getInt("type") == Consts.MODEL_STD) {
      template=model.getJSONArray("tmpls").getJSONObject((Integer)data[4]);
    }
 else {
      template=model.getJSONArray("tmpls").getJSONObject(0);
    }
    fields.put("Card",template.getString("name"));
    fields.put(String.format(Locale.US,"c%d",cardNum),"1");
    HashMap<String,String> d=new HashMap<String,String>();
    d.put("id",Long.toString((Long)data[0]));
    qfmt=TextUtils.isEmpty(qfmt) ? template.getString("qfmt") : qfmt;
    afmt=TextUtils.isEmpty(afmt) ? template.getString("afmt") : afmt;
    for (    Pair<String,String> p : new Pair[]{new Pair<String,String>("q",qfmt),new Pair<String,String>("a",afmt)}) {
      String type=p.first;
      String format=p.second;
      if (type.equals("q")) {
        format=fClozePatternQ.matcher(format).replaceAll(String.format(Locale.US,"{{$1cq-%d:",cardNum));
        format=fClozeTagStart.matcher(format).replaceAll(String.format(Locale.US,"<%%cq:%d:",cardNum));
      }
 else {
        format=fClozePatternA.matcher(format).replaceAll(String.format(Locale.US,"{{$1ca-%d:",cardNum));
        format=fClozeTagStart.matcher(format).replaceAll(String.format(Locale.US,"<%%ca:%d:",cardNum));
        fields.put("FrontSide",d.get("q"));
      }
      fields=(Map<String,String>)Hooks.runFilter("mungeFields",fields,model,data,this);
      String html=new Template(format,fields).render();
      d.put(type,(String)Hooks.runFilter("mungeQA",html,type,fields,model,data,this));
      if (type.equals("q") && model.getInt("type") == Consts.MODEL_CLOZE) {
        if (getModels()._availClozeOrds(model,(String)data[6],false).size() == 0) {
          String link=String.format("<a href=%s#cloze>%s</a>",Consts.HELP_SITE,"help");
          d.put("q",String.format("Please edit this note and add some cloze deletions. (%s)",link));
        }
      }
    }
    return d;
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
