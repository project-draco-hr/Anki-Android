{
  super.onPostExecute(result);
  HashMap<String,Object> results=(HashMap<String,Object>)result.result;
  Deck deck=(Deck)results.get("deck");
  if (deck != null) {
    deck.closeDeck();
  }
  SharedDeckDownload download=(SharedDeckDownload)result.data[0];
  SharedPreferences pref=PrefSettings.getSharedPrefs(getBaseContext());
  Editor editor=pref.edit();
  Log.i(TAG,"Finished deck " + download.getTitle() + " "+ result.success);
  if (result.success) {
    editor.putLong("numUpdatedCards:" + mDestination + "/tmp/"+ download.getTitle()+ ".anki.updating",0);
    editor.commit();
    new File(mDestination + "/tmp/" + download.getTitle()+ ".anki.updating").renameTo(new File(mDestination + "/" + download.getTitle()+ ".anki"));
    new File(mDestination + "/tmp/" + download.getTitle()+ ".media/").renameTo(new File(mDestination + "/" + download.getTitle()+ ".media/"));
    mSharedDeckDownloads.remove(download);
    showNotification(download.getTitle());
  }
 else {
    if (download.getStatus() == Download.CANCELLED) {
      try {
        new File(mDestination + "/tmp/" + download.getTitle()+ ".anki.updating").delete();
        File mediaFolder=new File(mDestination + "/tmp/" + download.getTitle()+ ".media/");
        for (        File f : mediaFolder.listFiles()) {
          f.delete();
        }
        mediaFolder.delete();
      }
 catch (      SecurityException e) {
        Log.e(TAG,"SecurityException = " + e.getMessage());
        e.printStackTrace();
      }
      editor.remove("numUpdatedCards:" + mDestination + "/tmp/"+ download.getTitle()+ ".anki.updating");
      editor.remove("paused:" + mDestination + "/tmp/"+ download.getTitle()+ ".anki.updating");
      editor.commit();
      mSharedDeckDownloads.remove(download);
    }
  }
  notifySharedDeckObservers();
  stopIfFinished();
}
