{
  try {
    if (mCol.getMedia().needScan()) {
      mCon.publishProgress(R.string.sync_media_find);
      mCol.log("findChanges");
      mCol.getMedia().findChanges();
    }
    int lastUsn=mCol.getMedia().lastUsn();
    JSONObject ret=mServer.begin();
    int srvUsn=ret.getInt("usn");
    if ((lastUsn == srvUsn) && !(mCol.getMedia().haveDirty())) {
      return "noChanges";
    }
    mCol.log("last local usn is " + lastUsn);
    mDownloadCount=0;
    while (true) {
      if (Connection.getIsCancelled()) {
        Timber.i("Sync was cancelled");
        try {
          mServer.finish();
        }
 catch (        UnknownHttpResponseException e) {
        }
        throw new RuntimeException("UserAbortedSync");
      }
      JSONArray data=mServer.mediaChanges(lastUsn);
      mCol.log("mediaChanges resp count: ",data.length());
      if (data.length() == 0) {
        break;
      }
      List<String> need=new ArrayList<>();
      lastUsn=data.getJSONArray(data.length() - 1).getInt(1);
      for (int i=0; i < data.length(); i++) {
        String fname=data.getJSONArray(i).getString(0);
        int rusn=data.getJSONArray(i).getInt(1);
        String rsum=data.getJSONArray(i).optString(2);
        Pair<String,Integer> info=mCol.getMedia().syncInfo(fname);
        String lsum=info.first;
        int ldirty=info.second;
        mCol.log(String.format("check: lsum=%s rsum=%s ldirty=%d rusn=%d fname=%s",TextUtils.isEmpty(lsum) ? "" : lsum.subSequence(0,4),TextUtils.isEmpty(rsum) ? "" : rsum.subSequence(0,4),ldirty,rusn,fname));
        if (!TextUtils.isEmpty(rsum)) {
          if (TextUtils.isEmpty(lsum) || !lsum.equals(rsum)) {
            mCol.log("will fetch");
            need.add(fname);
          }
 else {
            mCol.log("have same already");
          }
          mCol.getMedia().markClean(Collections.singletonList(fname));
        }
 else         if (!TextUtils.isEmpty(lsum)) {
          if (ldirty != 0) {
            mCol.log("delete local");
            mCol.getMedia().syncDelete(fname);
          }
 else {
            mCol.log("conflict; will send");
          }
        }
 else {
          mCol.log("both sides deleted");
          mCol.getMedia().markClean(Collections.singletonList(fname));
        }
      }
      _downloadFiles(need);
      mCol.log("update last usn to " + lastUsn);
      mCol.getMedia().setLastUsn(lastUsn);
    }
    boolean updateConflict=false;
    int toSend=mCol.getMedia().dirtyCount();
    while (true) {
      Pair<File,List<String>> changesZip=mCol.getMedia().mediaChangesZip();
      File zip=changesZip.first;
      try {
        List<String> fnames=changesZip.second;
        if (fnames.size() == 0) {
          break;
        }
        mCon.publishProgress(String.format(AnkiDroidApp.getAppResources().getString(R.string.sync_media_changes_count),toSend));
        JSONArray changes=mServer.uploadChanges(zip);
        int processedCnt=changes.getInt(0);
        int serverLastUsn=changes.getInt(1);
        mCol.getMedia().markClean(fnames.subList(0,processedCnt));
        mCol.log(String.format("processed %d, serverUsn %d, clientUsn %d",processedCnt,serverLastUsn,lastUsn));
        if (serverLastUsn - processedCnt == lastUsn) {
          mCol.log("lastUsn in sync, updating local");
          lastUsn=serverLastUsn;
          mCol.getMedia().setLastUsn(serverLastUsn);
        }
 else {
          mCol.log("concurrent update, skipping usn update");
          mCol.getMedia().getDb().commit();
          updateConflict=true;
        }
        toSend-=processedCnt;
      }
  finally {
        zip.delete();
      }
    }
    if (updateConflict) {
      mCol.log("restart sync due to concurrent update");
      return sync();
    }
    int lcnt=mCol.getMedia().mediacount();
    String sRet=mServer.mediaSanity(lcnt);
    if (sRet.equals("OK")) {
      return "OK";
    }
 else {
      mCol.getMedia().forceResync();
      return sRet;
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
}
