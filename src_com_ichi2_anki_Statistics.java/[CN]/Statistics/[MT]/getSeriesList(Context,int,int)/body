{
  double[][] seriesList;
  AnkiDb ankiDB=AnkiDatabaseManager.getDatabase(sDeck.getDeckPath());
  ankiDB.getDatabase().beginTransaction();
  try {
switch (type) {
case TYPE_DUE:
      seriesList=new double[3][period];
    seriesList[0]=getCardsByDue(period,false);
  seriesList[1]=getMatureCardsByDue(period,false);
seriesList[2]=getFailedCardsByDue(period,false);
seriesList[0][1]+=seriesList[2][1];
seriesList[1][0]+=seriesList[2][0];
seriesList[1][1]+=seriesList[2][1];
break;
case TYPE_CUMULATIVE_DUE:
seriesList=new double[3][period];
seriesList[0]=getCardsByDue(period,true);
seriesList[1]=getMatureCardsByDue(period,true);
seriesList[2]=getFailedCardsByDue(period,true);
seriesList[1][0]+=seriesList[2][0];
for (int i=1; i < period; i++) {
seriesList[0][i]+=seriesList[2][i];
seriesList[1][i]+=seriesList[2][i];
}
break;
case TYPE_INTERVALS:
seriesList=new double[1][period];
seriesList[0]=getCardsByInterval(period);
break;
case TYPE_REVIEWS:
seriesList=getReviews(period);
break;
case TYPE_REVIEWING_TIME:
seriesList=new double[1][period];
seriesList[0]=getReviewTime(period);
break;
default :
seriesList=null;
}
ankiDB.getDatabase().setTransactionSuccessful();
}
  finally {
ankiDB.getDatabase().endTransaction();
}
return seriesList;
}
