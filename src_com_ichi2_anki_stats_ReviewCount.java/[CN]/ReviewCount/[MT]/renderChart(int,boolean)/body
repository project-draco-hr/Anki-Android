{
  calcStats(type,reps);
  int end=0;
switch (mType) {
case Stats.TYPE_MONTH:
    end=-31;
  break;
case Stats.TYPE_YEAR:
end=-52;
break;
default :
case Stats.TYPE_LIFE:
end=(int)mFirstElement;
break;
}
Log.d(AnkiStatsTaskHandler.TAG,"MType of PreviewCount: " + mType);
int height=mImageView.getMeasuredHeight();
int width=mImageView.getMeasuredWidth();
if (height <= 0 || width <= 0) {
return null;
}
BufferedImage bufferedFrameImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
Graphics2D g=bufferedFrameImage.createGraphics();
Rectangle rect=new Rectangle(width,height);
g.setClip(rect);
g.setColor(Color.BLACK);
float textSize=AnkiStatsTaskHandler.getInstance().getmStandardTextSize() * 0.75f;
g.setFontSize(textSize);
float FontHeigth=g.getFontMetrics().getHeight(true);
mFrameThickness=Math.round(FontHeigth * 4.0f);
PlotSheet plotSheet=new PlotSheet(end - 0.5,0 + 0.5,0,mMaxCards * 1.1);
plotSheet.setFrameThickness(mFrameThickness);
double xTics=ticsCalcX(targetPixelDistanceBetweenTics,rect,end,0);
double yTics=ticsCalcY(targetPixelDistanceBetweenTics,rect,0,mMaxCards);
XAxis xaxis=new XAxis(plotSheet,0,xTics,xTics / 2.0);
YAxis yaxis=new YAxis(plotSheet,0,yTics,yTics / 2.0);
xaxis.setOnFrame();
xaxis.setName(mImageView.getResources().getStringArray(R.array.due_x_axis_title)[mAxisTitles[0]]);
xaxis.setIntegerNumbering(true);
yaxis.setIntegerNumbering(true);
yaxis.setName(mImageView.getResources().getString(mAxisTitles[1]));
yaxis.setOnFrame();
double maxCumulative=0;
BarGraph[] barGraphs=new BarGraph[mSeriesList.length - 1];
double[][][] cumulatives=new double[mSeriesList.length - 1][][];
for (int i=1; i < mSeriesList.length; i++) {
double[][] bars=new double[2][];
bars[0]=mSeriesList[0];
bars[1]=mSeriesList[i];
barGraphs[i - 1]=new BarGraph(plotSheet,barThickness,bars,new Color(mImageView.getResources().getColor(mColors[i - 1])));
barGraphs[i - 1].setFilling(true);
barGraphs[i - 1].setName(mImageView.getResources().getString(mValueLabels[i - 1]));
barGraphs[i - 1].setFillColor(new Color(mImageView.getResources().getColor(mColors[i - 1])));
cumulatives[i - 1]=new double[][]{mCumulative[0],mCumulative[i]};
if (i > 1) {
for (int j=0; j < cumulatives[i - 2][1].length; j++) {
cumulatives[i - 2][1][j]-=cumulatives[i - 1][1][j];
}
if (maxCumulative < cumulatives[i - 2][1][cumulatives[i - 2][1].length - 1]) {
maxCumulative=cumulatives[i - 2][1][cumulatives[i - 2][1].length - 1];
}
}
if (i == mSeriesList.length - 1) {
if (maxCumulative < cumulatives[i - 1][1][cumulatives[i - 1][1].length - 1]) {
maxCumulative=cumulatives[i - 1][1][cumulatives[i - 1][1].length - 1];
}
}
}
PlotSheet hiddenPlotSheet=new PlotSheet(end - 0.5,0 + 0.5,0,maxCumulative * 1.1);
hiddenPlotSheet.setFrameThickness(mFrameThickness);
Lines[] lineses=new Lines[mSeriesList.length - 1];
for (int i=1; i < mSeriesList.length; i++) {
lineses[i - 1]=new Lines(hiddenPlotSheet,cumulatives[i - 1],new Color(mImageView.getResources().getColor(mColors[i - 1])));
lineses[i - 1].setSize(3f);
lineses[i - 1].setShadow(5f,3f,3f,Color.BLACK);
}
double rightYtics=ticsCalc(targetPixelDistanceBetweenTics,rect,maxCumulative * 1.1);
YAxis rightYaxis=new YAxis(hiddenPlotSheet,0,rightYtics,rightYtics / 2.0);
rightYaxis.setIntegerNumbering(true);
rightYaxis.setName(mImageView.getResources().getString(mAxisTitles[2]));
rightYaxis.setOnRightSideFrame();
int red=Color.LIGHT_GRAY.getRed();
int green=Color.LIGHT_GRAY.getGreen();
int blue=Color.LIGHT_GRAY.getBlue();
Color newGridColor=new Color(red,green,blue,222);
XGrid xGrid=new XGrid(plotSheet,0,targetPixelDistanceBetweenTics);
YGrid yGrid=new YGrid(plotSheet,0,targetPixelDistanceBetweenTics);
xGrid.setColor(newGridColor);
yGrid.setColor(newGridColor);
plotSheet.setFontSize(textSize);
for (BarGraph barGraph : barGraphs) {
plotSheet.addDrawable(barGraph);
}
for (Lines lines : lineses) {
plotSheet.addDrawable(lines);
}
plotSheet.addDrawable(xaxis);
plotSheet.addDrawable(yaxis);
plotSheet.addDrawable(rightYaxis);
plotSheet.addDrawable(xGrid);
plotSheet.addDrawable(yGrid);
plotSheet.paint(g);
Bitmap bitmap=bufferedFrameImage.getBitmap();
bitmap.prepareToDraw();
return bitmap;
}
