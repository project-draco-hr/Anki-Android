{
  Log.i(AnkiDroidApp.TAG,"doInBackgroundLoadTutorial");
  Resources res=AnkiDroidApp.getInstance().getBaseContext().getResources();
  Collection col=params[0].getCollection();
  col.getDb().getDatabase().beginTransaction();
  String title=res.getString(R.string.tutorial_title);
  try {
    long did=col.getDecks().id(title);
    if (col.getSched().cardCount("(" + did + ")") > 0) {
      col.remCards(col.getDecks().cids(did));
    }
    while (col.getModels().byName(title) != null) {
      JSONObject m=col.getModels().byName(title);
      if (col.getDb().queryScalar("SELECT id FROM cards WHERE nid IN (SELECT id FROM notes WHERE mid = " + m.getLong("id") + ")",false) == 0) {
        col.getModels().rem(m);
      }
 else {
        m.put("name",title + " (renamed)");
        col.getModels().save(m);
      }
    }
    JSONObject model=col.getModels().addBasicModel(title,false);
    model.put("did",did);
    String[] questions=res.getStringArray(R.array.tutorial_questions);
    String[] answers=res.getStringArray(R.array.tutorial_answers);
    String[] sampleQuestions=res.getStringArray(R.array.tutorial_capitals_questions);
    String[] sampleAnswers=res.getStringArray(R.array.tutorial_capitals_answers);
    int len=Math.min(questions.length,answers.length);
    for (int i=0; i < len + Math.min(sampleQuestions.length,sampleAnswers.length); i++) {
      Note note=col.newNote(model);
      if (note.values().length < 2) {
        return new TaskData(false);
      }
      note.values()[0]=(i < len) ? questions[i] : sampleQuestions[i - len];
      note.values()[1]=(i < len) ? answers[i] : sampleAnswers[i - len];
      note.setDid(did);
      col.addNote(note);
    }
    if (col.getSched().cardCount("(" + did + ")") == 0) {
      col.getDecks().rem(did,true);
      return new TaskData(false);
    }
 else {
      col.save();
      col.getDecks().select(did);
      col.getDb().getDatabase().setTransactionSuccessful();
      return new TaskData(true);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
catch (  JSONException e) {
    throw new RuntimeException(e);
  }
 finally {
    col.getDb().getDatabase().endTransaction();
  }
}
