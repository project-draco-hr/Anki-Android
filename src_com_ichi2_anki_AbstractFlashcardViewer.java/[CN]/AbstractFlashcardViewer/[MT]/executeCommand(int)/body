{
switch (which) {
case GESTURE_NOTHING:
    break;
case GESTURE_SHOW_ANSWER:
  if (!sDisplayAnswer) {
    displayCardAnswer();
  }
break;
case GESTURE_ANSWER_EASE1:
if (sDisplayAnswer) {
answerCard(EASE_FAILED);
}
 else {
displayCardAnswer();
}
break;
case GESTURE_ANSWER_EASE2:
if (sDisplayAnswer) {
answerCard(EASE_HARD);
}
 else {
displayCardAnswer();
}
break;
case GESTURE_ANSWER_EASE3:
if (sDisplayAnswer) {
answerCard(EASE_MID);
}
 else {
displayCardAnswer();
}
break;
case GESTURE_ANSWER_EASE4:
if (sDisplayAnswer) {
answerCard(EASE_EASY);
}
 else {
displayCardAnswer();
}
break;
case GESTURE_ANSWER_RECOMMENDED:
if (sDisplayAnswer) {
answerCard(getRecommendedEase(false));
}
 else {
displayCardAnswer();
}
break;
case GESTURE_ANSWER_BETTER_THAN_RECOMMENDED:
if (sDisplayAnswer) {
answerCard(getRecommendedEase(true));
}
break;
case GESTURE_EXIT:
closeReviewer(RESULT_DEFAULT,false);
break;
case GESTURE_UNDO:
if (getCol().undoAvailable()) {
undo();
}
break;
case GESTURE_EDIT:
editCard();
break;
case GESTURE_MARK:
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_MARK_CARD,mMarkCardHandler,new DeckTask.TaskData(mSched,mCurrentCard,0));
break;
case GESTURE_LOOKUP:
lookUpOrSelectText();
break;
case GESTURE_BURY:
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_DISMISS_NOTE,mDismissCardHandler,new DeckTask.TaskData(mSched,mCurrentCard,0));
break;
case GESTURE_SUSPEND:
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_DISMISS_NOTE,mDismissCardHandler,new DeckTask.TaskData(mSched,mCurrentCard,1));
break;
case GESTURE_DELETE:
showDeleteNoteDialog();
break;
case GESTURE_CLEAR_WHITEBOARD:
if (mPrefWhiteboard) {
mWhiteboard.clear();
}
break;
case GESTURE_PLAY_MEDIA:
playSounds(true);
break;
}
}
