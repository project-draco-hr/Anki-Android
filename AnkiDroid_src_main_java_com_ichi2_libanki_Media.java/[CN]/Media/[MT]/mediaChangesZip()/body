{
  File f=new File(mCol.getPath().replaceFirst("collection\\.anki2$","tmpSyncToServer.zip"));
  Cursor cur=null;
  try {
    ZipOutputStream z=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(f)));
    z.setMethod(ZipOutputStream.DEFLATED);
    List<String> fnames=new ArrayList<String>();
    JSONArray meta=new JSONArray();
    int sz=0;
    byte buffer[]=new byte[2048];
    cur=mDb.getDatabase().rawQuery("select fname, csum from media where dirty=1 limit " + Consts.SYNC_ZIP_COUNT,null);
    for (int c=0; cur.moveToNext(); c++) {
      String fname=cur.getString(0);
      String csum=cur.getString(1);
      fnames.add(fname);
      String normname=CompatHelper.getCompat().nfcNormalized(fname);
      if (!TextUtils.isEmpty(csum)) {
        try {
          mCol.log("+media zip " + fname);
          File file=new File(dir(),fname);
          BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file),2048);
          z.putNextEntry(new ZipEntry(Integer.toString(c)));
          int count=0;
          while ((count=bis.read(buffer,0,2048)) != -1) {
            z.write(buffer,0,count);
          }
          z.closeEntry();
          bis.close();
          meta.put(new JSONArray().put(normname).put(Integer.toString(c)));
          sz+=file.length();
        }
 catch (        FileNotFoundException e) {
          removeFile(fname);
        }
      }
 else {
        mCol.log("-media zip " + fname);
        meta.put(new JSONArray().put(normname).put(""));
      }
      if (sz >= Consts.SYNC_ZIP_SIZE) {
        break;
      }
    }
    z.putNextEntry(new ZipEntry("_meta"));
    z.write(Utils.jsonToString(meta).getBytes());
    z.closeEntry();
    z.close();
    return new Pair<File,List<String>>(f,fnames);
  }
 catch (  IOException e) {
    Timber.e("Failed to create media changes zip",e);
    throw new RuntimeException(e);
  }
 finally {
    if (cur != null) {
      cur.close();
    }
  }
}
