{
  final ContentResolver cr=getContext().getContentResolver();
  final Collection col=CollectionHelper.getInstance().getCol(getContext());
  JSONObject model=Models.addBasicModel(col,BASIC_MODEL_NAME);
  long modelId=model.getLong("id");
  Uri modelUri=ContentUris.withAppendedId(FlashCardsContract.Model.CONTENT_URI,modelId);
  int testIndex=TEST_MODEL_CARDS.length - 1;
  int expectedOrd=model.getJSONArray("tmpls").length();
  ContentValues cv=new ContentValues();
  cv.put(FlashCardsContract.CardTemplate.NAME,TEST_MODEL_CARDS[testIndex]);
  cv.put(FlashCardsContract.CardTemplate.QUESTION_FORMAT,TEST_MODEL_QFMT[testIndex]);
  cv.put(FlashCardsContract.CardTemplate.ANSWER_FORMAT,TEST_MODEL_AFMT[testIndex]);
  cv.put(FlashCardsContract.CardTemplate.BROWSER_QUESTION_FORMAT,TEST_MODEL_QFMT[testIndex]);
  cv.put(FlashCardsContract.CardTemplate.BROWSER_ANSWER_FORMAT,TEST_MODEL_AFMT[testIndex]);
  Uri templatesUri=Uri.withAppendedPath(modelUri,"templates");
  Uri templateUri=cr.insert(templatesUri,cv);
  assertNotNull("Check template uri",templateUri);
  assertEquals("Check template uri ord",expectedOrd,ContentUris.parseId(templateUri));
  JSONObject template=col.getModels().get(modelId).getJSONArray("tmpls").getJSONObject(expectedOrd);
  assertEquals("Check template JSONObject ord",expectedOrd,template.getInt("ord"));
  assertEquals("Check template name",TEST_MODEL_CARDS[testIndex],template.getString("name"));
  assertEquals("Check qfmt",TEST_MODEL_QFMT[testIndex],template.getString("qfmt"));
  assertEquals("Check afmt",TEST_MODEL_AFMT[testIndex],template.getString("afmt"));
  assertEquals("Check bqfmt",TEST_MODEL_QFMT[testIndex],template.getString("bqfmt"));
  assertEquals("Check bafmt",TEST_MODEL_AFMT[testIndex],template.getString("bafmt"));
  col.getModels().rem(model);
}
