{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  View mainView=getLayoutInflater().inflate(R.layout.card_browser,null);
  setContentView(mainView);
  Themes.setContentStyle(mainView,Themes.CALLER_CARDBROWSER);
  mCol=AnkiDroidApp.getCol();
  if (mCol == null) {
    reloadCollection(savedInstanceState);
    return;
  }
  mDeckNames=new HashMap<String,String>();
  for (  long did : mCol.getDecks().allIds()) {
    mDeckNames.put(String.valueOf(did),mCol.getDecks().name(did));
  }
  registerExternalStorageListener();
  Intent i=getIntent();
  mWholeCollection=i.hasExtra("fromDeckpicker") && i.getBooleanExtra("fromDeckpicker",false);
  mBackground=Themes.getCardBrowserBackground();
  SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
  Resources res=getResources();
  mOrderByFields=res.getStringArray(R.array.card_browser_order_labels);
  try {
    mOrder=CARD_ORDER_NONE;
    String colOrder=mCol.getConf().getString("sortType");
    for (int c=0; c < fSortTypes.length; ++c) {
      if (fSortTypes[c].equals(colOrder)) {
        mOrder=c;
        break;
      }
    }
    if (mOrder == 1 && preferences.getBoolean("cardBrowserNoSorting",false)) {
      mOrder=0;
    }
    mOrderAsc=Upgrade.upgradeJSONIfNecessary(mCol,mCol.getConf(),"sortBackwards",false);
    if (fSortTypes[mOrder].equals("noteFld")) {
      mOrderAsc=!mOrderAsc;
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  mCards=new ArrayList<HashMap<String,String>>();
  mCardsListView=(ListView)findViewById(R.id.card_browser_list);
  mCardsColumn1Spinner=(Spinner)findViewById(R.id.browser_column1_spinner);
  ArrayAdapter<CharSequence> column1Adapter=ArrayAdapter.createFromResource(this,R.array.browser_column1_headings,android.R.layout.simple_spinner_item);
  column1Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mCardsColumn1Spinner.setAdapter(column1Adapter);
  mCardsColumn1Spinner.setClickable(false);
  mColumn2Index=AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt("cardBrowserColumn2",0);
  mCardsColumn2Spinner=(Spinner)findViewById(R.id.browser_column2_spinner);
  ArrayAdapter<CharSequence> column2Adapter=ArrayAdapter.createFromResource(this,R.array.browser_column2_headings,android.R.layout.simple_spinner_item);
  column2Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mCardsColumn2Spinner.setAdapter(column2Adapter);
  mCardsColumn2Spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos != mColumn2Index) {
        mColumn2Index=pos;
        AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt("cardBrowserColumn2",mColumn2Index).commit();
        setBrowserListAdapter(mColumn2Index);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  setBrowserListAdapter(mColumn2Index);
  mCardsColumn2Spinner.setSelection(mColumn2Index);
  mCardsListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mPositionInCardsList=position;
      long cardId=Long.parseLong(mCards.get(mPositionInCardsList).get("id"));
      sCardBrowserCard=mCol.getCard(cardId);
      Intent editCard=new Intent(CardBrowser.this,CardEditor.class);
      editCard.putExtra(CardEditor.EXTRA_CALLER,CardEditor.CALLER_CARDBROWSER_EDIT);
      editCard.putExtra(CardEditor.EXTRA_CARD_ID,sCardBrowserCard.getId());
      startActivityForResult(editCard,EDIT_CARD);
      if (AnkiDroidApp.SDK_VERSION > 4) {
        ActivityTransitionAnimation.slide(CardBrowser.this,ActivityTransitionAnimation.LEFT);
      }
    }
  }
);
  registerForContextMenu(mCardsListView);
  mSearchEditText=(EditText)findViewById(R.id.card_browser_search);
  mSearchEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView view,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_SEARCH) {
        onSearch();
        return true;
      }
      return false;
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  mSearchButton=(ImageButton)findViewById(R.id.card_browser_search_button);
  mSearchButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onSearch();
    }
  }
);
  mSearchTerms="";
  if (mWholeCollection) {
    mRestrictOnDeck="";
    setTitle(res.getString(R.string.card_browser_all_decks));
  }
 else {
    try {
      String deckName=mCol.getDecks().current().getString("name");
      mRestrictOnDeck="deck:'" + deckName + "' ";
      setTitle(deckName);
    }
 catch (    JSONException e) {
      throw new RuntimeException(e);
    }
  }
  mSelectedTags=new HashSet<String>();
  if (!preferences.getBoolean("cardBrowserNoSearchOnOpen",false)) {
    searchCards();
  }
}
