{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  View mainView=getLayoutInflater().inflate(R.layout.card_browser,null);
  setContentView(mainView);
  mDeck=AnkiDroidApp.deck();
  mDeck.resetUndo();
  markedColor=getResources().getColor(R.color.card_browser_marked);
  suspendedColor=getResources().getColor(R.color.card_browser_suspended);
  if (Themes.getTheme() == 2) {
    backgroundColor=getResources().getColor(R.color.background_blue);
    mainView.setBackgroundResource(Themes.getBackgroundColor());
  }
 else {
    backgroundColor=getResources().getColor(R.color.card_browser_background);
  }
  SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
  mrelativeBrowserFontSize=preferences.getInt("relativeCardBrowserFontSize",DEFAULT_FONT_SIZE_RATIO);
  mPrefFixArabic=preferences.getBoolean("fixArabicText",false);
  mCards=new ArrayList<HashMap<String,String>>();
  mAllCards=new ArrayList<HashMap<String,String>>();
  mCardsListView=(ListView)findViewById(R.id.card_browser_list);
  mCardsAdapter=new SizeControlledListAdapter(this,mCards,R.layout.card_item,new String[]{"question","answer","marSus"},new int[]{R.id.card_question,R.id.card_answer,R.id.card_item},mrelativeBrowserFontSize);
  mCardsAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
    @Override public boolean setViewValue(    View view,    Object arg1,    String text){
      if (view.getId() == R.id.card_item) {
        if (text.substring(1,2).equals("1")) {
          view.setBackgroundColor(suspendedColor);
        }
 else         if (text.substring(0,1).equals("1")) {
          view.setBackgroundColor(markedColor);
        }
 else {
          view.setBackgroundColor(backgroundColor);
        }
        return true;
      }
      return false;
    }
  }
);
  mCardsListView.setAdapter(mCardsAdapter);
  mCardsListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Intent editCard=new Intent(CardBrowser.this,CardEditor.class);
      mPositionInCardsList=position;
      mSelectedCard=mDeck.cardFromId(Long.parseLong(mCards.get(mPositionInCardsList).get("id")));
      sEditorCard=mSelectedCard;
      editCard.putExtra("callfromcardbrowser",true);
      startActivityForResult(editCard,EDIT_CARD);
      if (Integer.valueOf(android.os.Build.VERSION.SDK) > 4) {
        MyAnimation.slide(CardBrowser.this,MyAnimation.LEFT);
      }
    }
  }
);
  registerForContextMenu(mCardsListView);
  mSearchEditText=(EditText)findViewById(R.id.card_browser_search);
  mSearchEditText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      updateCardsList();
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  setTitle(mDeck.getDeckName());
  initAllDialogs();
  allTags=null;
  mSelectedTags=new HashSet<String>();
  getCards();
}
