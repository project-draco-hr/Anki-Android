{
  Timber.d("onCreate()");
  Intent intent=getIntent();
  if (intent.getCategories() != null || !colIsOpen()) {
    showOpeningCollectionDialog();
  }
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
  View mainView=getLayoutInflater().inflate(R.layout.deck_picker,null);
  setContentView(mainView);
  View studyoptionsFrame=findViewById(R.id.studyoptions_fragment);
  mFragmented=studyoptionsFrame != null && studyoptionsFrame.getVisibility() == View.VISIBLE;
  Themes.setContentStyle(mFragmented ? mainView : mainView.findViewById(R.id.deckpicker_view),Themes.CALLER_DECKPICKER);
  sIsWholeCollection=!mFragmented;
  registerExternalStorageListener();
  initNavigationDrawer(mainView);
  if (savedInstanceState == null) {
    selectNavigationItem(DRAWER_DECK_PICKER);
  }
  setTitle(getResources().getString(R.string.app_name));
  mDeckList=new ArrayList<HashMap<String,String>>();
  mDeckListView=(ListView)findViewById(R.id.files);
  mDeckListAdapter=new SimpleAdapter(this,mDeckList,R.layout.deck_item,new String[]{"name","new","lrn","rev","sep","dyn"},new int[]{R.id.DeckPickerName,R.id.deckpicker_new,R.id.deckpicker_lrn,R.id.deckpicker_rev,R.id.deckpicker_deck,R.id.DeckPickerName});
  mDeckListAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
    @Override public boolean setViewValue(    View view,    Object data,    String text){
      if (view.getId() == R.id.deckpicker_deck) {
        return true;
      }
 else       if (view.getId() == R.id.DeckPickerName) {
        if (text.equals("d0")) {
          ((TextView)view).setTextColor(getResources().getColor(R.color.non_dyn_deck));
          return true;
        }
 else         if (text.equals("d1")) {
          ((TextView)view).setTextColor(getResources().getColor(R.color.dyn_deck));
          return true;
        }
      }
 else       if (view.getId() == R.id.deckpicker_new) {
        ((TextView)view).setTextColor((text.equals("0")) ? getResources().getColor(R.color.zero_count) : getResources().getColor(R.color.new_count));
        return false;
      }
 else       if (view.getId() == R.id.deckpicker_lrn) {
        ((TextView)view).setTextColor((text.equals("0")) ? getResources().getColor(R.color.zero_count) : getResources().getColor(R.color.learn_count));
        return false;
      }
 else       if (view.getId() == R.id.deckpicker_rev) {
        ((TextView)view).setTextColor((text.equals("0")) ? getResources().getColor(R.color.zero_count) : getResources().getColor(R.color.review_count));
        return false;
      }
      return false;
    }
  }
);
  mDeckListView.setOnItemClickListener(mDeckSelHandler);
  mDeckListView.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      Timber.i("DeckPicker:: Long tapped on deck in position %d",position);
      if (mDeckList == null || mDeckList.size() == 0) {
        return true;
      }
      mContextMenuDid=Long.parseLong(mDeckList.get(position).get("did"));
      String deckName=getCol().getDecks().name(mContextMenuDid);
      boolean hasSubdecks=getCol().getDecks().children(mContextMenuDid).size() > 0;
      boolean isCollapsed=getCol().getDecks().get(mContextMenuDid).optBoolean("collapsed",false);
      showDialogFragment(DeckPickerContextMenu.newInstance(deckName,hasSubdecks,isCollapsed));
      return true;
    }
  }
);
  mDeckListView.setAdapter(mDeckListAdapter);
  mTodayTextView=(TextView)findViewById(R.id.today_stats_text_view);
  final Resources res=getResources();
  mAddButton=(ImageButton)findViewById(R.id.fab);
  mAddButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new MaterialDialog.Builder(DeckPicker.this).items(new String[]{res.getString(R.string.menu_add_note),res.getString(R.string.menu_get_shared_decks),res.getString(R.string.new_deck)}).itemsCallback(new MaterialDialog.ListCallback(){
        @Override public void onSelection(        MaterialDialog materialDialog,        View view,        int i,        CharSequence charSequence){
switch (i) {
case 0:
            hideShowcaseView();
          addNote();
        break;
case 1:
      hideShowcaseView();
    if (colIsOpen())     addSharedDeck();
  break;
case 2:
hideShowcaseView();
mDialogEditText=new EditText(DeckPicker.this);
mDialogEditText.setSingleLine(true);
new MaterialDialog.Builder(DeckPicker.this).title(R.string.new_deck).positiveText(R.string.dialog_ok).customView(mDialogEditText,true).callback(new MaterialDialog.ButtonCallback(){
@Override public void onPositive(MaterialDialog dialog){
String deckName=mDialogEditText.getText().toString().replaceAll("[\'\"\\n\\r\\[\\]\\(\\)]","");
Timber.i("DeckPicker:: Creating new deck...");
getCol().getDecks().id(deckName,true);
updateDeckList();
}
}
).negativeText(R.string.dialog_cancel).show();
}
}
}
).build().show();
}
}
);
mDeckListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
showStartupScreensAndDialogs(preferences,0);
}
