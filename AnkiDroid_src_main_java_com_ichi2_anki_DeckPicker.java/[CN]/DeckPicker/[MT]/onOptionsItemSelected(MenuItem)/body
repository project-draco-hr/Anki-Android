{
  if (getDrawerToggle().onOptionsItemSelected(item)) {
    return true;
  }
  Resources res=getResources();
switch (item.getItemId()) {
case R.id.action_sync:
    Timber.i("Sync button pressed");
  sync();
return true;
case R.id.action_add_note_from_deck_picker:
Timber.i("Add note button pressed");
hideShowcaseView();
addNote();
return true;
case R.id.action_shared_decks:
Timber.i("Get shared deck button pressed");
hideShowcaseView();
if (colOpen()) {
addSharedDeck();
}
return true;
case R.id.action_new_deck:
Timber.i("Add deck button pressed");
hideShowcaseView();
StyledDialog.Builder builder2=new StyledDialog.Builder(DeckPicker.this);
builder2.setTitle(res.getString(R.string.new_deck));
mDialogEditText=new EditText(DeckPicker.this);
mDialogEditText.setSingleLine(true);
builder2.setView(mDialogEditText,false,false);
builder2.setPositiveButton(res.getString(R.string.create),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String deckName=mDialogEditText.getText().toString().replaceAll("[\'\"\\n\\r\\[\\]\\(\\)]","");
Timber.i("Creating new deck...");
getCol().getDecks().id(deckName,true);
loadCounts();
}
}
);
builder2.setNegativeButton(res.getString(R.string.dialog_cancel),null);
builder2.create().show();
return true;
case R.id.action_import:
Timber.i("Import button pressed");
showImportDialog(ImportDialog.DIALOG_IMPORT_HINT);
return true;
case R.id.action_new_filtered_deck:
Timber.i("New filtered deck button pressed");
StyledDialog.Builder builder3=new StyledDialog.Builder(DeckPicker.this);
builder3.setTitle(res.getString(R.string.new_deck));
mDialogEditText=new EditText(DeckPicker.this);
ArrayList<String> names=getCol().getDecks().allNames();
int n=1;
String cramDeckName="Cram 1";
while (names.contains(cramDeckName)) {
n++;
cramDeckName="Cram " + n;
}
mDialogEditText.setText(cramDeckName);
builder3.setView(mDialogEditText,false,false);
builder3.setPositiveButton(res.getString(R.string.create),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String enteredCramDeckName=mDialogEditText.getText().toString();
Timber.i("Creating cram deck...");
long id=getCol().getDecks().newDyn(enteredCramDeckName);
openStudyOptions(id,new Bundle());
}
}
);
builder3.setNegativeButton(res.getString(R.string.dialog_cancel),null);
builder3.create().show();
return true;
case R.id.action_check_database:
Timber.i("Check database button pressed");
showDatabaseErrorDialog(DatabaseErrorDialog.DIALOG_CONFIRM_DATABASE_CHECK);
return true;
case R.id.action_check_media:
Timber.i("Check media button pressed");
showMediaCheckDialog(MediaCheckDialog.DIALOG_CONFIRM_MEDIA_CHECK);
return true;
case R.id.action_restore_backup:
Timber.i("Restore from backup button pressed");
showDatabaseErrorDialog(DatabaseErrorDialog.DIALOG_CONFIRM_RESTORE_BACKUP);
return true;
case R.id.action_export:
Timber.i("Export collection button pressed");
String msg=getResources().getString(R.string.confirm_apkg_export);
showDialogFragment(ExportDialog.newInstance(msg));
return true;
default :
return super.onOptionsItemSelected(item);
}
}
