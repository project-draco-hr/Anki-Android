{
  CardBrowser.clearSelectedDeck();
  getCol().getDecks().select(did);
  getCol().getSched().reset();
  mFocusedDeck=did;
  int pos=mDeckListAdapter.findDeckPosition(did);
  Sched.DeckDueTreeNode deckDueTreeNode=mDeckListAdapter.getDeckList().get(pos);
  int[] studyOptionsCounts=getCol().getSched().counts();
  if (getCol().getDecks().isDyn(did) || mFragmented) {
    openStudyOptions(false);
  }
 else   if (deckDueTreeNode.newCount + deckDueTreeNode.lrnCount + deckDueTreeNode.revCount > 0) {
    openReviewer();
  }
 else   if (studyOptionsCounts[0] + studyOptionsCounts[1] + studyOptionsCounts[2] > 0) {
    openStudyOptions(false);
  }
 else   if (getCol().getSched().newDue() || getCol().getSched().revDue()) {
    showSnackbar(R.string.studyoptions_limit_reached,false,R.string.study_more,new OnClickListener(){
      @Override public void onClick(      View v){
        CustomStudyDialog d=CustomStudyDialog.newInstance(CustomStudyDialog.CONTEXT_MENU_LIMITS,getCol().getDecks().selected(),true);
        showDialogFragment(d);
      }
    }
,findViewById(R.id.root_layout),mSnackbarShowHideCallback);
  }
 else   if (deckDueTreeNode.children.size() == 0 && getCol().cardCount(new long[]{did}) == 0) {
    final Uri helpUrl=Uri.parse(getResources().getString(R.string.link_manual_getting_started));
    mayOpenUrl(helpUrl);
    showSnackbar(R.string.empty_deck,false,R.string.help,new OnClickListener(){
      @Override public void onClick(      View v){
        openUrl(helpUrl);
      }
    }
,findViewById(R.id.root_layout),mSnackbarShowHideCallback);
  }
 else {
    showSnackbar(R.string.studyoptions_empty_schedule,false,R.string.custom_study,new OnClickListener(){
      @Override public void onClick(      View v){
        CustomStudyDialog d=CustomStudyDialog.newInstance(CustomStudyDialog.CONTEXT_MENU_EMPTY_SCHEDULE,getCol().getDecks().selected(),true);
        showDialogFragment(d);
      }
    }
,findViewById(R.id.root_layout),mSnackbarShowHideCallback);
  }
}
