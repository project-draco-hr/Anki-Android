{
  if (!hasReadWritePermission() && shouldEnforceQueryOrInsertSecurity()) {
    throwSecurityException("insert",uri);
  }
  Collection col=CollectionHelper.getInstance().getCol(mContext);
  if (col == null) {
    throw new IllegalStateException(COL_NULL_ERROR_MSG);
  }
  col.log(getLogMessage("insert",uri));
  int match=sUriMatcher.match(uri);
switch (match) {
case NOTES:
{
      Long modelId=values.getAsLong(FlashCardsContract.Note.MID);
      String flds=values.getAsString(FlashCardsContract.Note.FLDS);
      String tags=values.getAsString(FlashCardsContract.Note.TAGS);
      com.ichi2.libanki.Note newNote=new com.ichi2.libanki.Note(col,col.getModels().get(modelId));
      String[] fldsArray=Utils.splitFields(flds);
      if (fldsArray.length != newNote.getFields().length) {
        throw new IllegalArgumentException("Incorrect flds argument : " + flds);
      }
      for (int idx=0; idx < fldsArray.length; idx++) {
        newNote.setField(idx,fldsArray[idx]);
      }
      if (tags != null) {
        newNote.setTagsFromStr(tags);
      }
      col.addNote(newNote);
      return Uri.withAppendedPath(FlashCardsContract.Note.CONTENT_URI,Long.toString(newNote.getId()));
    }
case NOTES_ID:
  throw new IllegalArgumentException("Not possible to insert note with specific ID");
case NOTES_ID_CARDS:
throw new IllegalArgumentException("Not possible to insert cards directly (only through NOTES)");
case NOTES_ID_CARDS_ORD:
throw new IllegalArgumentException("Not possible to insert cards directly (only through NOTES)");
case MODELS:
String modelName=values.getAsString(FlashCardsContract.Model.NAME);
String css=values.getAsString(FlashCardsContract.Model.CSS);
Long did=values.getAsLong(FlashCardsContract.Model.DECK_ID);
String fieldNames=values.getAsString(FlashCardsContract.Model.FIELD_NAMES);
Integer numCards=values.getAsInteger(FlashCardsContract.Model.NUM_CARDS);
Integer sortf=values.getAsInteger(FlashCardsContract.Model.SORT_FIELD_INDEX);
Integer type=values.getAsInteger(FlashCardsContract.Model.TYPE);
String latexPost=values.getAsString(FlashCardsContract.Model.LATEX_POST);
String latexPre=values.getAsString(FlashCardsContract.Model.LATEX_PRE);
if (modelName == null || fieldNames == null || numCards == null) {
throw new IllegalArgumentException("Model name, field_names, and num_cards can't be empty");
}
if (did != null && col.getDecks().isDyn(did)) {
throw new IllegalArgumentException("Cannot set a filtered deck as default deck for a model");
}
Models mm=col.getModels();
JSONObject newModel=mm.newModel(modelName);
try {
String[] allFields=Utils.splitFields(fieldNames);
for (String f : allFields) {
mm.addField(newModel,mm.newField(f));
}
for (int idx=0; idx < numCards; idx++) {
JSONObject t=mm.newTemplate("Card " + (idx + 1));
t.put("qfmt",String.format("{{%s}}",allFields[0]));
String answerField=allFields[0];
if (allFields.length > 1) {
answerField=allFields[1];
}
t.put("afmt",String.format("{{FrontSide}}\\n\\n<hr id=answer>\\n\\n{{%s}}",answerField));
mm.addTemplate(newModel,t);
}
if (css != null) {
newModel.put("css",css);
}
if (did != null) {
newModel.put("did",did);
}
if (sortf != null && sortf < allFields.length) {
newModel.put("sortf",sortf);
}
if (type != null) {
newModel.put("type",type);
}
if (latexPost != null) {
newModel.put("latexPost",latexPost);
}
if (latexPre != null) {
newModel.put("latexPre",latexPre);
}
mm.add(newModel);
mm.save(newModel);
mm.flush();
String mid=Long.toString(newModel.getLong("id"));
return Uri.withAppendedPath(FlashCardsContract.Model.CONTENT_URI,mid);
}
 catch (ConfirmModSchemaException e) {
Timber.e(e,"Unexpected ConfirmModSchema exception adding new model %s",modelName);
throw new IllegalArgumentException("ConfirmModSchema exception adding new model " + modelName);
}
catch (JSONException e) {
Timber.e(e,"Could not set a field of new model %s",modelName);
return null;
}
case MODELS_ID:
throw new IllegalArgumentException("Not possible to insert model with specific ID");
case MODELS_ID_TEMPLATES:
{
Models models=col.getModels();
Long mid=getModelIdFromUri(uri,col);
JSONObject existingModel=models.get(mid);
if (existingModel == null) {
throw new IllegalArgumentException("model missing: " + mid);
}
String name=values.getAsString(CardTemplate.NAME);
String qfmt=values.getAsString(CardTemplate.QUESTION_FORMAT);
String afmt=values.getAsString(CardTemplate.ANSWER_FORMAT);
String bqfmt=values.getAsString(CardTemplate.BROWSER_QUESTION_FORMAT);
String bafmt=values.getAsString(CardTemplate.BROWSER_ANSWER_FORMAT);
try {
JSONObject t=models.newTemplate(name);
try {
t.put("qfmt",qfmt);
t.put("afmt",afmt);
t.put("bqfmt",bqfmt);
t.put("bafmt",bafmt);
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
models.addTemplate(existingModel,t);
models.save(existingModel);
models.flush();
return ContentUris.withAppendedId(uri,t.getInt("ord"));
}
 catch (ConfirmModSchemaException e) {
throw new IllegalArgumentException("Unable to add template",e);
}
catch (JSONException e) {
throw new IllegalArgumentException("Unable to get ord from new template",e);
}
}
case MODELS_ID_TEMPLATES_ID:
throw new IllegalArgumentException("Not possible to insert template with specific ORD");
case MODELS_ID_FIELDS:
{
Models models=col.getModels();
Long mid=getModelIdFromUri(uri,col);
JSONObject existingModel=models.get(mid);
if (existingModel == null) {
throw new IllegalArgumentException("model missing: " + mid);
}
String name=values.getAsString(FlashCardsContract.Model.FIELD_NAME);
if (name == null) {
throw new IllegalArgumentException("field name missing for model: " + mid);
}
JSONObject field=models.newField(name);
try {
models.addField(existingModel,field);
models.flush();
JSONArray ja=existingModel.getJSONArray("flds");
return ContentUris.withAppendedId(uri,ja.length() - 1);
}
 catch (ConfirmModSchemaException e) {
throw new IllegalArgumentException("Unable to insert field: " + name,e);
}
catch (JSONException e) {
throw new IllegalArgumentException("Unable to get newly created field: " + name,e);
}
}
case SCHEDULE:
throw new IllegalArgumentException("Not possible to perform insert operation on schedule");
case DECKS:
String deckName=values.getAsString(FlashCardsContract.Deck.DECK_NAME);
did=col.getDecks().id(deckName,false);
if (did != null) {
throw new IllegalArgumentException("Deck name already exists: " + deckName);
}
did=col.getDecks().id(deckName,true);
JSONObject deck=col.getDecks().get(did);
if (deck != null) {
try {
String deckDesc=values.getAsString(FlashCardsContract.Deck.DECK_DESC);
if (deckDesc != null) {
deck.put("desc",deckDesc);
}
}
 catch (JSONException e) {
Timber.e(e,"Could not set a field of new deck %s",deckName);
return null;
}
}
col.getDecks().flush();
return Uri.withAppendedPath(FlashCardsContract.Deck.CONTENT_ALL_URI,Long.toString(did));
case DECK_SELECTED:
throw new IllegalArgumentException("Selected deck can only be queried and updated");
case DECKS_ID:
throw new IllegalArgumentException("Not possible to insert deck with specific ID");
default :
throw new IllegalArgumentException("uri " + uri + " is not supported");
}
}
