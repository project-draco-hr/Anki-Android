{
  if (!hasReadWritePermission() && shouldEnforceQueryOrInsertSecurity()) {
    throwSecurityException("query",uri);
  }
  Collection col=CollectionHelper.getInstance().getCol(mContext);
  if (col == null) {
    throw new IllegalStateException(COL_NULL_ERROR_MSG);
  }
  Timber.d(getLogMessage("query",uri));
  int match=sUriMatcher.match(uri);
switch (match) {
case NOTES_V2:
{
      String[] proj=sanitizeNoteProjection(projection);
      return col.getDb().getDatabase().query("notes",proj,selection,selectionArgs,null,null,order);
    }
case NOTES:
{
    String[] proj=sanitizeNoteProjection(projection);
    String query=(selection != null) ? selection : "";
    List<Long> noteIds=col.findNotes(query);
    if ((noteIds != null) && (!noteIds.isEmpty())) {
      String sel=String.format("id in (%s)",TextUtils.join(",",noteIds));
      return col.getDb().getDatabase().query("notes",proj,sel,null,null,null,order);
    }
 else {
      return null;
    }
  }
case NOTES_ID:
{
  String noteId=uri.getPathSegments().get(1);
  String[] proj=sanitizeNoteProjection(projection);
  return col.getDb().getDatabase().query("notes",proj,"id=?",new String[]{noteId},null,null,order);
}
case NOTES_ID_CARDS:
{
Note currentNote=getNoteFromUri(uri,col);
String[] columns=((projection != null) ? projection : FlashCardsContract.Card.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
for (Card currentCard : currentNote.cards()) {
  addCardToCursor(currentCard,rv,col,columns);
}
return rv;
}
case NOTES_ID_CARDS_ORD:
{
Card currentCard=getCardFromUri(uri,col);
String[] columns=((projection != null) ? projection : FlashCardsContract.Card.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
addCardToCursor(currentCard,rv,col,columns);
return rv;
}
case MODELS:
{
HashMap<Long,JSONObject> models=col.getModels().getModels();
String[] columns=((projection != null) ? projection : FlashCardsContract.Model.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
for (Long modelId : models.keySet()) {
addModelToCursor(modelId,models,rv,columns);
}
return rv;
}
case MODELS_ID:
{
long modelId=getModelIdFromUri(uri,col);
String[] columns=((projection != null) ? projection : FlashCardsContract.Model.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
HashMap<Long,JSONObject> models=col.getModels().getModels();
addModelToCursor(modelId,models,rv,columns);
return rv;
}
case MODELS_ID_TEMPLATES:
{
JSONObject currentModel=col.getModels().get(getModelIdFromUri(uri,col));
String[] columns=((projection != null) ? projection : CardTemplate.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
try {
JSONArray templates=currentModel.getJSONArray("tmpls");
for (int idx=0; idx < templates.length(); idx++) {
JSONObject template=templates.getJSONObject(idx);
addTemplateToCursor(template,currentModel,idx + 1,rv,columns);
}
}
 catch (JSONException e) {
throw new IllegalArgumentException("Model is malformed",e);
}
return rv;
}
case MODELS_ID_TEMPLATES_ID:
{
int ord=Integer.parseInt(uri.getLastPathSegment());
JSONObject currentModel=col.getModels().get(getModelIdFromUri(uri,col));
String[] columns=((projection != null) ? projection : CardTemplate.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
try {
JSONObject template=getTemplateFromUri(uri,col);
addTemplateToCursor(template,currentModel,ord + 1,rv,columns);
}
 catch (JSONException e) {
throw new IllegalArgumentException("Model is malformed",e);
}
return rv;
}
case SCHEDULE:
{
String[] columns=((projection != null) ? projection : FlashCardsContract.ReviewInfo.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
long selectedDeckBeforeQuery=col.getDecks().selected();
long deckIdOfTemporarilySelectedDeck=-1;
int limit=1;
int selectionArgIndex=0;
if (selection != null) {
String[] args=selection.split(",");
for (String arg : args) {
String[] keyAndValue=arg.split("=");
try {
String value=keyAndValue[1].trim().equals("?") ? selectionArgs[selectionArgIndex++] : keyAndValue[1];
if (keyAndValue[0].trim().equals("limit")) {
limit=Integer.valueOf(value);
}
 else if (keyAndValue[0].trim().equals("deckID")) {
deckIdOfTemporarilySelectedDeck=Long.valueOf(value);
if (!selectDeckWithCheck(col,deckIdOfTemporarilySelectedDeck)) {
return rv;
}
}
}
 catch (NumberFormatException nfe) {
nfe.printStackTrace();
}
}
}
col.getSched().reset();
for (int k=0; k < limit; k++) {
Card currentCard=col.getSched().getCard();
if (currentCard != null) {
int buttonCount=col.getSched().answerButtons(currentCard);
JSONArray buttonTexts=new JSONArray();
for (int i=0; i < buttonCount; i++) {
buttonTexts.put(col.getSched().nextIvlStr(mContext,currentCard,i + 1));
}
addReviewInfoToCursor(currentCard,buttonTexts,buttonCount,rv,col,columns);
}
 else {
break;
}
}
if (deckIdOfTemporarilySelectedDeck != -1) {
col.getDecks().select(selectedDeckBeforeQuery);
}
return rv;
}
case DECKS:
{
List<Sched.DeckDueTreeNode> allDecks=col.getSched().deckDueList();
String[] columns=((projection != null) ? projection : FlashCardsContract.Deck.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,allDecks.size());
for (Sched.DeckDueTreeNode deck : allDecks) {
long id=deck.did;
String name=deck.names[0];
addDeckToCursor(id,name,getDeckCountsFromDueTreeNode(deck),rv,col,columns);
}
return rv;
}
case DECKS_ID:
{
String[] columns=((projection != null) ? projection : FlashCardsContract.Deck.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
List<Sched.DeckDueTreeNode> allDecks=col.getSched().deckDueList();
long deckId;
deckId=Long.parseLong(uri.getPathSegments().get(1));
for (Sched.DeckDueTreeNode deck : allDecks) {
if (deck.did == deckId) {
addDeckToCursor(deckId,deck.names[0],getDeckCountsFromDueTreeNode(deck),rv,col,columns);
return rv;
}
}
return rv;
}
case DECK_SELECTED:
{
long id=col.getDecks().selected();
String name=col.getDecks().name(id);
String[] columns=((projection != null) ? projection : FlashCardsContract.Deck.DEFAULT_PROJECTION);
MatrixCursor rv=new MatrixCursor(columns,1);
JSONArray counts=new JSONArray(Arrays.asList(col.getSched().counts()));
addDeckToCursor(id,name,counts,rv,col,columns);
return rv;
}
default :
throw new IllegalArgumentException("uri " + uri + " is not supported");
}
}
