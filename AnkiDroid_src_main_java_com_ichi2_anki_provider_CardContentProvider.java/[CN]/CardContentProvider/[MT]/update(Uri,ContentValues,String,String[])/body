{
  if (!hasReadWritePermission() && shouldEnforceUpdateSecurity(uri)) {
    throwSecurityException("update",uri);
  }
  Collection col=CollectionHelper.getInstance().getCol(getContext());
  if (col == null) {
    throw new IllegalStateException("AnkiDroid database inaccessible. Open AnkiDroid to see what's wrong.");
  }
  col.log(getLogMessage("update",uri));
  int match=sUriMatcher.match(uri);
  int updated=0;
switch (match) {
case NOTES:
    throw new IllegalArgumentException("Not possible to update notes directly (only through data URI)");
case NOTES_ID:
{
    Note currentNote=getNoteFromUri(uri,col);
    Set<Map.Entry<String,Object>> valueSet=values.valueSet();
    for (    Map.Entry<String,Object> entry : valueSet) {
      String key=entry.getKey();
      if (key.equals(FlashCardsContract.Note.FLDS)) {
        Timber.d("CardContentProvider: flds update...");
        String newFldsEncoded=(String)entry.getValue();
        String[] flds=Utils.splitFields(newFldsEncoded);
        if (flds.length != currentNote.getFields().length) {
          throw new IllegalArgumentException("Incorrect flds argument : " + newFldsEncoded);
        }
        for (int idx=0; idx < flds.length; idx++) {
          currentNote.setField(idx,flds[idx]);
        }
        updated++;
      }
 else       if (key.equals(FlashCardsContract.Note.TAGS)) {
        Timber.d("CardContentProvider: tags update...");
        Object tags=entry.getValue();
        if (tags != null) {
          currentNote.setTagsFromStr(String.valueOf(tags));
        }
        updated++;
      }
 else {
        throw new IllegalArgumentException("Unsupported column: " + key);
      }
    }
    Timber.d("CardContentProvider: Saving note...");
    currentNote.flush();
    break;
  }
case NOTES_ID_CARDS:
throw new UnsupportedOperationException("Not yet implemented");
case NOTES_ID_CARDS_ORD:
{
Card currentCard=getCardFromUri(uri,col);
boolean isDeckUpdate=false;
long did=-1;
Set<Map.Entry<String,Object>> valueSet=values.valueSet();
for (Map.Entry<String,Object> entry : valueSet) {
  String key=entry.getKey();
  isDeckUpdate=key.equals(FlashCardsContract.Card.DECK_ID);
  did=values.getAsLong(key);
}
if ((isDeckUpdate) && (did >= 0)) {
  Timber.d("CardContentProvider: Moving card to other deck...");
  col.getDecks().flush();
  currentCard.setDid(did);
  currentCard.flush();
  updated++;
}
 else {
  throw new IllegalArgumentException("Currently only updates of decks are supported");
}
break;
}
case MODELS:
throw new IllegalArgumentException("Cannot update models in bulk");
case MODELS_ID:
String newModelName=values.getAsString(FlashCardsContract.Model.NAME);
String newCss=values.getAsString(FlashCardsContract.Model.CSS);
String newDid=values.getAsString(FlashCardsContract.Model.DECK_ID);
String newFieldList=values.getAsString(FlashCardsContract.Model.FIELD_NAMES);
if (newFieldList != null) {
throw new IllegalArgumentException("Field names cannot be changed via provider");
}
JSONObject model=col.getModels().get(getModelIdFromUri(uri,col));
try {
if (newModelName != null) {
model.put("name",newModelName);
updated++;
}
if (newCss != null) {
model.put("css",newCss);
updated++;
}
if (newDid != null) {
model.put("did",newDid);
updated++;
}
col.getModels().save(model);
}
 catch (JSONException e) {
Timber.e(e,"JSONException updating model");
}
break;
case MODELS_ID_TEMPLATES:
throw new IllegalArgumentException("Cannot update templates in bulk");
case MODELS_ID_TEMPLATES_ID:
Long mid=values.getAsLong(CardTemplate.MODEL_ID);
Integer ord=values.getAsInteger(CardTemplate.ORD);
String name=values.getAsString(CardTemplate.NAME);
String qfmt=values.getAsString(CardTemplate.QUESTION_FORMAT);
String afmt=values.getAsString(CardTemplate.ANSWER_FORMAT);
String bqfmt=values.getAsString(CardTemplate.BROWSER_QUESTION_FORMAT);
String bafmt=values.getAsString(CardTemplate.BROWSER_ANSWER_FORMAT);
if (mid != null || ord != null) {
throw new IllegalArgumentException("Updates to mid or ord are not allowed");
}
try {
Integer templateOrd=Integer.parseInt(uri.getLastPathSegment());
JSONObject existingModel=col.getModels().get(getModelIdFromUri(uri,col));
JSONArray templates=existingModel.getJSONArray("tmpls");
JSONObject template=templates.getJSONObject(templateOrd);
if (name != null) {
template.put("name",name);
updated++;
}
if (qfmt != null) {
template.put("qfmt",qfmt);
updated++;
}
if (afmt != null) {
template.put("afmt",afmt);
updated++;
}
if (bqfmt != null) {
template.put("bqfmt",bqfmt);
updated++;
}
if (bafmt != null) {
template.put("bafmt",bafmt);
updated++;
}
templates.put(templateOrd,template);
existingModel.put("tmpls",templates);
col.getModels().save(existingModel,true);
}
 catch (JSONException e) {
throw new IllegalArgumentException("Model is malformed",e);
}
break;
case SCHEDULE:
{
Set<Map.Entry<String,Object>> valueSet=values.valueSet();
int cardOrd=-1;
long noteID=-1;
int ease=-1;
long timeTaken=-1;
for (Map.Entry<String,Object> entry : valueSet) {
String key=entry.getKey();
if (key.equals(FlashCardsContract.ReviewInfo.NOTE_ID)) {
noteID=values.getAsLong(key);
}
 else if (key.equals(FlashCardsContract.ReviewInfo.CARD_ORD)) {
cardOrd=values.getAsInteger(key);
}
 else if (key.equals(FlashCardsContract.ReviewInfo.EASE)) {
ease=values.getAsInteger(key);
}
 else if (key.equals(FlashCardsContract.ReviewInfo.TIME_TAKEN)) {
timeTaken=values.getAsLong(key);
}
}
if (cardOrd != -1 && noteID != -1) {
Card cardToAnswer=getCard(noteID,cardOrd,col);
if (cardToAnswer != null) {
answerCard(col,col.getSched(),cardToAnswer,ease,timeTaken);
updated++;
}
 else {
Timber.e("Requested card with noteId %d and cardOrd %d was not found. Either the provided " + "noteId/cardOrd were wrong or the card has been deleted in the meantime.",noteID,cardOrd);
}
}
break;
}
case DECKS:
throw new IllegalArgumentException("Can't update decks in bulk");
case DECKS_ID:
throw new UnsupportedOperationException("Not yet implemented");
case DECK_SELECTED:
{
Set<Map.Entry<String,Object>> valueSet=values.valueSet();
for (Map.Entry<String,Object> entry : valueSet) {
String key=entry.getKey();
if (key.equals(FlashCardsContract.Deck.DECK_ID)) {
long deckId=values.getAsLong(key);
if (selectDeckWithCheck(col,deckId)) {
updated++;
}
}
}
break;
}
default :
throw new IllegalArgumentException("uri " + uri + " is not supported");
}
return updated;
}
