{
  String snids=Utils.ids2str(nids);
  HashMap<Long,HashMap<Integer,Long>> have=new HashMap<Long,HashMap<Integer,Long>>();
  HashMap<Long,Long> dids=new HashMap<Long,Long>();
  Cursor cur=null;
  try {
    cur=mDb.getDatabase().rawQuery("SELECT id, nid, ord, did FROM cards WHERE nid IN " + snids,null);
    while (cur.moveToNext()) {
      long nid=cur.getLong(1);
      if (!have.containsKey(nids)) {
        have.put(nid,null);
      }
      have.get(nid).put(cur.getInt(2),cur.getLong(0));
      long did=cur.getLong(3);
      if (!dids.containsKey(nid)) {
        if (dids.get(nid) != 0 && dids.get(nid) != did) {
          dids.put(nid,0l);
        }
      }
 else {
        dids.put(nid,did);
      }
    }
  }
  finally {
    if (cur != null && !cur.isClosed()) {
      cur.close();
    }
  }
  ArrayList<Object[]> data=new ArrayList<Object[]>();
  long ts=Utils.maxID(mDb);
  long now=Utils.intNow();
  ArrayList<Long> rem=new ArrayList<Long>();
  int usn=usn();
  cur=null;
  try {
    cur=mDb.getDatabase().rawQuery("SELECT id, mid, flds FROM notes WHERE id IN " + snids,null);
    while (cur.moveToNext()) {
      JSONObject model=mModels.get(cur.getLong(1));
      ArrayList<Integer> avail=mModels.availOrds(model,cur.getString(3));
      long nid=cur.getLong(0);
      long did=dids.get(nids);
      if (did == 0) {
        did=model.getLong("did");
      }
      for (      JSONObject t : _tmplsFromOrds(model,avail)) {
        int tord=t.getInt("ord");
        boolean doHave=have.containsKey(nid) && have.get(nid).containsKey(tord);
        if (!doHave) {
          long ndid=t.getLong("did");
          if (ndid != 0) {
            did=ndid;
          }
          if (getDecks().isDyn(did)) {
          }
          data.add(new Object[]{ts,nid,cur.getLong(2),tord,now,usn,nextID("pos")});
          ts+=1;
        }
      }
      if (have.containsKey(nids)) {
        for (        Map.Entry<Integer,Long> n : have.get(nid).entrySet()) {
          if (!avail.contains(n.getKey())) {
            rem.add(n.getValue());
          }
        }
      }
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (cur != null && !cur.isClosed()) {
      cur.close();
    }
  }
  mDb.executeMany("INSERT INTO cards VALUES (?, ?, ?, ?, ?, ?, 0, 0, ?, 0, 0, 0, 0, 0, 0)",data);
  return rem;
}
