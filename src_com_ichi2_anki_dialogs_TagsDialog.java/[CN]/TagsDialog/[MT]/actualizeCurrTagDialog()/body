{
  for (  String tag : mCurrentTags) {
    if (!mAllTags.contains(tag)) {
      mAllTags.add(tag);
    }
  }
  Collections.sort(mAllTags,new Comparator<String>(){
    @Override public int compare(    String lhs,    String rhs){
      return lhs.compareToIgnoreCase(rhs);
    }
  }
);
  String[] tags=new String[mAllTags.size()];
  for (int i=0; i < tags.length; i++) {
    tags[i]=mAllTags.get(i);
  }
  mStyledDialog.setMultiChoiceItems(tags,checkedTags(),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      String tag=mStyledDialog.getItemList().get(which);
      if (mCurrentTags.contains(tag)) {
        mCurrentTags.remove(tag);
      }
 else {
        mCurrentTags.add(tag);
      }
    }
  }
,new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mStyledDialog.setItemListChecked(isChecked);
      mCurrentTags.clear();
      mCurrentTags.addAll(mStyledDialog.getCheckedItems());
    }
  }
);
}
