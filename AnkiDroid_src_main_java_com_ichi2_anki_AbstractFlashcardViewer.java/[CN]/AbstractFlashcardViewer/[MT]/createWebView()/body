{
  WebView webView=new MyWebView(this);
  webView.setWillNotCacheDrawing(true);
  webView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
  if (CompatHelper.isHoneycomb()) {
    webView.getSettings().setDisplayZoomControls(false);
  }
  webView.getSettings().setBuiltInZoomControls(true);
  webView.getSettings().setSupportZoom(true);
  webView.getSettings().setLoadWithOverviewMode(true);
  webView.getSettings().setJavaScriptEnabled(true);
  webView.setWebChromeClient(new AnkiDroidWebChromeClient());
  webView.setFocusableInTouchMode(mUseInputTag);
  webView.setScrollbarFadingEnabled(true);
  Timber.d("Focusable = %s, Focusable in touch mode = %s",webView.isFocusable(),webView.isFocusableInTouchMode());
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith("playsound:")) {
        Message msg=Message.obtain();
        String soundPath=url.replaceFirst("playsound:","");
        msg.obj=soundPath;
        mHandler.sendMessage(msg);
        return true;
      }
      if (url.startsWith("file") || url.startsWith("data:")) {
        return false;
      }
      if (url.startsWith("typeblurtext:")) {
        mTypeInput=URLDecoder.decode(url.replaceFirst("typeblurtext:",""));
        mFlipCardLayout.setVisibility(View.VISIBLE);
        return true;
      }
      if (url.startsWith("typeentertext:")) {
        mTypeInput=URLDecoder.decode(url.replaceFirst("typeentertext:",""));
        mFlipCardLayout.performClick();
        return true;
      }
      if (url.equals("signal:typefocus")) {
        mFlipCardLayout.setVisibility(View.GONE);
        return true;
      }
      Intent intent=null;
      try {
        if (url.startsWith("intent:")) {
          intent=Intent.parseUri(url,Intent.URI_INTENT_SCHEME);
        }
 else         if (url.startsWith("android-app:")) {
          intent=Intent.parseUri(url,Intent.URI_ANDROID_APP_SCHEME);
        }
        if (intent != null) {
          if (getPackageManager().resolveActivity(intent,0) == null) {
            String fallbackUrl=intent.getStringExtra(EXTRA_BROWSER_FALLBACK_URL);
            if (!TextUtils.isEmpty(fallbackUrl)) {
              Timber.d("Using fallback url in intent uri: %s",url);
              intent=null;
              url=fallbackUrl;
            }
 else {
              String packageName=intent.getPackage();
              if (packageName == null) {
                Timber.d("Not using resolved intent uri because not available: %s",intent);
                intent=null;
              }
 else {
                Timber.d("Resolving intent uri to market uri because not available: %s",intent);
                intent=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + packageName));
                if (getPackageManager().resolveActivity(intent,0) == null) {
                  intent=null;
                }
              }
            }
          }
 else {
            intent.removeExtra(EXTRA_BROWSER_FALLBACK_URL);
          }
        }
      }
 catch (      URISyntaxException e) {
        Timber.w("Unable to parse intent uri: %s",url);
      }
      if (intent == null) {
        Timber.d("Opening external link \"%s\" with an Intent",url);
        intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      }
 else {
        Timber.d("Opening resolved external link \"%s\" with an Intent: %s",url,intent);
      }
      try {
        startActivityWithoutAnimation(intent);
      }
 catch (      ActivityNotFoundException e) {
        e.printStackTrace();
      }
      return true;
    }
    @Override public void onPageFinished(    WebView view,    String url){
      Timber.d("onPageFinished triggered");
      view.loadUrl("javascript:onPageFinished();");
    }
  }
);
  webView.setBackgroundColor(Color.argb(1,0,0,0));
  return webView;
}
