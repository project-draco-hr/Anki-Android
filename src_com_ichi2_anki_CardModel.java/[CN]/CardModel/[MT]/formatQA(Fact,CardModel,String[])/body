{
  String question=cm.mQformat;
  String answer=cm.mAformat;
  Matcher tagMatcher;
  tagMatcher=sFactPattern.matcher(question);
  question=tagMatcher.replaceAll(tags[Card.TAGS_FACT]);
  tagMatcher=sFactPattern.matcher(answer);
  answer=tagMatcher.replaceAll(tags[Card.TAGS_FACT]);
  tagMatcher=sModelPattern.matcher(question);
  question=tagMatcher.replaceAll(tags[Card.TAGS_MODEL]);
  tagMatcher=sModelPattern.matcher(answer);
  answer=tagMatcher.replaceAll(tags[Card.TAGS_MODEL]);
  tagMatcher=sTemplPattern.matcher(question);
  question=tagMatcher.replaceAll(tags[Card.TAGS_TEMPL]);
  tagMatcher=sTemplPattern.matcher(answer);
  answer=tagMatcher.replaceAll(tags[Card.TAGS_TEMPL]);
  int replaceAt=question.indexOf("%(");
  while (replaceAt != -1) {
    if (question.substring(replaceAt,replaceAt + 7).equals("%(text:")) {
      question=replaceHtmlField(question,fact,replaceAt);
    }
 else {
      question=replaceField(question,fact,replaceAt,true);
    }
    replaceAt=question.indexOf("%(");
  }
  replaceAt=answer.indexOf("%(");
  while (replaceAt != -1) {
    if (answer.substring(replaceAt,replaceAt + 7).equals("%(text:")) {
      answer=replaceHtmlField(answer,fact,replaceAt);
    }
 else {
      answer=replaceField(answer,fact,replaceAt,true);
    }
    replaceAt=answer.indexOf("%(");
  }
  HashMap<String,String> returnMap=new HashMap<String,String>();
  returnMap.put("question",question);
  returnMap.put("answer",answer);
  return returnMap;
}
