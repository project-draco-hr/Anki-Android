{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  Resources res=getResources();
  setTitle(res.getString(R.string.menu_create_deck));
  SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
  mPrefDeckPath=preferences.getString("deckPath",AnkiDroidApp.getDefaultAnkiDroidDirectory());
  View mainView=getLayoutInflater().inflate(R.layout.deck_creator,null);
  setContentView(mainView);
  Themes.setWallpaper(mainView);
  mCreate=(Button)findViewById(R.id.DeckCreatorOKButton);
  mCancel=(Button)findViewById(R.id.DeckCreatorCancelButton);
  mFilename=(EditText)findViewById(R.id.DeckCreatorFilename);
  mCreate.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String filename=mFilename.getText().toString();
      if (!filename.equals("")) {
        if (createDeck(filename) == true) {
          setResult(RESULT_OK);
        }
      }
      closeDeckCreator();
    }
  }
);
  mCancel.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      setResult(RESULT_CANCELED);
      closeDeckCreator();
    }
  }
);
  mFilename.setFilters(new InputFilter[]{new InputFilter(){
    @Override public CharSequence filter(    CharSequence source,    int start,    int end,    Spanned dest,    int dstart,    int dend){
      String newText=source.subSequence(start,end).toString();
      String filteredNewText=Utils.removeInvalidDeckNameCharacters(newText);
      if (filteredNewText.equals(newText)) {
        return null;
      }
 else {
        Toast.makeText(DeckCreator.this,R.string.deckcreator_invalid_character,Toast.LENGTH_SHORT).show();
        return filteredNewText;
      }
    }
  }
});
}
