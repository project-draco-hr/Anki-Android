{
  String txt=get_or_attr(context,tag_name);
  if (txt != null) {
    return txt;
  }
  List<String> parts=Arrays.asList(tag_name.split(":"));
  String extra=null;
  List<String> mods;
  String tag;
  if (parts.size() == 1 || parts.get(0).equals("")) {
    return String.format("{unknown field %s}",tag_name);
  }
 else {
    mods=parts.subList(0,parts.size() - 1);
    tag=parts.get(parts.size() - 1);
  }
  txt=get_or_attr(context,tag);
  Collections.reverse(mods);
  Collections.sort(mods,new Comparator<String>(){
    @Override public int compare(    String lhs,    String rhs){
      if (lhs.equals("type")) {
        return 0;
      }
 else {
        return 1;
      }
    }
  }
);
  for (  String mod : mods) {
    Timber.d("Models.get():: Processing field: modifier=%s, extra=%s, tag=%s, txt=%s",mod,extra,tag,txt);
    if (mod.equals("text")) {
      if (!TextUtils.isEmpty(txt)) {
        txt=Utils.stripHTML(txt);
      }
 else {
        txt="";
      }
    }
 else     if (mod.equals("type")) {
      return String.format(Locale.US,"[[%s]]",tag_name);
    }
 else     if (mod.startsWith("cq-") || mod.startsWith("ca-")) {
      String[] split=mod.split("-");
      mod=split[0];
      extra=split[1];
      if (!TextUtils.isEmpty(txt) && !TextUtils.isEmpty(extra)) {
        txt=clozeText(txt,extra,mod.charAt(1));
      }
 else {
        txt="";
      }
    }
 else {
      Matcher m=fHookFieldMod.matcher(mod);
      if (m.matches()) {
        mod=m.group(1);
        extra=m.group(2);
      }
      txt=(String)Hooks.runFilter("fmod_" + mod,txt == null ? "" : txt,extra == null ? "" : extra,context,tag,tag_name);
      if (txt == null) {
        return String.format("{unknown field %s}",tag_name);
      }
    }
  }
  return txt;
}
