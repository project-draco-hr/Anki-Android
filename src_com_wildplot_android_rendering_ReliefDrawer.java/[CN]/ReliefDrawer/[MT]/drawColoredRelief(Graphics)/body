{
  Rectangle field=g.getClipBounds();
  BufferedImage[] bimages=new BufferedImage[threadCnt];
  for (int i=0; i < bimages.length; i++) {
    bimages[i]=new BufferedImage(field.width,field.height,BufferedImage.TYPE_INT_ARGB);
  }
  float length=(field.x + field.width - plotSheet.getFrameThickness()) - (field.x + plotSheet.getFrameThickness());
  Thread[] threads=new Thread[threadCnt];
  PartRenderer[] partRenderer=new PartRenderer[threadCnt];
  Graphics gnew=bimages[0].getGraphics();
  gnew.setClip(field);
  partRenderer[0]=new PartRenderer(gnew,field.x + plotSheet.getFrameThickness(),field.x + plotSheet.getFrameThickness() + length / threadCnt,function);
  threads[0]=new Thread(partRenderer[0]);
  for (int i=1; i < threads.length - 1; i++) {
    gnew=bimages[i].getGraphics();
    gnew.setClip(field);
    partRenderer[i]=new PartRenderer(gnew,field.x + plotSheet.getFrameThickness() + length * i / threadCnt + 1,field.x + plotSheet.getFrameThickness() + length * (i + 1) / threadCnt,function);
    threads[i]=new Thread(partRenderer[i]);
  }
  if (threadCnt > 1) {
    gnew=bimages[threadCnt - 1].getGraphics();
    gnew.setClip(field);
    partRenderer[threadCnt - 1]=new PartRenderer(gnew,field.x + plotSheet.getFrameThickness() + length * (threadCnt - 1) / threadCnt + 1,field.x + plotSheet.getFrameThickness() + length,function);
    threads[threadCnt - 1]=new Thread(partRenderer[threadCnt - 1]);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  BufferedImage bimage : bimages) {
    ((Graphics2D)g).drawImage(bimage,null,0,0);
  }
}
