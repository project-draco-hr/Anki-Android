{
  String[] tokens=_tokenize(query);
  Pair<String,String[]> res1=_where(tokens);
  String preds=res1.first;
  String[] args=res1.second;
  ArrayList<HashMap<String,String>> res=new ArrayList<>();
  if (preds == null) {
    return res;
  }
  Pair<String,Boolean> res2=_order instanceof Boolean ? _order((Boolean)_order) : _order((String)_order);
  String order=res2.first;
  boolean rev=res2.second;
  String sql=_queryForCardBrowser(preds,order);
  Cursor cur=null;
  try {
    cur=mCol.getDb().getDatabase().rawQuery(sql,args);
    DeckTask task=DeckTask.getInstance();
    while (cur.moveToNext()) {
      if (task.isCancelled()) {
        Timber.i("_findCardsForCardBrowser() cancelled...");
        return null;
      }
      HashMap<String,String> map=new HashMap<>();
      map.put("id",cur.getString(0));
      map.put("sfld",cur.getString(1));
      map.put("deck",deckNames.get(cur.getString(2)));
      int queue=cur.getInt(3);
      String tags=cur.getString(4);
      map.put("flags",Integer.toString((queue == -1 ? 1 : 0) + (tags.matches(".*[Mm]arked.*") ? 2 : 0)));
      map.put("tags",tags);
      res.add(map);
      map.put("question","");
      map.put("answer","");
    }
  }
 catch (  SQLException e) {
    Timber.e("Invalid grouping, sql: " + sql);
    return new ArrayList<>();
  }
 finally {
    if (cur != null) {
      cur.close();
    }
  }
  if (rev) {
    Collections.reverse(res);
  }
  return res;
}
