{
  ArrayList<String> ids=new ArrayList<String>();
  AnkiDb ankiDB=AnkiDatabaseManager.getDatabase(deck.deckPath);
  String sql="INSERT OR REPLACE INTO cardModels (id, ordinal, modelId, name, description, active, qformat, aformat, lformat, " + "qedformat, aedformat, questionInAnswer, questionFontFamily, questionFontSize, questionFontColour, questionAlign, " + "answerFontFamily, answerFontSize, answerFontColour, answerAlign, lastFontFamily, lastFontSize, lastFontColour, "+ "editQuestionFontFamily, editQuestionFontSize, editAnswerFontFamily, editAnswerFontSize, allowEmptyAnswer, typeAnswer) "+ "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
  SQLiteStatement statement=ankiDB.database.compileStatement(sql);
  int len=cardModels.length();
  for (int i=0; i < len; i++) {
    try {
      JSONObject cardModel=cardModels.getJSONObject(i);
      String id=cardModel.getString("id");
      statement.bindString(1,id);
      statement.bindString(2,cardModel.getString("ordinal"));
      statement.bindLong(3,cardModel.getLong("modelId"));
      statement.bindString(4,cardModel.getString("name"));
      statement.bindString(5,cardModel.getString("description"));
      statement.bindLong(6,Utils.booleanToInt(cardModel.getBoolean("active")));
      statement.bindString(7,cardModel.getString("qformat"));
      statement.bindString(8,cardModel.getString("aformat"));
      if (cardModel.isNull("lformat")) {
        statement.bindNull(9);
      }
 else {
        statement.bindString(9,cardModel.getString("lformat"));
      }
      if (cardModel.isNull("qedformat")) {
        statement.bindNull(10);
      }
 else {
        statement.bindString(10,cardModel.getString("qedformat"));
      }
      if (cardModel.isNull("aedformat")) {
        statement.bindNull(11);
      }
 else {
        statement.bindString(11,cardModel.getString("aedformat"));
      }
      statement.bindLong(12,Utils.booleanToInt(cardModel.getBoolean("questionInAnswer")));
      statement.bindString(13,cardModel.getString("questionFontFamily"));
      statement.bindString(14,cardModel.getString("questionFontSize"));
      statement.bindString(15,cardModel.getString("questionFontColour"));
      statement.bindString(16,cardModel.getString("questionAlign"));
      statement.bindString(17,cardModel.getString("answerFontFamily"));
      statement.bindString(18,cardModel.getString("answerFontSize"));
      statement.bindString(19,cardModel.getString("answerFontColour"));
      statement.bindString(20,cardModel.getString("answerAlign"));
      statement.bindString(21,cardModel.getString("lastFontFamily"));
      statement.bindString(22,cardModel.getString("lastFontSize"));
      statement.bindString(23,cardModel.getString("lastFontColour"));
      if (cardModel.isNull("editQuestionFontFamily")) {
        statement.bindNull(24);
      }
 else {
        statement.bindString(24,cardModel.getString("editQuestionFontFamily"));
      }
      if (cardModel.isNull("editQuestionFontSize")) {
        statement.bindNull(25);
      }
 else {
        statement.bindString(25,cardModel.getString("editQuestionFontSize"));
      }
      if (cardModel.isNull("editAnswerFontFamily")) {
        statement.bindNull(26);
      }
 else {
        statement.bindString(26,cardModel.getString("editAnswerFontFamily"));
      }
      if (cardModel.isNull("editAnswerFontSize")) {
        statement.bindNull(27);
      }
 else {
        statement.bindString(27,cardModel.getString("editAnswerFontSize"));
      }
      if (cardModel.isNull("allowEmptyAnswer")) {
        cardModel.put("allowEmptyAnswer",true);
      }
      statement.bindLong(28,Utils.booleanToInt(cardModel.getBoolean("allowEmptyAnswer")));
      statement.bindString(29,cardModel.getString("typeAnswer"));
      statement.execute();
      ids.add(id);
    }
 catch (    JSONException e) {
      Log.i(AnkiDroidApp.TAG,"JSONException = " + e.getMessage());
    }
  }
  statement.close();
  ArrayList<String> cardModelsIds=ankiDB.queryColumn(String.class,"SELECT id FROM cardModels WHERE modelId = " + modelId,0);
  for (  String cardModelId : cardModelsIds) {
    if (!ids.contains(cardModelId)) {
      deck.deleteCardModel(modelId,cardModelId);
    }
  }
}
