{
  HashMap<String,String> result=new HashMap<String,String>();
  Throwable exc=null;
  try {
    String tmpPath=(new File(deck.getDeckPath())).getParent();
    File tmpFile=new File(tmpPath + "/fulluploadPayload.tmp");
    if (tmpFile.exists()) {
      tmpFile.delete();
    }
    tmpFile.createNewFile();
    DataOutputStream tmp=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tmpFile)));
    tmp.writeBytes(TWO_HYPHENS + MIME_BOUNDARY + END);
    tmp.writeBytes("Content-Disposition: form-data; name=\"p\"" + END + END+ password+ END);
    tmp.writeBytes(TWO_HYPHENS + MIME_BOUNDARY + END);
    tmp.writeBytes("Content-Disposition: form-data; name=\"u\"" + END + END+ username+ END);
    tmp.writeBytes(TWO_HYPHENS + MIME_BOUNDARY + END);
    tmp.writeBytes("Content-Disposition: form-data; name=\"d\"" + END + END);
    tmp.write(deckName.getBytes("UTF-8"));
    tmp.writeBytes(END);
    tmp.writeBytes(TWO_HYPHENS + MIME_BOUNDARY + END);
    tmp.writeBytes("Content-Disposition: form-data; name=\"deck\"; filename=\"deck\"" + END);
    tmp.writeBytes("Content-Type: application/octet-stream" + END);
    tmp.writeBytes(END);
    String deckPath=deck.getDeckPath();
    FileInputStream fStream=new FileInputStream(deckPath);
    byte[] buffer=new byte[Utils.CHUNK_SIZE];
    int length=-1;
    Deflater deflater=new Deflater(Deflater.BEST_SPEED);
    DeflaterOutputStream dos=new DeflaterOutputStream(tmp,deflater);
    while ((length=fStream.read(buffer)) != -1) {
      dos.write(buffer,0,length);
    }
    dos.finish();
    fStream.close();
    tmp.writeBytes(END);
    tmp.writeBytes(TWO_HYPHENS + MIME_BOUNDARY + TWO_HYPHENS+ END+ END);
    tmp.flush();
    tmp.close();
    HttpPost httpPost=new HttpPost(AnkiDroidProxy.SYNC_URL + "fullup?v=" + URLEncoder.encode(AnkiDroidProxy.SYNC_VERSION,"UTF-8"));
    httpPost.setHeader("Content-type","multipart/form-data; boundary=" + MIME_BOUNDARY);
    httpPost.addHeader("Host",AnkiDroidProxy.SYNC_HOST);
    httpPost.setEntity(new FileEntity(tmpFile,"application/octet-stream"));
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpResponse resp=httpClient.execute(httpPost);
    String response=Utils.convertStreamToString(resp.getEntity().getContent());
    int responseCode=resp.getStatusLine().getStatusCode();
    if (response.substring(0,2).equals("OK")) {
      deck.setLastSync(Double.parseDouble(response.substring(3,response.length() - 3)));
      deck.commitToDB();
      deck.setLastLoaded(deck.getModified());
      tmpFile.delete();
    }
    result.put("code",String.valueOf(responseCode));
    result.put("message",response);
  }
 catch (  ClientProtocolException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    result.put("code","ClientProtocolException");
    exc=e;
  }
catch (  UnsupportedEncodingException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    result.put("code","UnsupportedEncodingException");
    exc=e;
  }
catch (  MalformedURLException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    result.put("code","MalformedURLException");
    exc=e;
  }
catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    result.put("code","IOException");
    exc=e;
  }
  if (exc != null) {
    while (exc.getMessage() == null && exc.getCause() != null) {
      exc=exc.getCause();
    }
    result.put("message",exc.getMessage());
  }
  return result;
}
