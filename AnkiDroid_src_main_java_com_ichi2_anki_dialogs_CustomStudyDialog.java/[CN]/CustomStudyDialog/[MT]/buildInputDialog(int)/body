{
  Resources res=getActivity().getResources();
  View v=getActivity().getLayoutInflater().inflate(R.layout.styled_custom_study_details_dialog,null);
  TextView textView1=(TextView)v.findViewById(R.id.custom_study_details_text1);
  TextView textView2=(TextView)v.findViewById(R.id.custom_study_details_text2);
  final EditText mEditText=(EditText)v.findViewById(R.id.custom_study_details_edittext2);
  textView1.setText(getText1());
  textView2.setText(getText2());
  mEditText.setText(getDefaultValue());
  mEditText.setSelectAllOnFocus(true);
  mEditText.requestFocus();
  final boolean jumpToReviewer=getArguments().getBoolean("jumpToReviewer");
  MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity()).customView(v,true).positiveText(res.getString(R.string.dialog_ok)).negativeText(res.getString(R.string.dialog_cancel)).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      Collection col=CollectionHelper.getInstance().getCol(getActivity());
      int n=Integer.parseInt(mEditText.getText().toString());
switch (dialogId) {
case CUSTOM_STUDY_NEW:
        try {
          AnkiDroidApp.getSharedPrefs(getActivity()).edit().putInt("extendNew",n).commit();
          JSONObject deck=col.getDecks().current();
          deck.put("extendNew",n);
          col.getDecks().save(deck);
          col.getSched().extendLimits(n,0);
          onLimitsExtended(jumpToReviewer);
        }
 catch (        JSONException e) {
          throw new RuntimeException(e);
        }
      break;
case CUSTOM_STUDY_REV:
    try {
      AnkiDroidApp.getSharedPrefs(getActivity()).edit().putInt("extendRev",n).commit();
      JSONObject deck=col.getDecks().current();
      deck.put("extendRev",n);
      col.getDecks().save(deck);
      col.getSched().extendLimits(0,n);
      onLimitsExtended(jumpToReviewer);
    }
 catch (    JSONException e) {
      throw new RuntimeException(e);
    }
  break;
case CUSTOM_STUDY_FORGOT:
JSONArray ar=new JSONArray();
try {
ar.put(0,1);
createCustomStudySession(ar,new Object[]{String.format(Locale.US,"rated:%d:1",n),Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},false);
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
break;
case CUSTOM_STUDY_AHEAD:
createCustomStudySession(new JSONArray(),new Object[]{String.format(Locale.US,"prop:due<=%d",n),Consts.DYN_MAX_SIZE,Consts.DYN_DUE},true);
break;
case CUSTOM_STUDY_RANDOM:
createCustomStudySession(new JSONArray(),new Object[]{"",n,Consts.DYN_RANDOM},true);
break;
case CUSTOM_STUDY_PREVIEW:
createCustomStudySession(new JSONArray(),new Object[]{"is:new added:" + Integer.toString(n),Consts.DYN_MAX_SIZE,Consts.DYN_OLDEST},false);
break;
default :
break;
}
}
@Override public void onNegative(MaterialDialog dialog){
((AnkiActivity)getActivity()).dismissAllDialogFragments();
}
}
);
final MaterialDialog dialog=builder.build();
mEditText.setOnKeyListener(new View.OnKeyListener(){
@Override public boolean onKey(View view,int i,KeyEvent keyEvent){
if (((EditText)view).getText().length() == 0) {
dialog.getActionButton(DialogAction.POSITIVE).setEnabled(false);
}
 else {
dialog.getActionButton(DialogAction.POSITIVE).setEnabled(true);
}
return false;
}
}
);
dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
return dialog;
}
