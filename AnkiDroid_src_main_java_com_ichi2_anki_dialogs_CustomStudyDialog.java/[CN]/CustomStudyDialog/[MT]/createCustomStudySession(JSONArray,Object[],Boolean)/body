{
  JSONObject dyn;
  final AnkiActivity activity=(AnkiActivity)getActivity();
  Collection col=CollectionHelper.getInstance().getCol(activity);
  try {
    String deckName=col.getDecks().current().getString("name");
    String customStudyDeck=getResources().getString(R.string.custom_study_deck_name);
    JSONObject cur=col.getDecks().byName(customStudyDeck);
    if (cur != null) {
      if (cur.getInt("dyn") != 1) {
        new MaterialDialog.Builder(getActivity()).content(R.string.custom_study_deck_exists).negativeText(R.string.dialog_cancel).build().show();
        return;
      }
 else {
        col.getSched().emptyDyn(cur.getLong("id"));
        dyn=cur;
        col.getDecks().select(cur.getLong("id"));
      }
    }
 else {
      long did=col.getDecks().newDyn(customStudyDeck);
      dyn=col.getDecks().get(did);
    }
    if (delays.length() > 0) {
      dyn.put("delays",delays);
    }
 else {
      dyn.put("delays",JSONObject.NULL);
    }
    JSONArray ar=dyn.getJSONArray("terms");
    ar.getJSONArray(0).put(0,"deck:\"" + deckName + "\" "+ terms[0]);
    ar.getJSONArray(0).put(1,terms[1]);
    ar.getJSONArray(0).put(2,terms[2]);
    dyn.put("resched",resched);
    DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REBUILD_CRAM,new DeckTask.TaskListener(){
      @Override public void onCancelled(){
      }
      @Override public void onPreExecute(){
        activity.showProgressBar();
      }
      @Override public void onPostExecute(      DeckTask.TaskData result){
        activity.hideProgressBar();
        ((CustomStudyListener)activity).onCreateCustomStudySession();
      }
      @Override public void onProgressUpdate(      DeckTask.TaskData... values){
      }
    }
);
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  activity.dismissAllDialogFragments();
}
