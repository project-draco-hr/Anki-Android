{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.download_deck_picker);
  initDownloadManagerService();
  registerExternalStorageListener();
  initDialogs();
  mPersonalDeckDownloads=new ArrayList<Download>();
  mPersonalDecks=new ArrayList<String>();
  mAllPersonalDecks=new ArrayList<Object>();
  mPersonalDecksAdapter=new PersonalDecksAdapter();
  mPersonalDecksListView=(ListView)findViewById(R.id.list);
  mPersonalDecksListView.setAdapter(mPersonalDecksAdapter);
  mPersonalDecksListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Object deckNameObject=mAllPersonalDecks.get(position);
      String deckName="bug 378";
      if (deckNameObject instanceof String) {
        deckName=(String)deckNameObject;
      }
      Download personalDeckDownload=new Download(deckName);
      mPersonalDeckDownloads.add(personalDeckDownload);
      refreshPersonalDecksList();
      try {
        startService(mDownloadManagerServiceIntent);
        mDownloadManagerService.downloadFile(personalDeckDownload);
      }
 catch (      RemoteException e) {
        Log.e(AnkiDroidApp.TAG,"RemoteException = " + e.getMessage());
        e.printStackTrace();
      }
    }
  }
);
  mSearchEditText=(EditText)findViewById(R.id.shared_deck_download_search);
  mSearchEditText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      List<String> foundDecks=new ArrayList<String>();
      foundDecks.clear();
      for (int i=0; i < mPersonalDecks.size(); i++) {
        if (mPersonalDecks.get(i).toLowerCase().indexOf(mSearchEditText.getText().toString().toLowerCase()) != -1) {
          foundDecks.add(mPersonalDecks.get(i));
        }
      }
      mAllPersonalDecks.clear();
      mAllPersonalDecks.addAll(mPersonalDeckDownloads);
      mAllPersonalDecks.addAll(foundDecks);
      mPersonalDecksAdapter.notifyDataSetChanged();
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  getPersonalDecks();
}
