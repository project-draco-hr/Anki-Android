{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.download_deck_picker);
  initDownloadManagerService();
  registerExternalStorageListener();
  initAlertDialogs();
  mPersonalDeckDownloads=new ArrayList<Download>();
  mPersonalDecks=new ArrayList<String>();
  mAllPersonalDecks=new ArrayList<Object>();
  mPersonalDecksAdapter=new PersonalDecksAdapter();
  mPersonalDecksListView=(ListView)findViewById(R.id.list);
  mPersonalDecksListView.setAdapter(mPersonalDecksAdapter);
  mPersonalDecksListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String deckName=(String)mAllPersonalDecks.get(position);
      Download personalDeckDownload=new Download(deckName);
      mPersonalDeckDownloads.add(personalDeckDownload);
      refreshPersonalDecksList();
      try {
        startService(mDownloadManagerServiceIntent);
        mDownloadManagerService.downloadFile(personalDeckDownload);
      }
 catch (      RemoteException e) {
        Log.e(TAG,"RemoteException = " + e.getMessage());
        e.printStackTrace();
      }
    }
  }
);
  SharedPreferences pref=PrefSettings.getSharedPrefs(getBaseContext());
  String username=pref.getString("username","");
  String password=pref.getString("password","");
  Connection.getPersonalDecks(getPersonalDecksListener,new Connection.Payload(new Object[]{username,password}));
}
