{
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.download_deck_picker);
  initDownloadManagerService();
  registerExternalStorageListener();
  initDialogs();
  mPersonalDeckDownloads=new ArrayList<Download>();
  mPersonalDecks=new ArrayList<String>();
  mAllPersonalDecks=new ArrayList<Object>();
  mPersonalDecksAdapter=new PersonalDecksAdapter();
  mPersonalDecksListView=(ListView)findViewById(R.id.list);
  mPersonalDecksListView.setAdapter(mPersonalDecksAdapter);
  mPersonalDecksListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Object deckNameObject=mAllPersonalDecks.get(position);
      if (!(deckNameObject instanceof String)) {
        return;
      }
      String deckName=(String)deckNameObject;
      Download personalDeckDownload=new Download(deckName);
      mDestination=PrefSettings.getSharedPrefs(getBaseContext()).getString("deckPath",AnkiDroidApp.getStorageDirectory());
      setDeckToDownload(personalDeckDownload);
      if (new File(mDestination + "/" + deckName+ ".anki").exists()) {
        mDownloadOverwriteAlert.setMessage(getResources().getString(R.string.download_message,deckName));
        mDownloadOverwriteAlert.show();
        Log.d(AnkiDroidApp.TAG,"Download Deck already exists");
      }
 else {
        downloadPersonalDeck(personalDeckDownload);
        Log.d(AnkiDroidApp.TAG,"Download Deck not exists");
      }
    }
  }
);
  mSearchEditText=(EditText)findViewById(R.id.shared_deck_download_search);
  mSearchEditText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      List<String> foundDecks=new ArrayList<String>();
      foundDecks.clear();
      for (int i=0; i < mPersonalDecks.size(); i++) {
        if (mPersonalDecks.get(i).toLowerCase().indexOf(mSearchEditText.getText().toString().toLowerCase()) != -1) {
          foundDecks.add(mPersonalDecks.get(i));
        }
      }
      mAllPersonalDecks.clear();
      mAllPersonalDecks.addAll(mPersonalDeckDownloads);
      mAllPersonalDecks.addAll(foundDecks);
      mPersonalDecksAdapter.notifyDataSetChanged();
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  getPersonalDecks();
}
