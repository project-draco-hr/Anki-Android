{
switch (item.getItemId()) {
case R.id.home:
    ((AnkiActivity)getActivity()).finishWithAnimation(ActivityTransitionAnimation.DIALOG_EXIT);
  return true;
case R.id.action_add:
Timber.i("CardTemplateEditor:: Add template button pressed");
addNewTemplateWithCheck(getModel());
return true;
case R.id.action_delete:
Timber.i("CardTemplateEditor:: Delete template button pressed");
Resources res=getResources();
final Collection col=((AnkiActivity)getActivity()).getCol();
int position=getArguments().getInt("position");
try {
final JSONObject model=getModel();
JSONArray tmpls=model.getJSONArray("tmpls");
final JSONObject template=tmpls.getJSONObject(position);
if (tmpls.length() < 2) {
Themes.showThemedToast(getActivity(),res.getString(R.string.card_template_editor_cant_delete),false);
return true;
}
int numAffectedCards=col.getModels().tmplUseCount(model,position);
confirmDeleteCards(template,model,numAffectedCards);
}
 catch (JSONException e) {
throw new RuntimeException(e);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}
