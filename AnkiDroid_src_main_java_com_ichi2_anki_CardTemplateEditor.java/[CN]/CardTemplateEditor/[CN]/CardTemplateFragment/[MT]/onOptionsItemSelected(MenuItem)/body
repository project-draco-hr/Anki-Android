{
  final Collection col=((AnkiActivity)getActivity()).getCol();
  final JSONObject model=getModel();
switch (item.getItemId()) {
case R.id.action_add:
    Timber.i("CardTemplateEditor:: Add template button pressed");
  addNewTemplateWithCheck(getModel());
return true;
case R.id.action_delete:
{
Timber.i("CardTemplateEditor:: Delete template button pressed");
Resources res=getResources();
int position=getArguments().getInt("position");
try {
  JSONArray tmpls=model.getJSONArray("tmpls");
  final JSONObject template=tmpls.getJSONObject(position);
  if (tmpls.length() < 2) {
    UIUtils.showThemedToast(getActivity(),res.getString(R.string.card_template_editor_cant_delete),false);
    return true;
  }
  int numAffectedCards=col.getModels().tmplUseCount(model,position);
  confirmDeleteCards(template,model,numAffectedCards);
}
 catch (JSONException e) {
  throw new RuntimeException(e);
}
return true;
}
case R.id.action_preview:
{
Timber.i("CardTemplateEditor:: Preview model button pressed");
if (modelHasChanged()) {
col.getModels().save(model,false);
}
Intent i=new Intent(getActivity(),Previewer.class);
int pos=getArguments().getInt("position");
long cid;
if (getArguments().getLong("noteId") != -1L && pos < col.getNote(getArguments().getLong("noteId")).cards().size()) {
cid=col.getNote(getArguments().getLong("noteId")).cards().get(pos).getId();
}
 else {
Card dummyCard=getDummyCard();
if (dummyCard != null) {
  cid=dummyCard.getId();
}
 else {
  UIUtils.showSimpleSnackbar(getActivity(),R.string.invalid_template,false);
  return true;
}
}
i.putExtra("currentCardId",cid);
startActivityForResult(i,REQUEST_PREVIEWER);
return true;
}
case R.id.action_confirm:
Timber.i("CardTemplateEditor:: Save model button pressed");
if (modelHasChanged()) {
DeckTask.TaskData args=new DeckTask.TaskData(new Object[]{model});
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_SAVE_MODEL,mSaveModelAndExitHandler,args);
}
 else {
((AnkiActivity)getActivity()).finishWithAnimation(ActivityTransitionAnimation.RIGHT);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}
