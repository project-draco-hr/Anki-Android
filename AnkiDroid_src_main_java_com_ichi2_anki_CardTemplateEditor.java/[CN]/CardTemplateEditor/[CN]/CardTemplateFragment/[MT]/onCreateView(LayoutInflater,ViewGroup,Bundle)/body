{
  View mainView=inflater.inflate(R.layout.card_template_editor_item,container,false);
  final int position=getArguments().getInt("position");
  try {
    long mid=getArguments().getLong("modelId");
    mModel=((AnkiActivity)getActivity()).getCol().getModels().get(mid);
    final JSONArray tmpls=mModel.getJSONArray("tmpls");
    final JSONObject template=tmpls.getJSONObject(position);
    mFront=((EditText)mainView.findViewById(R.id.front_edit));
    mCss=((EditText)mainView.findViewById(R.id.styling_edit));
    mBack=((EditText)mainView.findViewById(R.id.back_edit));
    mFront.setText(template.getString("qfmt"));
    mCss.setText(mModel.getString("css"));
    mBack.setText(template.getString("afmt"));
    TextWatcher templateEditorWatcher=new TextWatcher(){
      @Override public void afterTextChanged(      Editable arg0){
        try {
          template.put("qfmt",mFront.getText());
          template.put("afmt",mBack.getText());
          mModel.put("css",mCss.getText());
          tmpls.put(position,template);
          mModel.put("tmpls",tmpls);
        }
 catch (        JSONException e) {
          Timber.e(e,"Could not update card template");
        }
      }
      @Override public void beforeTextChanged(      CharSequence arg0,      int arg1,      int arg2,      int arg3){
      }
      @Override public void onTextChanged(      CharSequence arg0,      int arg1,      int arg2,      int arg3){
      }
    }
;
    mFront.addTextChangedListener(templateEditorWatcher);
    mCss.addTextChangedListener(templateEditorWatcher);
    mBack.addTextChangedListener(templateEditorWatcher);
    setHasOptionsMenu(true);
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  return mainView;
}
