{
  super.onCreate(savedInstanceState);
  Context context=getBaseContext();
  SharedPreferences sharedPreferences=PrefSettings.getSharedPrefs(context);
  String reportErrorMode=sharedPreferences.getString("reportErrorMode",REPORT_ASK);
  mNonce=UUID.randomUUID().getMostSignificantBits();
  if (reportErrorMode.equals(REPORT_ALWAYS)) {
    try {
      sendErrorReports();
    }
 catch (    Exception e) {
      Log.e(AnkiDroidApp.TAG,e.toString());
    }
    deleteFiles(true,false);
    setResult(RESULT_OK);
    finish();
    return;
  }
 else   if (reportErrorMode.equals(REPORT_NEVER)) {
    deleteFiles(false,false);
    setResult(RESULT_OK);
    finish();
    return;
  }
 else {
    setContentView(R.layout.feedback);
    Button btnSendAll=(Button)findViewById(R.id.btnFeedbackSendAll);
    Button btnSendMostRecent=(Button)findViewById(R.id.btnFeedbackSendLatest);
    Button btnClearAll=(Button)findViewById(R.id.btnFeedbackClearAll);
    ListView mErrorListView=(ListView)findViewById(R.id.lvErrorList);
    getErrorFiles();
    int numErrors=mErrorReports.size();
    if (numErrors == 0) {
      mErrorListView.setVisibility(View.GONE);
      btnSendMostRecent.setVisibility(View.GONE);
      btnClearAll.setVisibility(View.GONE);
      btnSendAll.setText("Send us your feedback");
      btnSendAll.setVisibility(View.VISIBLE);
    }
 else {
      btnClearAll.setVisibility(View.VISIBLE);
      btnSendAll.setVisibility(View.VISIBLE);
      if (numErrors == 1) {
        btnSendMostRecent.setVisibility(View.GONE);
      }
 else {
        btnSendMostRecent.setVisibility(View.VISIBLE);
      }
      mErrorAdapter=new SimpleAdapter(this,mErrorReports,R.layout.error_item,new String[]{"name","state"},new int[]{R.id.error_item_text,R.id.error_item_progress});
      mErrorAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
        @Override public boolean setViewValue(        View view,        Object arg1,        String text){
          if (view.getId() == R.id.error_item_progress) {
            if (text.equals(STATE_UPLOADING)) {
              view.setVisibility(View.VISIBLE);
            }
 else {
              view.setVisibility(View.GONE);
            }
            return true;
          }
          return false;
        }
      }
);
      mErrorListView.setAdapter(mErrorAdapter);
      refreshErrorListView();
    }
    btnSendAll.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          sendErrorReports();
          EditText etFeedbackText=(EditText)findViewById(R.id.etFeedbackText);
          String feedback=etFeedbackText.getText().toString();
          if (feedback.length() > 0) {
            if (mErrorReports.size() == 0) {
              sendFeedback(TYPE_FEEDBACK,feedback);
            }
 else {
              sendFeedback(TYPE_ERROR_FEEDBACK,feedback);
            }
          }
        }
 catch (        Exception e) {
          Log.e(AnkiDroidApp.TAG,e.toString());
        }
        refreshErrorListView();
      }
    }
);
    btnSendMostRecent.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          deleteFiles(false,true);
          refreshErrorListView();
          sendErrorReports();
          EditText etFeedbackText=(EditText)findViewById(R.id.etFeedbackText);
          String feedback=etFeedbackText.getText().toString();
          if (feedback.length() > 0) {
            sendFeedback(TYPE_ERROR_FEEDBACK,feedback);
          }
        }
 catch (        Exception e) {
          Log.e(AnkiDroidApp.TAG,e.toString());
        }
        refreshErrorListView();
      }
    }
);
    btnClearAll.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        deleteFiles(false,false);
        refreshErrorListView();
      }
    }
);
    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
  }
}
