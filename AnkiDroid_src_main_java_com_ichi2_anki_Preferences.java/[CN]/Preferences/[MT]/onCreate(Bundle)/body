{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.preferences);
  addPreferencesFromResource(R.xml.preferences);
  mCol=CollectionHelper.getInstance().getCol(this);
  EditTextPreference collectionPathPreference=(EditTextPreference)getPreferenceScreen().findPreference("deckPath");
  keepScreenOnCheckBoxPreference=(CheckBoxPreference)getPreferenceScreen().findPreference("keepScreenOn");
  showAnswerCheckBoxPreference=(CheckBoxPreference)getPreferenceScreen().findPreference("timeoutAnswer");
  useBackupPreference=(CheckBoxPreference)getPreferenceScreen().findPreference("useBackup");
  convertFenText=(CheckBoxPreference)getPreferenceScreen().findPreference("convertFenText");
  syncAccount=getPreferenceScreen().findPreference("syncAccount");
  showEstimates=(CheckBoxPreference)getPreferenceScreen().findPreference("showEstimates");
  showProgress=(CheckBoxPreference)getPreferenceScreen().findPreference("showProgress");
  learnCutoff=(NumberRangePreference)getPreferenceScreen().findPreference("learnCutoff");
  timeLimit=(NumberRangePreference)getPreferenceScreen().findPreference("timeLimit");
  useCurrent=(ListPreference)getPreferenceScreen().findPreference("useCurrent");
  newSpread=(ListPreference)getPreferenceScreen().findPreference("newSpread");
  dayOffset=(SeekBarPreference)getPreferenceScreen().findPreference("dayOffset");
  PreferenceScreen advanced=(PreferenceScreen)getPreferenceScreen().findPreference("pref_screen_advanced");
  PreferenceCategory workarounds=(PreferenceCategory)getPreferenceScreen().findPreference("category_workarounds");
  CheckBoxPreference inputWorkaround=(CheckBoxPreference)getPreferenceScreen().findPreference("inputWorkaround");
  CheckBoxPreference longclickWorkaround=(CheckBoxPreference)getPreferenceScreen().findPreference("textSelectionLongclickWorkaround");
  fixHebrewText=(CheckBoxPreference)getPreferenceScreen().findPreference("fixHebrewText");
  CheckBoxPreference fixArabicText=(CheckBoxPreference)getPreferenceScreen().findPreference("fixArabicText");
  CheckBoxPreference safeDisplayMode=(CheckBoxPreference)getPreferenceScreen().findPreference("safeDisplay");
  CompatHelper.removeHiddenPreferences(this.getApplicationContext());
  if (CompatHelper.getSdkVersion() >= 9) {
    workarounds.removePreference(fixArabicText);
  }
  if (CompatHelper.isHoneycomb()) {
    workarounds.removePreference(longclickWorkaround);
  }
  if (CompatHelper.getSdkVersion() >= 13) {
    workarounds.removePreference(safeDisplayMode);
  }
  if (CompatHelper.getSdkVersion() >= 15) {
    workarounds.removePreference(inputWorkaround);
  }
  if (CompatHelper.getSdkVersion() >= 16) {
    workarounds.removePreference(fixHebrewText);
    advanced.removePreference(workarounds);
  }
  initializeLanguageDialog();
  Preference fontsPreference=getPreferenceScreen().findPreference("font_preference_group");
  fontsPreference.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      initializeCustomFontsDialog();
      return false;
    }
  }
);
  collectionPathPreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    final Object newValue){
      final String newPath=(String)newValue;
      try {
        CollectionHelper.initializeAnkiDroidDirectory(newPath);
        return true;
      }
 catch (      StorageAccessException e) {
        Timber.e(e,"Could not initialize directory: %s",newPath);
        Toast.makeText(getApplicationContext(),R.string.dialog_collection_path_not_dir,Toast.LENGTH_LONG).show();
        return false;
      }
    }
  }
);
  Preference dialogPreference=getPreferenceScreen().findPreference("about_dialog_preference");
  dialogPreference.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      startActivity(new Intent(Preferences.this,Info.class));
      return true;
    }
  }
);
  dialogPreference.setSummary(getResources().getString(R.string.about_version) + " " + VersionUtils.getPkgVersionName());
  Preference fullSyncPreference=getPreferenceScreen().findPreference("force_full_sync");
  fullSyncPreference.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (mCol != null && mCol.getDb() != null) {
        mCol.modSchemaNoCheck();
        mCol.setMod();
        Toast.makeText(getApplicationContext(),R.string.ok,Toast.LENGTH_SHORT).show();
      }
 else {
        Toast.makeText(getApplicationContext(),R.string.vague_error,Toast.LENGTH_SHORT).show();
      }
      return true;
    }
  }
);
  if (mCol != null) {
    mStartDate=GregorianCalendar.getInstance();
    Timestamp timestamp=new Timestamp(mCol.getCrt() * 1000);
    mStartDate.setTimeInMillis(timestamp.getTime());
    dayOffset.setValue(mStartDate.get(Calendar.HOUR_OF_DAY));
    try {
      JSONObject conf=mCol.getConf();
      learnCutoff.setValue(conf.getInt("collapseTime") / 60);
      timeLimit.setValue(conf.getInt("timeLim") / 60);
      showEstimates.setChecked(conf.getBoolean("estTimes"));
      showProgress.setChecked(conf.getBoolean("dueCounts"));
      newSpread.setValueIndex(conf.getInt("newSpread"));
      useCurrent.setValueIndex(conf.optBoolean("addToCur",true) ? 0 : 1);
    }
 catch (    JSONException|NumberFormatException e) {
      throw new RuntimeException();
    }
  }
 else {
    dayOffset.setEnabled(false);
    learnCutoff.setEnabled(false);
    timeLimit.setEnabled(false);
    showEstimates.setEnabled(false);
    showProgress.setEnabled(false);
    newSpread.setEnabled(false);
    useCurrent.setEnabled(false);
  }
  for (  String key : sShowValueInSummList) {
    if (Arrays.asList(sListNumericCheck).contains(key)) {
      updateListPreference(key,true);
    }
 else {
      updateListPreference(key,false);
    }
  }
  for (  String key : sShowValueInSummSeek) {
    updateSeekBarPreference(key);
  }
  for (  String key : sShowValueInSummEditText) {
    updateEditTextPreference(key);
  }
  for (  String key : sShowValueInSummNumRange) {
    updateNumberRangePreference(key);
  }
  updateNotificationPreference();
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}
