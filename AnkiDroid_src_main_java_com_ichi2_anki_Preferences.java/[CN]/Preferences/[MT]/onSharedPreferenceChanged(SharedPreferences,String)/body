{
  try {
    Preference pref=getPreferenceScreen().findPreference(key);
switch (key) {
case "timeoutAnswer":
      CheckBoxPreference keepScreenOn=(CheckBoxPreference)getPreferenceScreen().findPreference("keepScreenOn");
    keepScreenOn.setChecked(((CheckBoxPreference)pref).isChecked());
  break;
case LANGUAGE:
closePreferences();
break;
case "useBackup":
if (lockCheckAction) {
lockCheckAction=false;
}
 else if (!((CheckBoxPreference)pref).isChecked()) {
lockCheckAction=true;
((CheckBoxPreference)pref).setChecked(true);
showDialog(DIALOG_BACKUP);
}
break;
case "convertFenText":
if (((CheckBoxPreference)pref).isChecked()) {
ChessFilter.install(Hooks.getInstance(getApplicationContext()));
}
 else {
ChessFilter.uninstall(Hooks.getInstance(getApplicationContext()));
}
break;
case "fixHebrewText":
if (((CheckBoxPreference)pref).isChecked()) {
HebrewFixFilter.install(Hooks.getInstance(getApplicationContext()));
showDialog(DIALOG_HEBREW_FONT);
}
 else {
HebrewFixFilter.uninstall(Hooks.getInstance(getApplicationContext()));
}
break;
case "showProgress":
mCol.getConf().put("dueCounts",((CheckBoxPreference)pref).isChecked());
mCol.setMod();
break;
case "showEstimates":
mCol.getConf().put("estTimes",((CheckBoxPreference)pref).isChecked());
mCol.setMod();
break;
case "newSpread":
mCol.getConf().put("newSpread",Integer.parseInt(((ListPreference)pref).getValue()));
mCol.setMod();
break;
case "timeLimit":
mCol.getConf().put("timeLim",((NumberRangePreference)pref).getValue() * 60);
mCol.setMod();
break;
case "learnCutoff":
mCol.getConf().put("collapseTime",((NumberRangePreference)pref).getValue() * 60);
mCol.setMod();
break;
case "useCurrent":
mCol.getConf().put("addToCur",((ListPreference)pref).getValue().equals("0"));
mCol.setMod();
break;
case "dayOffset":
int hours=((SeekBarPreference)pref).getValue();
Calendar date=new GregorianCalendar();
date.set(Calendar.HOUR_OF_DAY,hours);
mCol.setCrt(date.getTimeInMillis() / 1000);
mCol.setMod();
break;
case "minimumCardsDueForNotification":
updateNotificationPreference();
break;
case "reportErrorMode":
String value=sharedPreferences.getString("reportErrorMode","");
AnkiDroidApp.getInstance().setAcraReportingMode(value);
break;
}
updateSummary(findPreference(key));
}
 catch (BadTokenException e) {
Timber.e(e,"Preferences: BadTokenException on showDialog");
}
catch (NumberFormatException|JSONException e) {
throw new RuntimeException();
}
}
