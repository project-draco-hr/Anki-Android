{
  try {
    PreferenceScreen screen=listener.getPreferenceScreen();
    Preference pref=screen.findPreference(key);
switch (key) {
case "timeoutAnswer":
{
        CheckBoxPreference keepScreenOn=(CheckBoxPreference)screen.findPreference("keepScreenOn");
        keepScreenOn.setChecked(((CheckBoxPreference)pref).isChecked());
        break;
      }
case LANGUAGE:
    closePreferences();
  break;
case "convertFenText":
if (((CheckBoxPreference)pref).isChecked()) {
  ChessFilter.install(Hooks.getInstance(getApplicationContext()));
}
 else {
  ChessFilter.uninstall(Hooks.getInstance(getApplicationContext()));
}
break;
case "fixHebrewText":
if (((CheckBoxPreference)pref).isChecked()) {
HebrewFixFilter.install(Hooks.getInstance(getApplicationContext()));
showDialog(DIALOG_HEBREW_FONT);
}
 else {
HebrewFixFilter.uninstall(Hooks.getInstance(getApplicationContext()));
}
break;
case "advanced_statistics_enabled":
if (((CheckBoxPreference)pref).isChecked()) {
AdvancedStatistics.install(Hooks.getInstance(getApplicationContext()));
}
 else {
AdvancedStatistics.uninstall(Hooks.getInstance(getApplicationContext()));
}
break;
case "showProgress":
getCol().getConf().put("dueCounts",((CheckBoxPreference)pref).isChecked());
getCol().setMod();
break;
case "showEstimates":
getCol().getConf().put("estTimes",((CheckBoxPreference)pref).isChecked());
getCol().setMod();
break;
case "newSpread":
getCol().getConf().put("newSpread",Integer.parseInt(((ListPreference)pref).getValue()));
getCol().setMod();
break;
case "timeLimit":
getCol().getConf().put("timeLim",((NumberRangePreference)pref).getValue() * 60);
getCol().setMod();
break;
case "learnCutoff":
getCol().getConf().put("collapseTime",((NumberRangePreference)pref).getValue() * 60);
getCol().setMod();
break;
case "useCurrent":
getCol().getConf().put("addToCur",((ListPreference)pref).getValue().equals("0"));
getCol().setMod();
break;
case "dayOffset":
{
int hours=((SeekBarPreference)pref).getValue();
Timestamp crtTime=new Timestamp(getCol().getCrt() * 1000);
Calendar date=GregorianCalendar.getInstance();
date.setTimeInMillis(crtTime.getTime());
date.set(Calendar.HOUR_OF_DAY,hours);
getCol().setCrt(date.getTimeInMillis() / 1000);
getCol().setMod();
break;
}
case "minimumCardsDueForNotification":
{
ListPreference listpref=(ListPreference)screen.findPreference("minimumCardsDueForNotification");
if (listpref != null) {
updateNotificationPreference(listpref);
}
break;
}
case "reportErrorMode":
{
String value=prefs.getString("reportErrorMode","");
AnkiDroidApp.getInstance().setAcraReportingMode(value);
AnkiDroidApp.getSharedPrefs(this).edit().remove("sentExceptionReports").apply();
break;
}
case "syncAccount":
{
SharedPreferences preferences=AnkiDroidApp.getSharedPrefs(getBaseContext());
String username=preferences.getString("username","");
Preference syncAccount=screen.findPreference("syncAccount");
if (syncAccount != null) {
if (TextUtils.isEmpty(username)) {
syncAccount.setSummary(R.string.sync_account_summ_logged_out);
}
 else {
syncAccount.setSummary(getString(R.string.sync_account_summ_logged_in,username));
}
}
break;
}
case "providerEnabled":
{
ComponentName providerName=new ComponentName(this,"com.ichi2.anki.provider.CardContentProvider");
PackageManager pm=getPackageManager();
int state;
if (((CheckBoxPreference)pref).isChecked()) {
state=PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
Timber.i("AnkiDroid ContentProvider enabled by user");
}
 else {
state=PackageManager.COMPONENT_ENABLED_STATE_DISABLED;
Timber.i("AnkiDroid ContentProvider disabled by user");
}
pm.setComponentEnabledSetting(providerName,state,PackageManager.DONT_KILL_APP);
break;
}
}
updateSummary(pref);
}
 catch (BadTokenException e) {
Timber.e(e,"Preferences: BadTokenException on showDialog");
}
catch (NumberFormatException|JSONException e) {
throw new RuntimeException();
}
}
