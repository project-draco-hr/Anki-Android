{
  InputStream cont;
  try {
    HttpResponse ret=super.req("download");
    if (ret == null) {
      return null;
    }
    cont=ret.getEntity().getContent();
  }
 catch (  IllegalStateException e1) {
    throw new RuntimeException(e1);
  }
catch (  IOException e1) {
    return null;
  }
  if (mCol == null) {
    Timber.e("Collection was unexpectedly null");
    return null;
  }
  String path=mCol.getPath();
  mCol.close(false);
  mCol=null;
  String tpath=path + ".tmp";
  try {
    super.writeToFile(cont,tpath);
  }
 catch (  IOException e) {
    Timber.e(e,"Full sync failed to download collection.");
    return new Object[]{"sdAccessError"};
  }
  try {
    FileInputStream fis=new FileInputStream(tpath);
    if (super.stream2String(fis,15).equals("upgradeRequired")) {
      return new Object[]{"upgradeRequired"};
    }
  }
 catch (  FileNotFoundException e1) {
    throw new RuntimeException(e1);
  }
  mCon.publishProgress(R.string.sync_check_download_file);
  try {
    AnkiDb d=AnkiDatabaseManager.getDatabase(tpath);
    if (!d.queryString("PRAGMA integrity_check").equalsIgnoreCase("ok")) {
      Timber.e("Full sync - downloaded file corrupt");
      return new Object[]{"remoteDbError"};
    }
  }
 catch (  SQLiteDatabaseCorruptException e) {
    Timber.e("Full sync - downloaded file corrupt");
    return new Object[]{"remoteDbError"};
  }
 finally {
    AnkiDatabaseManager.closeDatabase(tpath);
  }
  File newFile=new File(tpath);
  if (newFile.renameTo(new File(path))) {
    return new Object[]{"success"};
  }
 else {
    return new Object[]{"overwriteError"};
  }
}
