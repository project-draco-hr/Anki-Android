{
  int len=0;
  File[] fileList;
  TreeSet<HashMap<String,String>> tree=new TreeSet<HashMap<String,String>>(new HashMapCompare());
  File dir=new File(location);
  fileList=dir.listFiles(new AnkiFilter());
  if (dir.exists() && dir.isDirectory() && fileList != null) {
    len=fileList.length;
  }
  mFileList=fileList;
  if (len > 0 && fileList != null) {
    for (int i=0; i < len; i++) {
      String absPath=fileList[i].getAbsolutePath();
      HashMap<String,String> data=new HashMap<String,String>();
      data.put("name",fileList[i].getName().replaceAll(".anki",""));
      data.put("due","Loading deck...");
      data.put("new","");
      data.put("mod",String.format("%f",Deck.getLastModified(absPath)));
      data.put("filepath",absPath);
      data.put("showProgress","true");
      tree.add(data);
    }
    Thread thread=new Thread(this);
    thread.start();
  }
 else {
    HashMap<String,String> data=new HashMap<String,String>();
    data.put("name","No decks found.");
    data.put("new","");
    data.put("due","");
    data.put("mod","1");
    data.put("showProgress","false");
    tree.add(data);
  }
  mDeckList.clear();
  mDeckList.addAll(tree);
  mDeckListView.clearChoices();
}
