{
  mTotalDueCards=0;
  mTotalCards=0;
  setTitleText();
  Resources res=getResources();
  int len=0;
  File[] fileList;
  TreeSet<HashMap<String,String>> tree=new TreeSet<HashMap<String,String>>(new HashMapCompare());
  File dir=new File(location);
  fileList=dir.listFiles(new AnkiFilter());
  if (dir.exists() && dir.isDirectory() && fileList != null) {
    len=fileList.length;
  }
  mFileList=fileList;
  if (len > 0 && fileList != null) {
    for (    File file : fileList) {
      String absPath=file.getAbsolutePath();
      try {
        HashMap<String,String> data=new HashMap<String,String>();
        data.put("name",file.getName().replaceAll(".anki",""));
        data.put("due",res.getString(R.string.deckpicker_loaddeck));
        data.put("new","");
        data.put("mod",String.format("%f",Deck.getLastModified(absPath)));
        data.put("filepath",absPath);
        data.put("showProgress","true");
        tree.add(data);
      }
 catch (      SQLException e) {
        Log.w(AnkiDroidApp.TAG,"DeckPicker - populateDeckList, File " + file.getName() + " is not a real anki file");
      }
    }
    SharedPreferences preferences=PrefSettings.getSharedPrefs(getBaseContext());
    if (preferences.getBoolean("syncEnabled",false)) {
      mSyncAllBar.setVisibility(View.VISIBLE);
    }
    Thread thread=new Thread(this);
    thread.start();
  }
 else {
    if (!AnkiDroidApp.isSdCardMounted()) {
      setTitle(R.string.deckpicker_title_nosdcard);
      showDialog(DIALOG_NO_SDCARD);
    }
    HashMap<String,String> data=new HashMap<String,String>();
    data.put("name",res.getString(R.string.deckpicker_nodeck));
    data.put("new","");
    data.put("due","");
    data.put("mod","1");
    data.put("showProgress","false");
    tree.add(data);
    mSyncAllBar.setVisibility(View.GONE);
  }
  mDeckList.clear();
  mDeckList.addAll(tree);
  mDeckListView.clearChoices();
  mDeckListAdapter.notifyDataSetChanged();
}
