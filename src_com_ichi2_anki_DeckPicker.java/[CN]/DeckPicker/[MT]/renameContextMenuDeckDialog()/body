{
  Resources res=getResources();
  StyledDialog.Builder builder2=new StyledDialog.Builder(DeckPicker.this);
  builder2.setTitle(res.getString(R.string.contextmenu_deckpicker_rename_deck));
  mDialogEditText=new EditText(DeckPicker.this);
  mDialogEditText.setSingleLine();
  mDialogEditText.setText(getCol().getDecks().name(mContextMenuDid));
  builder2.setView(mDialogEditText,false,false);
  builder2.setPositiveButton(res.getString(R.string.rename),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      String newName=mDialogEditText.getText().toString().replaceAll("['\"]","");
      Collection col=getCol();
      if (col != null) {
        if (col.getDecks().rename(col.getDecks().get(mContextMenuDid),newName)) {
          for (          HashMap<String,String> d : mDeckList) {
            if (d.get("did").equals(Long.toString(mContextMenuDid))) {
              d.put("name",newName);
            }
          }
          mDeckListAdapter.notifyDataSetChanged();
          loadCounts();
        }
 else {
          try {
            Themes.showThemedToast(DeckPicker.this,getResources().getString(R.string.rename_error,col.getDecks().get(mContextMenuDid).get("name")),false);
          }
 catch (          JSONException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
);
  builder2.setNegativeButton(res.getString(R.string.dialog_cancel),null);
  builder2.create().show();
  return;
}
