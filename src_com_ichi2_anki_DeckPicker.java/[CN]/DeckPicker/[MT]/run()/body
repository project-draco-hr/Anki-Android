{
  Log.i(AnkiDroidApp.TAG,"Thread run - Beginning");
  if (mFileList != null && mFileList.length > 0) {
    mLock.lock();
    try {
      Log.i(AnkiDroidApp.TAG,"Thread run - Inside lock");
      mIsFinished=false;
      int i=0;
      for (      File file : mFileList) {
        i++;
        Log.i(AnkiDroidApp.TAG,"Thread run - Before break mDeckIsSelected = " + mDeckIsSelected);
        if (mDeckIsSelected) {
          break;
        }
        String path=file.getAbsolutePath();
        Deck deck;
        int version=0;
        try {
          version=Deck.getDeckVersion(path);
        }
 catch (        SQLException e) {
          Log.w(AnkiDroidApp.TAG,"Could not open database " + path);
          continue;
        }
        if (version < Deck.DECK_VERSION) {
          Bundle data=new Bundle();
          data.putString("absPath",path);
          data.putInt("msgtype",MSG_UPGRADE_NEEDED);
          data.putInt("version",version);
          data.putString("notes","");
          Message msg=Message.obtain();
          msg.setData(data);
          mHandler.sendMessage(msg);
        }
        try {
          deck=Deck.openDeck(path,false);
          version=deck.getVersion();
        }
 catch (        SQLException e) {
          Log.w(AnkiDroidApp.TAG,"Could not open database " + path);
          continue;
        }
        Bundle data=new Bundle();
        Message msg=Message.obtain();
        if (false) {
          data.putString("absPath",path);
          data.putInt("msgtype",MSG_UPGRADE_FAILURE);
          data.putInt("version",version);
          deck.closeDeck(false);
          msg.setData(data);
          mHandler.sendMessage(msg);
        }
 else {
          int[] counts=deck.getSched().allCounts();
          int dueCards=counts[Scheduler.COUNTS_REV] + counts[Scheduler.COUNTS_LRN];
          int totalCards=deck.cardCount();
          int newCards=counts[Scheduler.COUNTS_NEW];
          int totalNewCards=deck.totalNewCardCount(false);
          int eta=deck.getSched().eta() / 60;
          String upgradeNotes="";
          deck.closeDeck(false);
          data.putString("absPath",path);
          data.putInt("msgtype",MSG_UPGRADE_SUCCESS);
          data.putInt("due",dueCards);
          data.putInt("total",totalCards);
          data.putInt("new",newCards);
          data.putInt("totalNew",totalNewCards);
          data.putString("notes",upgradeNotes);
          double[] completion=deck.completionRates(false);
          data.putInt("rateOfCompletionMat",(int)(completion[0] * 100));
          data.putInt("rateOfCompletionAll",(int)(Math.max(0,completion[1] - completion[0]) * 100));
          if (i == mFileList.length) {
            data.putBoolean("lastDeck",true);
          }
 else {
            data.putBoolean("lastDeck",false);
          }
          msg.setData(data);
          mTotalDueCards+=dueCards;
          mTotalCards+=totalCards;
          mTotalTime+=eta;
          mHandler.sendMessage(msg);
        }
      }
      mIsFinished=true;
      mHandler.sendEmptyMessage(0);
      mCondFinished.signal();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      mLock.unlock();
    }
  }
}
