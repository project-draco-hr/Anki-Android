{
  Resources res=getResources();
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(res.getString(R.string.sync_log_title));
  builder.setPositiveButton(res.getString(R.string.ok),null);
  mSyncLogAlert=builder.create();
  builder=new AlertDialog.Builder(this);
  builder.setTitle(res.getString(R.string.deckpicker_upgrade_notes_title));
  builder.setPositiveButton(res.getString(R.string.ok),null);
  mUpgradeNotesAlert=builder.create();
  builder=new AlertDialog.Builder(this);
  builder.setTitle(res.getString(R.string.deckpicker_download_missing_title));
  builder.setPositiveButton(res.getString(R.string.ok),null);
  mMissingMediaAlert=builder.create();
  mProgressDialog=new ProgressDialog(DeckPicker.this);
  mProgressDialog.setTitle(R.string.deckpicker_download_missing_title);
  mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  mProgressDialog.setMax(100);
  mProgressDialog.setCancelable(false);
  builder.setTitle(getResources().getString(R.string.backup_manager_title));
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(getResources().getString(R.string.backup_deck_no_space_left));
  builder.setPositiveButton(getResources().getString(R.string.ok),null);
  mNoSpaceLeftAlert=builder.create();
  builder.setTitle(res.getString(R.string.backup_manager_title));
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setPositiveButton(res.getString(R.string.backup_restore),new Dialog.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      mBackups=BackupManager.getDeckBackups(new File(mCurrentDeckPath));
      if (mBackups.length == 0) {
        Themes.showThemedToast(DeckPicker.this,getResources().getString(R.string.backup_restore_no_backups),true);
      }
 else {
        CharSequence[] dates=new CharSequence[mBackups.length];
        for (int i=0; i < mBackups.length; i++) {
          dates[i]=mBackups[i].getName().replaceAll(".*-(\\d{4}-\\d{2}-\\d{2}).anki","$1");
        }
        AlertDialog.Builder builder=new AlertDialog.Builder(DeckPicker.this);
        builder.setTitle(getResources().getString(R.string.backup_restore_select_title)).setIcon(android.R.drawable.ic_input_get).setSingleChoiceItems(dates,dates.length,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            DeckTask.launchDeckTask(DeckTask.TASK_TYPE_RESTORE_DECK,mRestoreDeckHandler,new DeckTask.TaskData(null,new String[]{mCurrentDeckPath,mBackups[which].getPath()},0,0));
            dialog.dismiss();
          }
        }
).setCancelable(true).setOnCancelListener(new OnCancelListener(){
          @Override public void onCancel(          DialogInterface arg0){
            mDeckNotLoadedAlert.show();
          }
        }
).show();
      }
    }
  }
);
  builder.setNegativeButton(res.getString(R.string.delete_deck_title),new Dialog.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Resources res=getResources();
      AlertDialog.Builder builder=new AlertDialog.Builder(DeckPicker.this);
      builder.setCancelable(true).setTitle(res.getString(R.string.delete_deck_title)).setIcon(android.R.drawable.ic_dialog_alert).setMessage(String.format(res.getString(R.string.delete_deck_message),new File(mCurrentDeckPath).getName().replace(".anki",""))).setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          File file=new File(mCurrentDeckPath);
          boolean deleted=file.delete();
          if (deleted) {
            DeckPicker.removeDir(new File(mCurrentDeckPath.replace(".anki",".media")));
            Log.i(AnkiDroidApp.TAG,"Broken deck " + mCurrentDeckPath + " has been deleted");
          }
 else {
            Log.e(AnkiDroidApp.TAG,"Broken deck " + mCurrentDeckPath + " could not be deleted");
          }
          Themes.showThemedToast(DeckPicker.this,getResources().getString(R.string.delete_deck_success,new File(mCurrentDeckPath).getName().replace(".anki","")),true);
          mRestoredOrDeleted=true;
          handleRestoreDecks(true);
        }
      }
).setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mDeckNotLoadedAlert.show();
        }
      }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
        @Override public void onCancel(        DialogInterface dialog){
          mDeckNotLoadedAlert.show();
        }
      }
).show();
    }
  }
);
  builder.setCancelable(true);
  builder.setOnCancelListener(new OnCancelListener(){
    @Override public void onCancel(    DialogInterface arg0){
      mAlreadyDealtWith.add(mCurrentDeckPath);
      handleRestoreDecks(true);
    }
  }
);
  mDeckNotLoadedAlert=builder.create();
}
