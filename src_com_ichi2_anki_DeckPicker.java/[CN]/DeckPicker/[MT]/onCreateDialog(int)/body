{
  StyledDialog dialog;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_NO_SDCARD:
    builder.setMessage("The SD card could not be read. Please, turn off USB storage.");
  builder.setPositiveButton("OK",null);
dialog=builder.create();
break;
case DIALOG_SELECT_HELP:
builder.setTitle(res.getString(R.string.help_title));
builder.setItems(new String[]{res.getString(R.string.help_tutorial),res.getString(R.string.help_online),res.getString(R.string.help_faq)},new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
if (arg1 == 0) {
createTutorialDeck();
}
 else {
if (Utils.isIntentAvailable(DeckPicker.this,"android.intent.action.VIEW")) {
  Intent intent=new Intent("android.intent.action.VIEW",Uri.parse(getResources().getString(arg1 == 0 ? R.string.link_help : R.string.link_faq)));
  startActivity(intent);
}
 else {
  startActivity(new Intent(DeckPicker.this,Info.class));
}
}
}
}
);
dialog=builder.create();
break;
case DIALOG_CONNECTION_ERROR:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_error_message));
builder.setPositiveButton(res.getString(R.string.retry),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
sync(null);
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SYNC_CONFLICT_RESOLUTION:
builder.setTitle(res.getString(R.string.sync_conflict_title));
builder.setIcon(android.R.drawable.ic_input_get);
builder.setMessage(res.getString(R.string.sync_conflict_message));
builder.setPositiveButton(res.getString(R.string.sync_conflict_local),mSyncConflictResolutionListener);
builder.setNeutralButton(res.getString(R.string.sync_conflict_remote),mSyncConflictResolutionListener);
builder.setNegativeButton(res.getString(R.string.sync_conflict_cancel),mSyncConflictResolutionListener);
builder.setCancelable(false);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN_SYNC:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
builder.setNegativeButton(res.getString(R.string.cancel),null);
builder.setPositiveButton(res.getString(R.string.log_in),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(DeckPicker.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN_FOR_SYNC);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.FADE);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_NO_CONNECTION:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_needed));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_DELETE_DECK:
builder.setTitle(res.getString(R.string.delete_deck_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(String.format(res.getString(R.string.delete_deck_message),"\'" + mCurrentDeckFilename + "\'"));
builder.setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
removeDeck(mCurrentDeckPath);
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
case DIALOG_DELETE_BACKUPS:
builder.setTitle(res.getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(String.format(res.getString(R.string.backup_delete_deck_backups_alert),"\'" + mCurrentDeckFilename + "\'"));
builder.setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
case DIALOG_SELECT_STATISTICS_TYPE:
dialog=ChartBuilder.getStatisticsDialog(this,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_STATISTICS,mLoadStatisticsHandler,new DeckTask.TaskData(mCol,which,true));
}
}
);
break;
case DIALOG_OPTIMIZE_DATABASE:
builder.setTitle(res.getString(R.string.optimize_deck_title));
builder.setPositiveButton(res.getString(R.string.ok),null);
builder.setIcon(android.R.drawable.ic_dialog_alert);
dialog=builder.create();
break;
case DIALOG_CONTEXT_MENU:
String[] entries=new String[5];
entries[CONTEXT_MENU_DECK_SUMMARY]="";
entries[CONTEXT_MENU_CUSTOM_DICTIONARY]=res.getString(R.string.contextmenu_deckpicker_set_custom_dictionary);
entries[CONTEXT_MENU_RESET_LANGUAGE]=res.getString(R.string.contextmenu_deckpicker_reset_language_assignments);
entries[CONTEXT_MENU_RENAME_DECK]=res.getString(R.string.contextmenu_deckpicker_rename_deck);
entries[CONTEXT_MENU_DELETE_DECK]=res.getString(R.string.contextmenu_deckpicker_delete_deck);
builder.setTitle("Context Menu");
builder.setIcon(R.drawable.ic_menu_manage);
builder.setItems(entries,mContextMenuListener);
dialog=builder.create();
break;
case DIALOG_REPAIR_DECK:
builder.setTitle(res.getString(R.string.backup_repair_deck));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.yes),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK,mRepairDeckHandler,new DeckTask.TaskData(mCurrentDeckPath));
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
case DIALOG_SYNC_LOG:
builder.setTitle(res.getString(R.string.sync_log_title));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_BACKUP_NO_SPACE_LEFT:
builder.setTitle(res.getString(R.string.attention));
builder.setMessage(res.getString(R.string.backup_deck_no_space_left));
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
loadCollection();
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
loadCollection();
}
}
);
dialog=builder.create();
break;
case DIALOG_NO_SPACE_LEFT:
builder.setTitle(res.getString(R.string.attention));
builder.setMessage(res.getString(R.string.sd_space_warning,BackupManager.MIN_FREE_SPACE));
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
finish();
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
finish();
}
}
);
dialog=builder.create();
break;
default :
dialog=null;
}
if (dialog != null) {
dialog.setOwnerActivity(this);
}
return dialog;
}
