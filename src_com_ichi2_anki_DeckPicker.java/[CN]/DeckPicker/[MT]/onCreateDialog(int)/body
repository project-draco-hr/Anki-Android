{
  StyledDialog dialog;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_OK:
    builder.setPositiveButton(R.string.ok,null);
  dialog=builder.create();
break;
case DIALOG_NO_SDCARD:
builder.setMessage("The SD card could not be read. Please, turn off USB storage.");
builder.setPositiveButton(R.string.ok,null);
dialog=builder.create();
break;
case DIALOG_SELECT_HELP:
builder.setTitle(res.getString(R.string.help_title));
builder.setItems(new String[]{res.getString(R.string.help_tutorial),res.getString(R.string.help_online),res.getString(R.string.help_faq)},new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
if (arg1 == 0) {
createTutorialDeck();
}
 else {
if (Utils.isIntentAvailable(DeckPicker.this,"android.intent.action.VIEW")) {
Intent intent=new Intent("android.intent.action.VIEW",Uri.parse(getResources().getString(arg1 == 0 ? R.string.link_help : R.string.link_faq)));
startActivity(intent);
}
 else {
startActivity(new Intent(DeckPicker.this,Info.class));
}
}
}
}
);
dialog=builder.create();
break;
case DIALOG_CONNECTION_ERROR:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_error_message));
builder.setPositiveButton(res.getString(R.string.retry),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
sync();
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SYNC_CONFLICT_RESOLUTION:
builder.setTitle(res.getString(R.string.sync_conflict_title));
builder.setIcon(android.R.drawable.ic_input_get);
builder.setMessage(res.getString(R.string.sync_conflict_message));
builder.setPositiveButton(res.getString(R.string.sync_conflict_local),mSyncConflictResolutionListener);
builder.setNeutralButton(res.getString(R.string.sync_conflict_remote),mSyncConflictResolutionListener);
builder.setNegativeButton(res.getString(R.string.sync_conflict_cancel),mSyncConflictResolutionListener);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_LOAD_FAILED:
builder.setMessage(res.getString(R.string.open_collection_failed_message,BackupManager.BROKEN_DECKS_SUFFIX,res.getString(R.string.repair_deck)));
builder.setTitle(R.string.open_collection_failed_title);
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.error_handling_options),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
builder.setNegativeButton(res.getString(R.string.close),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
finish();
}
}
);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
finish();
}
}
);
dialog=builder.create();
break;
case DIALOG_DB_ERROR:
builder.setMessage(R.string.answering_error_message);
builder.setTitle(R.string.answering_error_title);
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.error_handling_options),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
builder.setNeutralButton(res.getString(R.string.answering_error_report),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent i=new Intent(DeckPicker.this,Feedback.class);
i.putExtra("request",RESULT_DB_ERROR);
dialog.dismiss();
startActivityForResult(i,REPORT_ERROR);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.RIGHT);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.close),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (mCol == null) {
finish();
}
}
}
);
builder.setCancelable(true);
dialog=builder.create();
break;
case DIALOG_ERROR_HANDLING:
builder.setTitle(res.getString(R.string.error_handling_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setSingleChoiceItems(new String[]{"1"},0,null);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
if (mCol == null) {
showDialog(DIALOG_LOAD_FAILED);
}
 else {
showDialog(DIALOG_DB_ERROR);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (mCol == null) {
showDialog(DIALOG_LOAD_FAILED);
}
 else {
showDialog(DIALOG_DB_ERROR);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN_ADD_SHARED_DECK:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
builder.setNegativeButton(res.getString(R.string.cancel),null);
builder.setPositiveButton(res.getString(R.string.log_in),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(DeckPicker.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN_FOR_SHARED_DECK);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.FADE);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN_SYNC:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
builder.setNegativeButton(res.getString(R.string.cancel),null);
builder.setPositiveButton(res.getString(R.string.log_in),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(DeckPicker.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN_FOR_SYNC);
if (UIUtils.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.FADE);
}
}
}
);
dialog=builder.create();
break;
case DIALOG_NO_CONNECTION:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_needed));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_DELETE_DECK:
builder.setTitle(res.getString(R.string.delete_deck_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(String.format(res.getString(R.string.delete_deck_message),"\'" + mCol.getDecks().name(mCurrentDid) + "\'"));
builder.setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (mCol.getDecks().selected() == mCurrentDid) {
Fragment frag=(Fragment)getSupportFragmentManager().findFragmentById(R.id.studyoptions_fragment);
if (frag != null && frag instanceof StudyOptionsFragment) {
FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
ft.remove(frag);
ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
ft.commit();
}
}
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_DELETE_DECK,new DeckTask.TaskListener(){
@Override public void onPreExecute(){
mProgressDialog=StyledProgressDialog.show(DeckPicker.this,"",getResources().getString(R.string.delete_deck),true);
}
@Override public void onPostExecute(TaskData result){
if (result == null) {
return;
}
Object[] res=result.getObjArray();
updateDecksList((TreeSet<Object[]>)res[0],(Integer)res[1],(Integer)res[2]);
if (mProgressDialog.isShowing()) {
try {
mProgressDialog.dismiss();
}
 catch (Exception e) {
Log.e(AnkiDroidApp.TAG,"onPostExecute - Dialog dismiss Exception = " + e.getMessage());
}
}
}
@Override public void onProgressUpdate(TaskData... values){
}
}
,new TaskData(mCol,mCurrentDid));
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_SELECT_STATISTICS_TYPE:
dialog=ChartBuilder.getStatisticsDialog(this,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
boolean muh=mFragmented ? AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).getBoolean("statsRange",true) : true;
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_STATISTICS,mLoadStatisticsHandler,new DeckTask.TaskData(mCol,which,mFragmented ? AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).getBoolean("statsRange",true) : true));
}
}
,mFragmented);
break;
case DIALOG_CONTEXT_MENU:
String[] entries=new String[2];
entries[CONTEXT_MENU_RENAME_DECK]=res.getString(R.string.contextmenu_deckpicker_rename_deck);
entries[CONTEXT_MENU_DELETE_DECK]=res.getString(R.string.contextmenu_deckpicker_delete_deck);
builder.setTitle("Context Menu");
builder.setIcon(R.drawable.ic_menu_manage);
builder.setItems(entries,mContextMenuListener);
dialog=builder.create();
break;
case DIALOG_REPAIR_COLLECTION:
builder.setTitle(res.getString(R.string.backup_repair_deck));
builder.setMessage(res.getString(R.string.repair_deck_dialog,BackupManager.BROKEN_DECKS_SUFFIX));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.yes),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK,mRepairDeckHandler,new DeckTask.TaskData(mCol,mCol.getPath()));
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
dialog=builder.create();
break;
case DIALOG_SYNC_LOG:
builder.setTitle(res.getString(R.string.sync_log_title));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_BACKUP_NO_SPACE_LEFT:
builder.setTitle(res.getString(R.string.attention));
builder.setMessage(res.getString(R.string.backup_deck_no_space_left));
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
loadCollection();
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
loadCollection();
}
}
);
dialog=builder.create();
break;
case DIALOG_SD_CARD_NOT_MOUNTED:
case DIALOG_NO_SPACE_LEFT:
builder.setTitle(res.getString(R.string.attention));
if (id == DIALOG_NO_SPACE_LEFT) {
builder.setMessage(res.getString(R.string.sd_space_warning,BackupManager.MIN_FREE_SPACE));
}
 else {
builder.setMessage(res.getString(R.string.sd_card_not_mounted));
}
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
finish();
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
finish();
}
}
);
dialog=builder.create();
break;
case DIALOG_RESTORE_BACKUP:
case DIALOG_NEW_COLLECTION:
builder.setTitle(res.getString(R.string.backup_new_collection));
builder.setMessage(res.getString(R.string.backup_del_collection_question));
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (mCol != null) {
mCol.close(false);
}
String path=AnkiDroidApp.getCollectionPath();
AnkiDatabaseManager.closeDatabase(path);
if (BackupManager.moveDatabaseToBrokenFolder(path,false)) {
loadCollection();
}
 else {
showDialog(DIALOG_ERROR_HANDLING);
}
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
dialog=builder.create();
break;
case DIALOG_FULL_SYNC_FROM_SERVER:
builder.setTitle(res.getString(R.string.backup_full_sync_from_server));
builder.setMessage(res.getString(R.string.backup_full_sync_from_server_question));
builder.setPositiveButton(res.getString(R.string.ok),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
sync("download",mSyncMediaUsn);
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
builder.setCancelable(true);
builder.setOnCancelListener(new OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
showDialog(DIALOG_ERROR_HANDLING);
}
}
);
dialog=builder.create();
break;
default :
dialog=null;
}
if (dialog != null) {
dialog.setOwnerActivity(this);
}
return dialog;
}
