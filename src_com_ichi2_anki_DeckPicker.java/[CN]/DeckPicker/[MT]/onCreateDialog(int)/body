{
  StyledDialog dialog;
  Resources res=getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(this);
switch (id) {
case DIALOG_NO_SDCARD:
    builder.setMessage("The SD card could not be read. Please, turn off USB storage.");
  builder.setPositiveButton("OK",null);
dialog=builder.create();
break;
case DIALOG_USER_NOT_LOGGED_IN_SYNC:
case DIALOG_USER_NOT_LOGGED_IN_DOWNLOAD:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.no_user_password_error_message));
if (id == DIALOG_USER_NOT_LOGGED_IN_SYNC) {
builder.setPositiveButton(res.getString(R.string.log_in),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(DeckPicker.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN_FOR_SYNC);
if (StudyOptions.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.LEFT);
}
}
}
);
}
 else {
builder.setPositiveButton(res.getString(R.string.log_in),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
Intent myAccount=new Intent(DeckPicker.this,MyAccount.class);
myAccount.putExtra("notLoggedIn",true);
startActivityForResult(myAccount,LOG_IN_FOR_DOWNLOAD);
if (StudyOptions.getApiLevel() > 4) {
ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.LEFT);
}
}
}
);
}
builder.setNegativeButton(res.getString(R.string.cancel),null);
dialog=builder.create();
break;
case DIALOG_NO_CONNECTION:
builder.setTitle(res.getString(R.string.connection_error_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(res.getString(R.string.connection_needed));
builder.setPositiveButton(res.getString(R.string.ok),null);
dialog=builder.create();
break;
case DIALOG_DELETE_DECK:
builder.setTitle(res.getString(R.string.delete_deck_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(String.format(res.getString(R.string.delete_deck_message),"\'" + mCurrentDeckFilename + "\'"));
builder.setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
removeDeck(mCurrentDeckPath);
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
case DIALOG_DELETE_BACKUPS:
builder.setTitle(res.getString(R.string.backup_manager_title));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setMessage(String.format(res.getString(R.string.backup_delete_deck_backups_alert),"\'" + mCurrentDeckFilename + "\'"));
builder.setPositiveButton(res.getString(R.string.delete_deck_confirm),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (BackupManager.deleteDeckBackups(mCurrentDeckPath,0)) {
Themes.showThemedToast(DeckPicker.this,getResources().getString(R.string.backup_delete_deck_backups,"\'" + mCurrentDeckFilename + "\'"),true);
}
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setNegativeButton(res.getString(R.string.cancel),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
case DIALOG_SELECT_STATISTICS_TYPE:
builder.setTitle(res.getString(R.string.statistics_type_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_type_labels),Statistics.TYPE_DUE,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_SELECT_STATISTICS_PERIOD:
builder.setTitle(res.getString(R.string.statistics_period_title));
builder.setIcon(android.R.drawable.ic_menu_sort_by_size);
builder.setSingleChoiceItems(getResources().getStringArray(R.array.statistics_period_labels),0,mStatisticListener);
dialog=builder.create();
break;
case DIALOG_OPTIMIZE_DATABASE:
builder.setTitle(res.getString(R.string.optimize_deck_title));
builder.setPositiveButton(res.getString(R.string.ok),null);
builder.setIcon(android.R.drawable.ic_dialog_alert);
dialog=builder.create();
break;
case DIALOG_CONTEXT_MENU:
mCurrentDeckFilename=mDeckList.get(mContextMenuPosition).get("name");
if (mCurrentDeckFilename == null || mCurrentDeckFilename.equalsIgnoreCase(getResources().getString(R.string.deckpicker_nodeck))) {
dialog=null;
break;
}
String[] entries=new String[7];
entries[CONTEXT_MENU_OPTIMIZE]=res.getString(R.string.contextmenu_deckpicker_optimize_deck);
entries[CONTEXT_MENU_CUSTOM_DICTIONARY]=res.getString(R.string.contextmenu_deckpicker_set_custom_dictionary);
entries[CONTEXT_MENU_DOWNLOAD_MEDIA]=res.getString(R.string.contextmenu_deckpicker_download_missing_media);
entries[CONTEXT_MENU_RESET_LANGUAGE]=res.getString(R.string.contextmenu_deckpicker_reset_language_assignments);
entries[CONTEXT_MENU_REPAIR_DECK]=res.getString(R.string.backup_repair_deck);
entries[CONTEXT_MENU_REMOVE_BACKUPS]=res.getString(R.string.contextmenu_deckpicker_remove_backups);
entries[CONTEXT_MENU_DELETE_DECK]=res.getString(R.string.contextmenu_deckpicker_delete_deck);
builder.setTitle("contextmenu");
builder.setIcon(R.drawable.ic_menu_manage);
builder.setItems(entries,mContextMenuListener);
dialog=builder.create();
break;
case DIALOG_REPAIR_DECK:
builder.setTitle(res.getString(R.string.backup_repair_deck));
builder.setIcon(android.R.drawable.ic_dialog_alert);
builder.setPositiveButton(res.getString(R.string.yes),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK,mRepairDeckHandler,new DeckTask.TaskData(mCurrentDeckPath));
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setNegativeButton(res.getString(R.string.no),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface dialog){
mCurrentDeckPath=null;
mCurrentDeckFilename=null;
}
}
);
dialog=builder.create();
break;
default :
dialog=null;
}
dialog.setOwnerActivity(DeckPicker.this);
return dialog;
}
