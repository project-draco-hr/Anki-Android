{
  if (mDrawerToggle.onOptionsItemSelected(item)) {
    return true;
  }
  Resources res=getResources();
switch (item.getItemId()) {
case R.id.action_sync:
    sync();
  return true;
case R.id.action_add_note_from_deck_picker:
addNote();
return true;
case R.id.action_shared_decks:
if (AnkiDroidApp.getCol() != null) {
addSharedDeck();
}
return true;
case R.id.action_new_deck:
StyledDialog.Builder builder2=new StyledDialog.Builder(DeckPicker.this);
builder2.setTitle(res.getString(R.string.new_deck));
mDialogEditText=new EditText(DeckPicker.this);
builder2.setView(mDialogEditText,false,false);
builder2.setPositiveButton(res.getString(R.string.create),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
String deckName=mDialogEditText.getText().toString().replaceAll("[\'\"\\n\\r\\[\\]\\(\\)]","");
Log.i(AnkiDroidApp.TAG,"Creating deck: " + deckName);
AnkiDroidApp.getCol().getDecks().id(deckName,true);
loadCounts();
}
}
);
builder2.setNegativeButton(res.getString(R.string.dialog_cancel),null);
builder2.create().show();
return true;
case R.id.action_import:
showDialog(DIALOG_IMPORT_HINT);
return true;
case R.id.action_new_filtered_deck:
StyledDialog.Builder builder3=new StyledDialog.Builder(DeckPicker.this);
builder3.setTitle(res.getString(R.string.new_deck));
mDialogEditText=new EditText(DeckPicker.this);
ArrayList<String> names=AnkiDroidApp.getCol().getDecks().allNames();
int n=1;
String cramDeckName="Cram 1";
while (names.contains(cramDeckName)) {
n++;
cramDeckName="Cram " + n;
}
mDialogEditText.setText(cramDeckName);
builder3.setView(mDialogEditText,false,false);
builder3.setPositiveButton(res.getString(R.string.create),new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
long id=AnkiDroidApp.getCol().getDecks().newDyn(mDialogEditText.getText().toString());
openStudyOptions(id,new Bundle());
}
}
);
builder3.setNegativeButton(res.getString(R.string.dialog_cancel),null);
builder3.create().show();
return true;
case R.id.action_check_database:
StyledDialog dialog=(StyledDialog)onCreateDialog(this.DIALOG_CONFIRM_DATABASE_CHECK);
dialog.show();
return true;
case R.id.action_tutorial:
createTutorialDeck();
return true;
case R.id.action_restore_backup:
StyledDialog dialog2=(StyledDialog)onCreateDialog(this.DIALOG_CONFIRM_RESTORE_BACKUP);
dialog2.show();
return true;
default :
return super.onOptionsItemSelected(item);
}
}
