{
  Log.i(AnkiDroidApp.TAG,"DeckPicker - onCreate");
  if (!isTaskRoot()) {
    Log.i(AnkiDroidApp.TAG,"DeckPicker - onCreate: Detected multiple instance of this activity, closing it and return to root activity");
    Intent reloadIntent=new Intent(DeckPicker.this,DeckPicker.class);
    reloadIntent.setAction(Intent.ACTION_MAIN);
    reloadIntent.putExtras(getIntent().getExtras());
    reloadIntent.addCategory(Intent.CATEGORY_LAUNCHER);
    reloadIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    finish();
    startActivityIfNeeded(reloadIntent,0);
  }
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  SharedPreferences preferences=restorePreferences();
  if (mLastTimeOpened < UIUtils.getDayStart()) {
    preferences.edit().putBoolean("showBroadcastMessageToday",true).commit();
  }
  preferences.edit().putLong("lastTimeOpened",System.currentTimeMillis()).commit();
  BroadcastMessages.checkForNewMessages(this);
  View mainView=getLayoutInflater().inflate(R.layout.deck_picker,null);
  setContentView(mainView);
  Themes.setContentStyle(mainView,Themes.CALLER_DECKPICKER);
  registerExternalStorageListener();
  mAddButton=(ImageButton)findViewById(R.id.deckpicker_add);
  mAddButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(DeckPicker.this,CardEditor.class);
      intent.putExtra(CardEditor.EXTRA_CALLER,CardEditor.CALLER_DECKPICKER);
      startActivityForResult(intent,ADD_NOTE);
      if (UIUtils.getApiLevel() > 4) {
        ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.LEFT);
      }
    }
  }
);
  mCardsButton=(ImageButton)findViewById(R.id.deckpicker_card_browser);
  mCardsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent cardBrowser=new Intent(DeckPicker.this,CardBrowser.class);
      cardBrowser.putExtra("fromDeckpicker",true);
      startActivityForResult(cardBrowser,BROWSE_CARDS);
      if (UIUtils.getApiLevel() > 4) {
        ActivityTransitionAnimation.slide(DeckPicker.this,ActivityTransitionAnimation.LEFT);
      }
    }
  }
);
  mStatsButton=(ImageButton)findViewById(R.id.statistics_all_button);
  mStatsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      showDialog(DIALOG_SELECT_STATISTICS_TYPE);
    }
  }
);
  mSyncButton=(ImageButton)findViewById(R.id.sync_all_button);
  mSyncButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      sync();
    }
  }
);
  mDeckList=new ArrayList<HashMap<String,String>>();
  mDeckListView=(ListView)findViewById(R.id.files);
  mDeckListAdapter=new SimpleAdapter(this,mDeckList,R.layout.deck_item,new String[]{"name","new","lrn","rev","complMat","complAll","sep"},new int[]{R.id.DeckPickerName,R.id.deckpicker_new,R.id.deckpicker_lrn,R.id.deckpicker_rev,R.id.deckpicker_bar_mat,R.id.deckpicker_bar_all,R.id.DeckPickerName});
  mDeckListAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
    @Override public boolean setViewValue(    View view,    Object data,    String text){
      if (view.getId() == R.id.DeckPickerName) {
        View parent=(View)view.getParent().getParent();
        if (text.equals("top")) {
          parent.setBackgroundResource(R.drawable.white_deckpicker_top);
          return true;
        }
 else         if (text.equals("bot")) {
          parent.setBackgroundResource(R.drawable.white_deckpicker_bottom);
          return true;
        }
 else         if (text.equals("ful")) {
          parent.setBackgroundResource(R.drawable.white_deckpicker_full);
          return true;
        }
 else         if (text.equals("cen")) {
          parent.setBackgroundResource(R.drawable.white_deckpicker_center);
          return true;
        }
        return false;
      }
 else       if (view.getId() == R.id.deckpicker_bar_mat || view.getId() == R.id.deckpicker_bar_all) {
        if (text.length() > 0 && !text.equals("-1.0")) {
          Utils.updateProgressBars(view,(int)UIUtils.getDensityAdjustedValue(DeckPicker.this,3.4f),(int)(Double.parseDouble(text) * ((View)view.getParent().getParent().getParent()).getHeight()));
          View parent=(View)view.getParent().getParent();
          if (parent.getVisibility() == View.INVISIBLE) {
            parent.setVisibility(View.VISIBLE);
            parent.setAnimation(ViewAnimation.fade(ViewAnimation.FADE_IN,500,0));
          }
        }
        return true;
      }
 else       if (view.getVisibility() == View.INVISIBLE) {
        if (!text.equals("-1")) {
          view.setVisibility(View.VISIBLE);
          view.setAnimation(ViewAnimation.fade(ViewAnimation.FADE_IN,500,0));
          return false;
        }
      }
      return false;
    }
  }
);
  mDeckListView.setOnItemClickListener(mDeckSelHandler);
  mDeckListView.setAdapter(mDeckListAdapter);
  registerForContextMenu(mDeckListView);
  showStartupScreensAndDialogs(preferences,0);
  if (mSwipeEnabled) {
    gestureDetector=new GestureDetector(new MyGestureDetector());
    mDeckListView.setOnTouchListener(new View.OnTouchListener(){
      public boolean onTouch(      View v,      MotionEvent event){
        if (gestureDetector.onTouchEvent(event)) {
          return true;
        }
        return false;
      }
    }
);
  }
  showDialog(DIALOG_DB_ERROR);
}
