{
  Log.i(AnkiDroidApp.TAG,"DeckPicker - onCreate");
  Intent intent=getIntent();
  if (!isTaskRoot()) {
    Log.i(AnkiDroidApp.TAG,"DeckPicker - onCreate: Detected multiple instance of this activity, closing it and return to root activity");
    Intent reloadIntent=new Intent(DeckPicker.this,DeckPicker.class);
    reloadIntent.setAction(Intent.ACTION_MAIN);
    if (intent != null && intent.getExtras() != null) {
      reloadIntent.putExtras(intent.getExtras());
    }
    if (intent != null && intent.getData() != null) {
      reloadIntent.setData(intent.getData());
    }
    reloadIntent.addCategory(Intent.CATEGORY_LAUNCHER);
    reloadIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    finish();
    startActivityIfNeeded(reloadIntent,0);
  }
  if (intent.getData() != null) {
    mImportPath=getIntent().getData().getEncodedPath();
  }
  if (!AnkiDroidApp.colIsOpen()) {
    mOpenCollectionHandler.onPreExecute();
  }
  Themes.applyTheme(this);
  super.onCreate(savedInstanceState);
  setTitle(getResources().getString(R.string.app_name));
  SharedPreferences preferences=restorePreferences();
  if (mLastTimeOpened < UIUtils.getDayStart()) {
    preferences.edit().putBoolean("showBroadcastMessageToday",true).commit();
  }
  preferences.edit().putLong("lastTimeOpened",System.currentTimeMillis()).commit();
  BroadcastMessages.checkForNewMessages(this);
  View mainView=getLayoutInflater().inflate(R.layout.deck_picker,null);
  setContentView(mainView);
  View studyoptionsFrame=findViewById(R.id.studyoptions_fragment);
  mFragmented=studyoptionsFrame != null && studyoptionsFrame.getVisibility() == View.VISIBLE;
  Themes.setContentStyle(mFragmented ? mainView : mainView.findViewById(R.id.deckpicker_view),Themes.CALLER_DECKPICKER);
  registerExternalStorageListener();
  if (!mFragmented) {
    mAddButton=(ImageButton)findViewById(R.id.deckpicker_add);
    mAddButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        addNote();
      }
    }
);
    mCardsButton=(ImageButton)findViewById(R.id.deckpicker_card_browser);
    mCardsButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        openCardBrowser();
      }
    }
);
    mStatsButton=(ImageButton)findViewById(R.id.statistics_all_button);
    mStatsButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        showDialog(DIALOG_SELECT_STATISTICS_TYPE);
      }
    }
);
    mSyncButton=(ImageButton)findViewById(R.id.sync_all_button);
    mSyncButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        sync();
      }
    }
);
  }
  mInvalidateMenu=false;
  mDeckList=new ArrayList<HashMap<String,String>>();
  mDeckListView=(ListView)findViewById(R.id.files);
  mDeckListAdapter=new SimpleAdapter(this,mDeckList,R.layout.deck_item,new String[]{"name","new","lrn","rev","sep","dyn"},new int[]{R.id.DeckPickerName,R.id.deckpicker_new,R.id.deckpicker_lrn,R.id.deckpicker_rev,R.id.deckpicker_deck,R.id.DeckPickerName});
  mDeckListAdapter.setViewBinder(new SimpleAdapter.ViewBinder(){
    @Override public boolean setViewValue(    View view,    Object data,    String text){
      if (view.getId() == R.id.deckpicker_deck) {
        if (text.equals("top")) {
          view.setBackgroundResource(R.drawable.white_deckpicker_top);
          return true;
        }
 else         if (text.equals("bot")) {
          view.setBackgroundResource(R.drawable.white_deckpicker_bottom);
          return true;
        }
 else         if (text.equals("ful")) {
          view.setBackgroundResource(R.drawable.white_deckpicker_full);
          return true;
        }
 else         if (text.equals("cen")) {
          view.setBackgroundResource(R.drawable.white_deckpicker_center);
          return true;
        }
      }
 else       if (view.getId() == R.id.DeckPickerName) {
        if (text.equals("d0")) {
          ((TextView)view).setTextColor(getResources().getColor(R.color.non_dyn_deck));
          return true;
        }
 else         if (text.equals("d1")) {
          ((TextView)view).setTextColor(getResources().getColor(R.color.dyn_deck));
          return true;
        }
      }
      return false;
    }
  }
);
  mDeckListView.setOnItemClickListener(mDeckSelHandler);
  mDeckListView.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      mContextMenuPosition=position;
      showDialog(DIALOG_CONTEXT_MENU);
      return true;
    }
  }
);
  mDeckListView.setAdapter(mDeckListAdapter);
  if (mFragmented) {
    mDeckListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  }
  showStartupScreensAndDialogs(preferences,0);
  if (mSwipeEnabled) {
    gestureDetector=new GestureDetector(new MyGestureDetector());
    mDeckListView.setOnTouchListener(new View.OnTouchListener(){
      public boolean onTouch(      View v,      MotionEvent event){
        if (gestureDetector.onTouchEvent(event)) {
          return true;
        }
        return false;
      }
    }
);
  }
}
