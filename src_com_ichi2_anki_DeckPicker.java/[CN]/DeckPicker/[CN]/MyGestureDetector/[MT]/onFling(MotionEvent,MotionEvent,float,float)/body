{
  if (mSwipeEnabled && !mFragmented) {
    try {
      if (e1.getX() - e2.getX() > AnkiDroidApp.sSwipeMinDistance && Math.abs(velocityX) > AnkiDroidApp.sSwipeThresholdVelocity && Math.abs(e1.getY() - e2.getY()) < AnkiDroidApp.sSwipeMaxOffPath) {
        float pos=e1.getY();
        for (int j=0; j < mDeckListView.getChildCount(); j++) {
          View v=mDeckListView.getChildAt(j);
          Rect rect=new Rect();
          v.getHitRect(rect);
          if (rect.top < pos && rect.bottom > pos) {
            @SuppressWarnings("unchecked") HashMap<String,String> data=(HashMap<String,String>)mDeckListAdapter.getItem(mDeckListView.getPositionForView(v));
            Collection col=getCol();
            if (col != null) {
              col.getDecks().select(Long.parseLong(data.get("did")));
              col.reset();
              Intent reviewer=new Intent(DeckPicker.this,Reviewer.class);
              startActivityForResultWithAnimation(reviewer,REQUEST_REVIEW,ActivityTransitionAnimation.LEFT);
              return true;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Log.e(AnkiDroidApp.TAG,"onFling Exception = " + e.getMessage());
    }
  }
  return false;
}
