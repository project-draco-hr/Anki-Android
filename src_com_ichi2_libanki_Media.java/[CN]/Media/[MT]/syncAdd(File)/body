{
  boolean finished=false;
  ZipFile z=null;
  try {
    z=new ZipFile(zipData,ZipFile.OPEN_READ);
  }
 catch (  ZipException e) {
    Log.e(AnkiDroidApp.TAG,"Error opening " + zipData.getAbsolutePath() + " as a zip file.",e);
    return false;
  }
catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"Error accessing " + zipData.getAbsolutePath(),e);
  }
  ArrayList<Object[]> media=new ArrayList<Object[]>();
  long sizecnt=0;
  ZipEntry metaEntry=z.getEntry("_meta");
  if (metaEntry.getSize() >= 100000) {
    Log.e(AnkiDroidApp.TAG,"Size for _meta entry found too big (" + z.getEntry("_meta").getSize() + ")");
    return false;
  }
  byte buffer[]=new byte[100000];
  try {
    z.getInputStream(metaEntry).read(buffer);
  }
 catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"Error accessing _meta file in zip " + zipData.getAbsolutePath(),e);
  }
  JSONObject meta=null;
  try {
    meta=new JSONObject(buffer.toString());
  }
 catch (  JSONException e) {
    Log.e(AnkiDroidApp.TAG,"Error constructing JSONObject for meta entry",e);
    return false;
  }
  ZipEntry usnEntry=z.getEntry("_usn");
  try {
    z.getInputStream(usnEntry).read(buffer);
  }
 catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"Error accessing _usn file in zip " + zipData.getAbsolutePath(),e);
  }
  int nextUsn=Integer.parseInt(buffer.toString());
  for (  ZipEntry zentry : Collections.list(z.entries())) {
    sizecnt+=zentry.getSize();
    if (sizecnt > 100 * 1024 * 1024) {
      Log.e(AnkiDroidApp.TAG,"Media zip file exceeds 100MB uncompressed, aborting unzipping");
      return false;
    }
    if (zentry.getName() == "_meta" || zentry.getName() == "_usn") {
      continue;
    }
 else     if (zentry.getName() == "_finished") {
      finished=true;
    }
 else {
      String name=meta.optString(zentry.getName());
      if (illegal(name)) {
        continue;
      }
      try {
        Utils.writeToFile(z.getInputStream(zentry),name);
      }
 catch (      IOException e1) {
        Log.e(AnkiDroidApp.TAG,"Error writing synced media file " + name,e1);
      }
      String csum=Utils.fileChecksum(name);
      media.add(new Object[]{name,csum,_mtime(name)});
      mMediaDb.execute("delete from log where fname = ?",new String[]{name});
    }
  }
  if (!media.isEmpty()) {
    mMediaDb.executeMany("insert or replace into media values (?,?,?)",media);
  }
  setUsn(nextUsn);
  if (finished) {
    syncMod();
  }
  return finished;
}
