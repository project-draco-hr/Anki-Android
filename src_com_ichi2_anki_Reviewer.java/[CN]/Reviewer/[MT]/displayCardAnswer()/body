{
  Log.i(AnkiDroidApp.TAG,"displayCardAnswer");
  if (mCurrentCard == null) {
    return;
  }
  sDisplayAnswer=true;
  setFlipCardAnimation();
  String answer=getAnswer(), question=getQuestion();
  String displayString="";
  if (mSimpleInterface) {
    Spanned ans=Html.fromHtml(answer);
    if (ans.length() == 0) {
      SpannableString hint=new SpannableString(getResources().getString(R.string.simple_interface_hint,R.string.card_details_answer));
      hint.setSpan(new StyleSpan(Typeface.ITALIC),0,hint.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      ans=hint;
    }
    SpannableStringBuilder sb=new SpannableStringBuilder();
    sb.append(mCardContent);
    sb.append("\n???????????????\n");
    sb.append(ans);
    mCardContent=sb;
  }
 else {
    Sound.stopSounds();
    if (mPrefFixArabic) {
      answer=ArabicUtilities.reshapeSentence(answer,true);
      question=ArabicUtilities.reshapeSentence(question,true);
    }
    if (typeAnswer()) {
      mAnswerField.setVisibility(View.GONE);
      if (mCurrentCard != null) {
        String userAnswer=mAnswerField.getText().toString();
        Matcher matcher=sSpanPattern.matcher(Utils.stripHTMLMedia(ArabicUtilities.reshapeSentence(comparedFieldAnswer,true)));
        String correctAnswer=matcher.replaceAll("");
        matcher=sBrPattern.matcher(correctAnswer);
        correctAnswer=matcher.replaceAll("\n");
        matcher=Sound.sSoundPattern.matcher(correctAnswer);
        correctAnswer=matcher.replaceAll("");
        matcher=Image.sImagePattern.matcher(correctAnswer);
        correctAnswer=matcher.replaceAll("");
        Log.i(AnkiDroidApp.TAG,"correct answer = " + correctAnswer);
        DiffEngine diff=new DiffEngine();
        StringBuffer span=new StringBuffer();
        span.append("<span class=\"").append(comparedFieldClass).append("\">");
        span.append(diff.diff_prettyHtml(diff.diff_main(userAnswer,correctAnswer)));
        span.append("</span>");
        span.append("<br/>").append(answer);
        displayString=enrichWithQADiv(span.toString(),true);
      }
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.hideSoftInputFromWindow(mAnswerField.getWindowToken(),0);
    }
 else {
      displayString=enrichWithQADiv(answer,true);
    }
    if (isQuestionDisplayed()) {
      StringBuffer sb=new StringBuffer();
      sb.append(enrichWithQADiv(question,false));
      sb.append("<a name=\"question\"></a><hr/>");
      sb.append(displayString);
      displayString=sb.toString();
    }
  }
  mIsSelecting=false;
  updateCard(displayString);
  showEaseButtons();
  if (mPrefUseTimer) {
    mTimeoutHandler.removeCallbacks(mShowQuestionTask);
    mTimeoutHandler.postDelayed(mShowQuestionTask,mWaitQuestionSecond * 1000);
  }
}
