{
  double oldmod=mModified;
  upgradeNotes=new ArrayList<Integer>();
  if (mVersion < 39) {
    upgradeNotes.add(com.ichi2.anki.R.string.deck_upgrade_too_old_version);
    return false;
  }
  if (mVersion < 40) {
    getDB().getDatabase().execSQL("UPDATE models SET features = ''");
    mVersion=40;
    commitToDB();
  }
  if (mVersion < 43) {
    getDB().getDatabase().execSQL("UPDATE fieldModels SET features = ''");
    mVersion=43;
    commitToDB();
  }
  if (mVersion < 44) {
    getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_factId");
    mVersion=44;
    commitToDB();
  }
  if (mVersion < 48) {
    updateFieldCache(Utils.toPrimitive(getDB().queryColumn(Long.class,"SELECT id FROM facts",0)));
    mVersion=48;
    commitToDB();
  }
  if (mVersion < 50) {
    rebuildTypes();
    mVersion=50;
    commitToDB();
  }
  if (mVersion < 52) {
    mVersion=52;
    commitToDB();
  }
  if (mVersion < 53) {
    if (getBool("perDay")) {
      if (Math.abs(mHardIntervalMin - 0.333) < 0.001) {
        mHardIntervalMin=Math.max(1.0,mHardIntervalMin);
        mHardIntervalMax=Math.max(1.1,mHardIntervalMax);
      }
    }
    mVersion=53;
    commitToDB();
  }
  if (mVersion < 54) {
    getDB().getDatabase().execSQL("UPDATE fieldModels SET editFontFamily = 1");
    mVersion=54;
    commitToDB();
  }
  if (mVersion < 55) {
    getDB().getDatabase().execSQL("UPDATE fieldModels SET quizFontFamily = 'Arial' " + "WHERE NOT quizFontFamily OR quizFontFamily IS null");
    mVersion=55;
    commitToDB();
  }
  if (mVersion < 57) {
    mVersion=57;
    commitToDB();
  }
  if (mVersion < 61) {
    String txt="<span style=\"font-family: %s; font-size: %spx; color: %s; white-space: pre-wrap;\">%s</span>";
    Map<Long,Model> models=Model.getModels(this);
    Set<String> unstyled=new HashSet<String>();
    for (    Model m : models.values()) {
      TreeMap<Long,FieldModel> fieldModels=m.getFieldModels();
      for (      FieldModel fm : fieldModels.values()) {
        Log.i(AnkiDroidApp.TAG,"family: '" + fm.getQuizFontFamily() + "'");
        Log.i(AnkiDroidApp.TAG,"family: " + fm.getQuizFontSize());
        Log.i(AnkiDroidApp.TAG,"family: '" + fm.getQuizFontColour() + "'");
        if (!fm.getQuizFontFamily().equals("null") || fm.getQuizFontSize() != 0 || fm.getQuizFontColour().equals("null")) {
        }
 else {
          unstyled.add(fm.getName());
        }
        if (fm.getQuizFontFamily().equals("null")) {
          fm.setQuizFontFamily("Arial");
        }
        if (fm.getQuizFontSize() == 0) {
          fm.setQuizFontSize(20);
        }
        if (fm.getQuizFontColour().equals("null")) {
          fm.setQuizFontColour("#000000");
        }
        if (fm.getEditFontSize() == 0) {
          fm.setEditFontSize(20);
        }
      }
    }
    Media.rebuildMediaDir(this,false);
    mVersion=61;
    commitToDB();
  }
  if (mVersion < 62) {
    String[] indices={"intervalDesc","intervalAsc","randomOrder","dueAsc","dueDesc"};
    for (    String d : indices) {
      getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d + "2");
    }
    getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_typeCombined");
    addIndices();
    updateDynamicIndices();
    getDB().getDatabase().execSQL("VACUUM");
    mVersion=62;
    commitToDB();
  }
  if (mVersion < 63) {
    getDB().getDatabase().execSQL("UPDATE fieldModels SET quizFontSize = 20 WHERE quizFontSize = ''" + "OR quizFontSize IS NULL");
    getDB().getDatabase().execSQL("UPDATE fieldModels SET editFontSize = 20 WHERE editFontSize = ''" + "OR editFontSize IS NULL");
    mVersion=63;
    commitToDB();
  }
  if (mVersion < 64) {
    String[] oldStaticIndices={"ix_cards_duePriority","ix_cards_priorityDue"};
    for (    String d : oldStaticIndices) {
      getDB().getDatabase().execSQL("DROP INDEX IF EXISTS " + d);
    }
    String[] oldDynamicIndices={"intervalDesc","intervalAsc","randomOrder","dueAsc","dueDesc"};
    for (    String d : oldDynamicIndices) {
      getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d);
    }
    getDB().getDatabase().execSQL("ANALYZE");
    mVersion=64;
    commitToDB();
  }
  if (mVersion < 65) {
    rebuildTypes();
    mVersion=65;
    commitToDB();
  }
  if (getInt("pageSize") != 4096) {
    commitToDB();
    getDB().getDatabase().execSQL("PRAGMA page_size = 4096");
    getDB().getDatabase().execSQL("PRAGMA legacy_file_format = 0");
    getDB().getDatabase().execSQL("VACUUM");
    setVar("pageSize","4096",false);
    commitToDB();
  }
  assert(mModified == oldmod);
  return true;
}
