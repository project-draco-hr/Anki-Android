{
  double oldmod=mModified;
  upgradeNotes=new ArrayList<Integer>();
  if (mVersion < 65) {
    upgradeNotes.add(com.ichi2.anki.R.string.deck_upgrade_too_old_version);
    return false;
  }
  if (mVersion < 70) {
    String[] oldDynamicIndices={"intervalDesc","intervalAsc","randomOrder","dueAsc","dueDesc"};
    for (    String d : oldDynamicIndices) {
      getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d + "2");
      getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_" + d);
    }
    rebuildTypes();
    mVersion=70;
    commitToDB();
  }
  if (mVersion < 71) {
    getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_fields_value");
    mVersion=71;
    commitToDB();
  }
  if (mVersion < 72) {
    getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_factor");
    mVersion=72;
    updateDynamicIndices();
    getDB().getDatabase().execSQL("VACUUM");
    getDB().getDatabase().execSQL("ANALYZE");
    commitToDB();
  }
  if (mVersion < 73) {
    getDB().getDatabase().execSQL("DROP TABLE IF EXISTS stats");
    mVersion=73;
    commitToDB();
  }
  if (mVersion < 74) {
    getDB().getDatabase().execSQL("INSERT INTO revlog SELECT CAST(time * 1000 AS INT), cardId, ease, reps, lastInterval, nextInterval, nextFactor, CAST(MIN(thinkingTime, 60) * 1000 AS INT), 0 FROM reviewHistory");
    getDB().getDatabase().execSQL("DROP TABLE reviewHistory");
    getDB().getDatabase().execSQL("UPDATE revlog SET ease = 1 WHERE ease = 0");
    getDB().getDatabase().execSQL("DROP INDEX IF EXISTS ix_cards_priority");
    mVersion=74;
    commitToDB();
  }
  if (mVersion < 75) {
    Cursor cursor=null;
    String sql="";
    try {
      cursor=getDB().getDatabase().rawQuery("SELECT sql FROM sqlite_master WHERE name = \'cards\'",null);
      while (cursor.moveToNext()) {
        sql=cursor.getString(0);
      }
    }
  finally {
      if (cursor != null) {
        cursor.close();
      }
    }
    getDB().getDatabase().execSQL(sql.replace("TABLE cards","temporary table cards2"));
    getDB().getDatabase().execSQL("INSERT INTO cards2 SELECT * FROM cards");
    getDB().getDatabase().execSQL("DROP TABLE cards");
    getDB().getDatabase().execSQL("INSERT INTO cards SELECT id, factId, cardModelId, created, modified, " + "question, answer, 0, ordinal, 0, relativeDelay, type, lastInterval, interval, " + "due, factor, reps, successive, noCount FROM cards2");
    getDB().getDatabase().execSQL("DROP TABLE cards2");
    getDB().getDatabase().execSQL("UPDATE cards SET queue -1 WHERE queue BETWEEN -3 AND -1");
    getDB().getDatabase().execSQL("UPDATE cards SET queue -2 WHERE queue BETWEEN 3 AND 5");
    getDB().getDatabase().execSQL("UPDATE cards SET queue -3 WHERE queue BETWEEN 6 AND 8");
    addIndices();
    mVersion=74;
    commitToDB();
  }
  if ((!hasKey("pageSize")) || (getInt("pageSize") != 4096)) {
    commitToDB();
    getDB().getDatabase().execSQL("PRAGMA page_size = 4096");
    getDB().getDatabase().execSQL("PRAGMA legacy_file_format = 0");
    getDB().getDatabase().execSQL("VACUUM");
    setVar("pageSize","4096",false);
    commitToDB();
  }
  assert(mModified == oldmod);
  return true;
}
