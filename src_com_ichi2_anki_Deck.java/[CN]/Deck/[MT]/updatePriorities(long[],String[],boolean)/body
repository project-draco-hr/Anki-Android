{
  Cursor cursor=null;
  if (suspend != null && suspend.length > 0) {
    long ids[]=Utils.toPrimitive(tagIds(suspend,false).values());
    ContentValues values=new ContentValues();
    values.put("priority",0);
    getDB().update(this,"tags",values,"id in " + Utils.ids2str(ids),null);
  }
  String limit="";
  if (cardIds.length <= 1000) {
    limit="and cardTags.cardId in " + Utils.ids2str(cardIds);
  }
  String query="SELECT cardTags.cardId, CASE WHEN max(tags.priority) > 2 THEN max(tags.priority) " + "WHEN min(tags.priority) = 1 THEN 1 ELSE 2 END FROM cardTags,tags " + "WHERE cardTags.tagId = tags.id " + limit + " GROUP BY cardTags.cardId";
  try {
    cursor=getDB().getDatabase().rawQuery(query,null);
    if (cursor.moveToFirst()) {
      int len=cursor.getCount();
      long[][] cards=new long[len][2];
      for (int i=0; i < len; i++) {
        cards[i][0]=cursor.getLong(0);
        cards[i][1]=cursor.getInt(1);
      }
      String extra="";
      if (dirty) {
        extra=", modified = " + String.format(Utils.ENGLISH_LOCALE,"%f",Utils.now());
      }
      for (int pri=Card.PRIORITY_NONE; pri <= Card.PRIORITY_HIGH; pri++) {
        int count=0;
        for (int i=0; i < len; i++) {
          if (cards[i][1] == pri) {
            count++;
          }
        }
        long[] cs=new long[count];
        int j=0;
        for (int i=0; i < len; i++) {
          if (cards[i][1] == pri) {
            cs[j]=cards[i][0];
            j++;
          }
        }
        ContentValues values=new ContentValues();
        values.put("priority",pri + extra);
        getDB().update(this,"cards",values,"id IN " + Utils.ids2str(cs) + " AND priority != "+ pri+ " AND "+ "priority >= -2",null);
      }
    }
  }
  finally {
    if (cursor != null && !cursor.isClosed()) {
      cursor.close();
    }
  }
}
