{
  ArrayList<HashMap<String,String>> cards=new ArrayList<HashMap<String,String>>();
  Cursor cur=null;
  try {
    cur=getDB().getDatabase().rawQuery("SELECT cards.id, cards.question, cards.answer, " + "facts.tags, models.tags, cardModels.name, cards.priority, cards.due, cards.interval, " + "cards.factor, cards.created FROM cards, facts, "+ "models, cardModels WHERE cards.factId == facts.id AND facts.modelId == models.id "+ "AND cards.cardModelId = cardModels.id " + (startId != "" ? ("AND cards.id > " + startId) : "") + " ORDER BY cards.id LIMIT "+ chunk,null);
    while (cur.moveToNext()) {
      HashMap<String,String> data=new HashMap<String,String>();
      data.put("id",Long.toString(cur.getLong(0)));
      data.put("question",Utils.stripHTML(cur.getString(1).replaceAll("<br(\\s*\\/*)>","\n")));
      data.put("answer",Utils.stripHTML(cur.getString(2).replaceAll("<br(\\s*\\/*)>","\n")));
      String tags=cur.getString(3);
      String flags=null;
      if (tags.contains(TAG_MARKED)) {
        flags="1";
      }
 else {
        flags="0";
      }
      if (cur.getString(6).equals("-3")) {
        flags=flags + "1";
      }
 else {
        flags=flags + "0";
      }
      data.put("tags",tags + " " + cur.getString(4)+ " "+ cur.getString(5));
      data.put("flags",flags);
      data.put("due",Double.toString(cur.getDouble(6)));
      data.put("interval",Double.toString(cur.getDouble(7)));
      data.put("factor",Double.toString(cur.getDouble(8)));
      data.put("created",Double.toString(cur.getDouble(9)));
      cards.add(data);
    }
  }
 catch (  SQLException e) {
    Log.e(AnkiDroidApp.TAG,"getAllCards: " + e.toString());
    return null;
  }
 finally {
    if (cur != null && !cur.isClosed()) {
      cur.close();
    }
  }
  return cards;
}
