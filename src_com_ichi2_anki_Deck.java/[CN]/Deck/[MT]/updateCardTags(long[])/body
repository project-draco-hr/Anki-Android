{
  HashMap<String,Long> tids=new HashMap<String,Long>();
  HashMap<Long,List<String>> rows=new HashMap<Long,List<String>>();
  if (cardIds == null) {
    getDB().getDatabase().execSQL("DELETE FROM cardTags");
    getDB().getDatabase().execSQL("DELETE FROM tags");
    tids=tagIds(allTags_());
    rows=splitTagsList();
  }
 else {
    Log.i(AnkiDroidApp.TAG,"updateCardTags cardIds: " + Arrays.toString(cardIds));
    getDB().delete(this,"cardTags","cardId IN " + Utils.ids2str(cardIds),null);
    String fids=Utils.ids2str(Utils.toPrimitive(getDB().queryColumn(Long.class,"SELECT factId FROM cards WHERE id IN " + Utils.ids2str(cardIds),0)));
    Log.i(AnkiDroidApp.TAG,"updateCardTags fids: " + fids);
    tids=tagIds(allTags_("WHERE id IN " + fids));
    Log.i(AnkiDroidApp.TAG,"updateCardTags tids keys: " + Arrays.toString(tids.keySet().toArray(new String[tids.size()])));
    Log.i(AnkiDroidApp.TAG,"updateCardTags tids values: " + Arrays.toString(tids.values().toArray(new Long[tids.size()])));
    rows=splitTagsList("AND facts.id IN " + fids);
    Log.i(AnkiDroidApp.TAG,"updateCardTags rows keys: " + Arrays.toString(rows.keySet().toArray(new Long[rows.size()])));
    for (    List<String> l : rows.values()) {
      Log.i(AnkiDroidApp.TAG,"updateCardTags rows values: ");
      for (      String v : l) {
        Log.i(AnkiDroidApp.TAG,"updateCardTags row item: " + v);
      }
    }
  }
  ArrayList<HashMap<String,Long>> d=new ArrayList<HashMap<String,Long>>();
  for (  Entry<Long,List<String>> entry : rows.entrySet()) {
    Long id=entry.getKey();
    for (int src=0; src < 3; src++) {
      for (      String tag : Utils.parseTags(entry.getValue().get(src))) {
        HashMap<String,Long> ditem=new HashMap<String,Long>();
        ditem.put("cardId",id);
        ditem.put("tagId",tids.get(tag.toLowerCase()));
        ditem.put("src",new Long(src));
        Log.i(AnkiDroidApp.TAG,"populating ditem " + src + " "+ tag);
        d.add(ditem);
      }
    }
  }
  for (  HashMap<String,Long> ditem : d) {
    ContentValues values=new ContentValues();
    values.put("cardId",ditem.get("cardId"));
    values.put("tagId",ditem.get("tagId"));
    values.put("src",ditem.get("src"));
    getDB().insert(this,"cardTags",null,values);
  }
  deleteUnusedTags();
}
