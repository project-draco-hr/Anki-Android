{
  HashMap<String,Long> tagIds=new HashMap<String,Long>();
  HashMap<Long,List<String>> cardsWithTags=new HashMap<Long,List<String>>();
  if (cardIds == null) {
    getDB().getDatabase().execSQL("DELETE FROM cardTags");
    getDB().getDatabase().execSQL("DELETE FROM tags");
    String[] allTags=allTags_();
    if (allTags != null) {
      tagIds=tagIds(allTags);
    }
    cardsWithTags=splitTagsList();
  }
 else {
    Log.i(AnkiDroidApp.TAG,"updateCardTags cardIds: " + Arrays.toString(cardIds));
    getDB().delete(this,"cardTags","cardId IN " + Utils.ids2str(cardIds),null);
    String factIds=Utils.ids2str(Utils.toPrimitive(getDB().queryColumn(Long.class,"SELECT factId FROM cards WHERE id IN " + Utils.ids2str(cardIds),0)));
    Log.i(AnkiDroidApp.TAG,"updateCardTags factIds: " + factIds);
    String[] allTags=allTags_("WHERE id IN " + factIds);
    if (allTags != null) {
      tagIds=tagIds(allTags);
    }
    Log.i(AnkiDroidApp.TAG,"updateCardTags tagIds keys: " + Arrays.toString(tagIds.keySet().toArray(new String[tagIds.size()])));
    Log.i(AnkiDroidApp.TAG,"updateCardTags tagIds values: " + Arrays.toString(tagIds.values().toArray(new Long[tagIds.size()])));
    cardsWithTags=splitTagsList("AND facts.id IN " + factIds);
    Log.i(AnkiDroidApp.TAG,"updateCardTags cardTags keys: " + Arrays.toString(cardsWithTags.keySet().toArray(new Long[cardsWithTags.size()])));
    for (    List<String> tags : cardsWithTags.values()) {
      Log.i(AnkiDroidApp.TAG,"updateCardTags cardTags values: ");
      for (      String tag : tags) {
        Log.i(AnkiDroidApp.TAG,"updateCardTags row item: " + tag);
      }
    }
  }
  ArrayList<HashMap<String,Long>> cardTags=new ArrayList<HashMap<String,Long>>();
  for (  Entry<Long,List<String>> card : cardsWithTags.entrySet()) {
    Long cardId=card.getKey();
    for (int src=0; src < 3; src++) {
      for (      String tag : Utils.parseTags(card.getValue().get(src))) {
        HashMap<String,Long> association=new HashMap<String,Long>();
        association.put("cardId",cardId);
        association.put("tagId",tagIds.get(tag.toLowerCase()));
        association.put("src",new Long(src));
        Log.i(AnkiDroidApp.TAG,"populating association " + src + " "+ tag);
        cardTags.add(association);
      }
    }
  }
  for (  HashMap<String,Long> cardTagAssociation : cardTags) {
    ContentValues values=new ContentValues();
    values.put("cardId",cardTagAssociation.get("cardId"));
    values.put("tagId",cardTagAssociation.get("tagId"));
    values.put("src",cardTagAssociation.get("src"));
    getDB().insert(this,"cardTags",null,values);
  }
  getDB().delete(this,"tags","priority = 2 AND id NOT IN (SELECT DISTINCT tagId FROM cardTags)",null);
}
