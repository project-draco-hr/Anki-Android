{
  try {
    getCardIdMethod=Deck.class.getDeclaredMethod("_getCramCardId",boolean.class);
    mActiveCramTags=active;
    mCramOrder=order;
    rebuildFailedCountMethod=Deck.class.getDeclaredMethod("_rebuildFailedCramCount");
    rebuildRevCountMethod=Deck.class.getDeclaredMethod("_rebuildCramCount");
    rebuildNewCountMethod=Deck.class.getDeclaredMethod("_rebuildNewCramCount");
    fillFailedQueueMethod=Deck.class.getDeclaredMethod("_fillFailedCramQueue");
    fillRevQueueMethod=Deck.class.getDeclaredMethod("_fillCramQueue");
    finishSchedulerMethod=Deck.class.getDeclaredMethod("setupStandardScheduler");
    mFailedCramQueue.clear();
    requeueCardMethod=Deck.class.getDeclaredMethod("_requeueCramCard",Card.class,boolean.class);
    cardQueueMethod=Deck.class.getDeclaredMethod("_cramCardQueue",Card.class);
    answerCardMethod=Deck.class.getDeclaredMethod("_answerCramCard",Card.class,int.class);
    spaceCardsMethod=Deck.class.getDeclaredMethod("_spaceCramCards",Card.class,double.class);
    answerPreSaveMethod=Deck.class.getDeclaredMethod("_cramPreSave",Card.class,int.class);
    cardLimitMethod=Deck.class.getDeclaredMethod("_cramCardLimit",String[].class,String[].class,String.class);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
  mScheduler="cram";
}
