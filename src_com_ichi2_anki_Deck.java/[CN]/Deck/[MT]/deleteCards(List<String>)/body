{
  Log.i(AnkiDroidApp.TAG,"deleteCards = " + ids.toString());
  String undoName=UNDO_TYPE_DELETE_CARD;
  if (ids.size() == 1) {
    setUndoStart(undoName,Long.parseLong(ids.get(0)));
  }
 else {
    setUndoStart(undoName);
  }
  if (ids != null && ids.size() > 0) {
    commitToDB();
    double now=Utils.now();
    Log.i(AnkiDroidApp.TAG,"Now = " + now);
    String idsString=Utils.ids2str(ids);
    getDB().delete(this,"cards","id IN " + idsString,null);
    for (    String id : ids) {
      ContentValues values=new ContentValues();
      values.put("cardId",id);
      values.put("deletedTime",String.format(Utils.ENGLISH_LOCALE,"%f",now));
      getDB().insert(this,"cardsDeleted",null,values);
    }
    ArrayList<String> tags=getDB().queryColumn(String.class,"SELECT tagId FROM cardTags WHERE cardId in " + idsString,0);
    getDB().delete(this,"cardTags","cardId IN " + idsString,null);
    ArrayList<String> unusedTags=new ArrayList<String>();
    for (    String tagId : tags) {
      Cursor cursor=null;
      try {
        cursor=getDB().getDatabase().rawQuery("SELECT * FROM cardTags WHERE tagId = " + tagId + " LIMIT 1",null);
        if (!cursor.moveToFirst()) {
          unusedTags.add(tagId);
        }
      }
  finally {
        if (cursor != null && !cursor.isClosed()) {
          cursor.close();
        }
      }
    }
    deleteUnusedTags();
    deleteDanglingFacts();
    setUndoEnd(undoName);
    flushMod();
  }
}
