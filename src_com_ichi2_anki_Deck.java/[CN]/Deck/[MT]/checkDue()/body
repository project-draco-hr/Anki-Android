{
  Log.i(TAG,"Checking due cards...");
  checkDailyStats();
  ContentValues val=new ContentValues(1);
  val.put("isDue",1);
  Log.i(TAG,"failedSoonCount before = " + failedSoonCount);
  failedSoonCount+=AnkiDb.database.update("cards",val,"type = 0 and " + "isDue = 0 and " + "priority in (1,2,3,4) and "+ String.format(ENGLISH_LOCALE,"combinedDue <= %f",(double)((System.currentTimeMillis() / 1000.0) + delay0)),null);
  Log.i(TAG,"failedSoonCount after = " + failedSoonCount);
  Log.i(TAG,"failedNowCount before = " + failedNowCount);
  failedNowCount=(int)AnkiDb.queryScalar("SELECT count(id) " + "FROM cards " + "WHERE type = 0 and "+ "isDue = 1 and "+ String.format(ENGLISH_LOCALE,"combinedDue <= %f",(double)(System.currentTimeMillis() / 1000.0)));
  Log.i(TAG,"failedNowCount after = " + failedNowCount);
  Log.i(TAG,"revCount before = " + revCount);
  val.clear();
  val.put("isDue",1);
  revCount+=AnkiDb.database.update("cards",val,"type = 1 and " + "isDue = 0 and " + "priority in (1,2,3,4) and "+ String.format(ENGLISH_LOCALE,"combinedDue <= %f",(double)(System.currentTimeMillis() / 1000.0)),null);
  Log.i(TAG,"revCount after = " + revCount);
  Log.i(TAG,"newCount before = " + newCount);
  val.clear();
  val.put("isDue",1);
  newCount+=AnkiDb.database.update("cards",val,"type = 2 and " + "isDue = 0 and " + "priority in (1,2,3,4) and "+ String.format(ENGLISH_LOCALE,"combinedDue <= %f",(double)(System.currentTimeMillis() / 1000.0)),null);
  Log.i(TAG,"newCount after = " + newCount);
  Log.i(TAG,"newCardsPerDay = " + newCardsPerDay);
  Log.i(TAG,"newCardsToday = " + newCardsToday());
  newCountToday=Math.max(Math.min(newCount,newCardsPerDay - newCardsToday()),0);
  Log.i(TAG,"newCountToday = Math.max(Math.min(newCount, newCardsPerDay - newCardsToday()), 0) : " + newCountToday);
}
