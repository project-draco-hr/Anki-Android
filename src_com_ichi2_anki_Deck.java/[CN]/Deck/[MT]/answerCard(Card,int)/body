{
  float now=System.currentTimeMillis() / 1000f;
  String oldState=cardState(card);
  float lastDelaySecs=System.currentTimeMillis() / 1000f - card.combinedDue;
  float lastDelay=lastDelaySecs / 86400f;
  int oldSuc=card.successive;
  float last=card.interval;
  card.interval=nextInterval(card,ease);
  if (lastDelay >= 0)   card.lastInterval=last;
  if (card.reps != 0)   card.lastDue=card.due;
  card.due=nextDue(card,ease,oldState);
  card.isDue=0;
  card.lastFactor=card.factor;
  if (lastDelay >= 0)   updateFactor(card,ease);
  float space, spaceFactor, minSpacing, minOfOtherCards;
  Cursor cursor=AnkiDb.database.rawQuery("SELECT models.initialSpacing, models.spacing " + "FROM facts, models " + "WHERE facts.modelId = models.id and "+ "facts.id = "+ card.factId,null);
  if (!cursor.moveToFirst()) {
    minSpacing=0;
    spaceFactor=0;
  }
 else {
    minSpacing=cursor.getFloat(0);
    spaceFactor=cursor.getFloat(1);
  }
  cursor.close();
  cursor=AnkiDb.database.rawQuery("SELECT min(interval) " + "FROM cards " + "WHERE factId = " + card.factId + " and id != "+ card.id,null);
  if (!cursor.moveToFirst())   minOfOtherCards=0;
 else   minOfOtherCards=cursor.getFloat(0);
  cursor.close();
  if (minOfOtherCards != 0)   space=Math.min(minOfOtherCards,card.interval);
 else   space=0;
  space=space * spaceFactor * 86400f;
  space=Math.max(minSpacing,space);
  space+=System.currentTimeMillis() / 1000f;
  String extra;
  if (this.reviewEarly)   extra="";
 else {
    extra="or id = " + card.id;
  }
  cursor=AnkiDb.database.rawQuery("SELECT type, count(type) " + "FROM cards " + "WHERE factId = " + card.factId + " and "+ "(isDue = 1 "+ extra+ ") "+ "GROUP BY type",null);
  if (cursor.moveToFirst()) {
    while (cursor.moveToNext()) {
      if (cursor.getInt(0) == 0)       failedSoonCount-=cursor.getInt(1);
 else       if (cursor.getInt(0) == 1)       revCount-=cursor.getInt(1);
 else       newCount-=cursor.getInt(1);
    }
  }
  cursor.close();
  AnkiDb.database.execSQL(String.format("UPDATE cards " + "SET spaceUntil = %f, " + "combinedDue = max(%f, due), "+ "modified = %f, "+ "isDue = 0 "+ "WHERE id != %d and factId = %d",space,space,now,card.id,card.factId));
  card.spaceUntil=0;
  if (this.reviewEarly && lastDelay < 0)   if (oldSuc != 0 || lastDelaySecs > this.delay0 || !this.showFailedLast())   card.priority=-1;
  card.updateStats(ease,oldState);
  card.toDB();
  Stats.updateAllStats(this.globalStats,this.dailyStats,card,ease,oldState);
  CardHistoryEntry entry=new CardHistoryEntry(card,ease,lastDelay);
  entry.writeSQL();
  this.modified=now;
}
