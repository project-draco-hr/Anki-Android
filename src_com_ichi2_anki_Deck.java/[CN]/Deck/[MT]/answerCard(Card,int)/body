{
  Log.i(TAG,"answerCard");
  Cursor cursor=null;
  String undoName="Answer Card";
  setUndoStart(undoName);
  double now=System.currentTimeMillis() / 1000.0;
  AnkiDb ankiDB=AnkiDatabaseManager.getDatabase(deckPath);
  String oldState=cardState(card);
  double lastDelaySecs=System.currentTimeMillis() / 1000.0 - card.combinedDue;
  double start=System.currentTimeMillis();
  double lastDelay=lastDelaySecs / 86400.0;
  int oldSuc=card.successive;
  double last=card.interval;
  card.interval=nextInterval(card,ease);
  if (lastDelay >= 0)   card.lastInterval=last;
  if (card.reps != 0)   card.lastDue=card.due;
  card.due=nextDue(card,ease,oldState);
  card.isDue=0;
  card.lastFactor=card.factor;
  if (lastDelay >= 0)   updateFactor(card,ease);
  Log.w(TAG,"answerCard - Update card details (phase 1) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  double space, spaceFactor, minSpacing, minOfOtherCards;
  try {
    cursor=ankiDB.database.rawQuery("SELECT models.initialSpacing, models.spacing " + "FROM facts, models " + "WHERE facts.modelId = models.id and "+ "facts.id = "+ card.factId,null);
    if (!cursor.moveToFirst()) {
      minSpacing=0;
      spaceFactor=0;
    }
 else {
      minSpacing=cursor.getDouble(0);
      spaceFactor=cursor.getDouble(1);
    }
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.w(TAG,"answerCard - Spacing (phase 2) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  try {
    cursor=ankiDB.database.rawQuery("SELECT min(interval) " + "FROM cards " + "WHERE factId = " + card.factId + " and id != "+ card.id,null);
    if (!cursor.moveToFirst())     minOfOtherCards=0;
 else     minOfOtherCards=cursor.getDouble(0);
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.w(TAG,"answerCard - More spacing (phase 3) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  if (minOfOtherCards != 0)   space=Math.min(minOfOtherCards,card.interval);
 else   space=0;
  space=space * spaceFactor * 86400.0;
  space=Math.max(minSpacing,space);
  space+=System.currentTimeMillis() / 1000.0;
  card.combinedDue=Math.max(card.due,space);
  Log.w(TAG,"answerCard - More spacing (phase 4) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  String extra;
  if (this.reviewEarly)   extra="";
 else {
    extra="or id = " + card.id;
  }
  try {
    cursor=ankiDB.database.rawQuery("SELECT type, count(type) " + "FROM cards " + "WHERE factId = " + card.factId + " and "+ "(isDue = 1 "+ extra+ ") "+ "GROUP BY type",null);
    while (cursor.moveToNext()) {
      Log.i(TAG,"failedSoonCount before = " + failedSoonCount);
      Log.i(TAG,"revCount before = " + revCount);
      Log.i(TAG,"newCount before = " + newCount);
      if (cursor.getInt(0) == 0)       failedSoonCount-=cursor.getInt(1);
 else       if (cursor.getInt(0) == 1)       revCount-=cursor.getInt(1);
 else       newCount-=cursor.getInt(1);
      Log.i(TAG,"failedSoonCount after = " + failedSoonCount);
      Log.i(TAG,"revCount after = " + revCount);
      Log.i(TAG,"newCount after = " + newCount);
    }
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.w(TAG,"answerCard - More spacing (phase 5) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  ankiDB.database.execSQL(String.format(ENGLISH_LOCALE,"UPDATE cards " + "SET spaceUntil = %f, " + "combinedDue = max(%f, due), "+ "modified = %f, "+ "isDue = 0 "+ "WHERE id != %d and factId = %d",space,space,now,card.id,card.factId));
  card.spaceUntil=0;
  Log.w(TAG,"answerCard - Space others (phase 6) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  if (reviewEarly && lastDelay < 0)   if (oldSuc != 0 || lastDelaySecs > delay0 || !showFailedLast())   card.priority=-1;
  card.updateStats(ease,oldState);
  Log.w(TAG,"answerCard - Update stats (phase 7) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  card.toDB();
  Log.w(TAG,"answerCard - Card to DB (phase 8) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  Stats.updateAllStats(this.globalStats,this.dailyStats,card,ease,oldState);
  Log.w(TAG,"answerCard - Update gl/dy stats (phase 9) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  CardHistoryEntry entry=new CardHistoryEntry(this,card,ease,lastDelay);
  entry.writeSQL();
  modified=now;
  Log.w(TAG,"answerCard - Review history (phase 10) in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  setUndoEnd(undoName);
}
