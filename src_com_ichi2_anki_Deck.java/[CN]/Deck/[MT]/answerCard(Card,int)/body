{
  Log.i(TAG,"answerCard");
  double start=System.currentTimeMillis();
  Cursor cursor=null;
  String undoName="Answer Card";
  setUndoStart(undoName);
  double now=System.currentTimeMillis() / 1000.0;
  AnkiDb ankiDB=AnkiDatabaseManager.getDatabase(deckPath);
  String oldState=cardState(card);
  double lastDelaySecs=System.currentTimeMillis() / 1000.0 - card.combinedDue;
  double lastDelay=lastDelaySecs / 86400.0;
  int oldSuc=card.successive;
  Log.e(TAG,"answerCard - phase 1 in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  double last=card.interval;
  card.interval=nextInterval(card,ease);
  if (lastDelay >= 0)   card.lastInterval=last;
  if (card.reps != 0)   card.lastDue=card.due;
  card.due=nextDue(card,ease,oldState);
  card.isDue=0;
  card.lastFactor=card.factor;
  if (lastDelay >= 0)   updateFactor(card,ease);
  Log.e(TAG,"answerCard - update card details in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  double space, spaceFactor, minSpacing, minOfOtherCards;
  try {
    cursor=ankiDB.database.rawQuery("SELECT models.initialSpacing, models.spacing " + "FROM facts, models " + "WHERE facts.modelId = models.id and "+ "facts.id = "+ card.factId,null);
    if (!cursor.moveToFirst()) {
      minSpacing=0;
      spaceFactor=0;
    }
 else {
      minSpacing=cursor.getDouble(0);
      spaceFactor=cursor.getDouble(1);
    }
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.e(TAG,"answerCard - spacing in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  try {
    cursor=ankiDB.database.rawQuery("SELECT min(interval) " + "FROM cards " + "WHERE factId = " + card.factId + " and id != "+ card.id,null);
    if (!cursor.moveToFirst())     minOfOtherCards=0;
 else     minOfOtherCards=cursor.getDouble(0);
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.e(TAG,"answerCard - raw query select in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  if (minOfOtherCards != 0)   space=Math.min(minOfOtherCards,card.interval);
 else   space=0;
  space=space * spaceFactor * 86400.0;
  space=Math.max(minSpacing,space);
  space+=System.currentTimeMillis() / 1000.0;
  card.combinedDue=Math.max(card.due,space);
  String extra;
  if (this.reviewEarly)   extra="";
 else {
    extra="or id = " + card.id;
  }
  Log.e(TAG,"answerCard - check other cards in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  try {
    cursor=ankiDB.database.rawQuery("SELECT type, count(type) " + "FROM cards " + "WHERE factId = " + card.factId + " and "+ "(isDue = 1 "+ extra+ ") "+ "GROUP BY type",null);
    while (cursor.moveToNext()) {
      Log.i(TAG,"failedSoonCount before = " + failedSoonCount);
      Log.i(TAG,"revCount before = " + revCount);
      Log.i(TAG,"newCount before = " + newCount);
      if (cursor.getInt(0) == 0)       failedSoonCount-=cursor.getInt(1);
 else       if (cursor.getInt(0) == 1)       revCount-=cursor.getInt(1);
 else       newCount-=cursor.getInt(1);
      Log.i(TAG,"failedSoonCount after = " + failedSoonCount);
      Log.i(TAG,"revCount after = " + revCount);
      Log.i(TAG,"newCount after = " + newCount);
    }
  }
  finally {
    if (cursor != null)     cursor.close();
  }
  Log.e(TAG,"answerCard - check counts in " + (System.currentTimeMillis() - start) + " ms.");
  card.spaceUntil=0;
  start=System.currentTimeMillis();
  String where_id[]=new String[]{new Long(card.id).toString()};
  if (reviewEarly && lastDelay < 0) {
    if (oldSuc != 0 || lastDelaySecs > delay0 || !showFailedLast()) {
      card.priority=-1;
      ContentValues valpriority=new ContentValues(1);
      valpriority.put("priority",card.priority);
      ankiDB.database.update("cards",valpriority,"id = ?",where_id);
    }
  }
  card.updateStats(ease,oldState);
  Log.e(TAG,"answerCard - update stats in " + (System.currentTimeMillis() - start) + " ms.");
  start=System.currentTimeMillis();
  String easename="";
  int easenum=0;
  if (oldState == "young") {
switch (ease) {
case 0:
      easename="youngEase0";
    easenum=card.youngEase0;
  break;
case 1:
easename="youngEase1";
easenum=card.youngEase1;
break;
case 2:
easename="youngEase2";
easenum=card.youngEase2;
break;
case 3:
easename="youngEase3";
easenum=card.youngEase3;
break;
case 4:
easename="youngEase4";
easenum=card.youngEase4;
break;
default :
}
}
 else {
switch (ease) {
case 0:
easename="matureEase0";
easenum=card.matureEase0;
break;
case 1:
easename="matureEase1";
easenum=card.matureEase1;
break;
case 2:
easename="matureEase2";
easenum=card.matureEase2;
break;
case 3:
easename="matureEase3";
easenum=card.matureEase3;
break;
case 4:
easename="matureEase4";
easenum=card.matureEase4;
break;
default :
}
}
if (card.successive != 0) card.type=1;
 else card.type=0;
String sql1=String.format("UPDATE cards " + "SET spaceUntil = (case when id == %d then 0 else %f end), " + "combinedDue = (case when id == %d then %f else max(%f, due) end), "+ "modified = %f, "+ "isDue = 0, "+ "interval = (case when id == %d then %f else interval end), "+ "lastInterval = (case when id == %d then %f else lastInterval end), "+ "due = (case when id == %d then %f else due end), "+ "lastDue = (case when id == %d then %f else lastDue end), "+ "factor = (case when id == %d then %f else factor end), "+ "lastFactor = (case when id == %d then %f else lastFactor end), "+ "firstAnswered = (case when id == %d then %f else firstAnswered end), "+ "reps = (case when id == %d then %d else reps end), "+ "successive = (case when id == %d then %d else successive end), "+ "averageTime = (case when id == %d then %f else averageTime end), "+ "reviewTime = (case when id == %d then %f else reviewTime end), "+ "%s = (case when id == %d then %d else %s end), "+ "yesCount = (case when id == %d then %d else yesCount end), "+ "noCount = (case when id == %d then %d else noCount end), "+ "type = (case when id == %d then %d else type end) "+ "WHERE factId = %d",card.id,space,card.id,card.due,space,now,card.id,card.interval,card.id,card.lastInterval,card.id,card.due,card.id,card.lastDue,card.id,card.factor,card.id,card.lastFactor,card.id,card.firstAnswered,card.id,card.reps,card.id,card.successive,card.id,card.averageTime,card.id,card.reviewTime,easename,card.id,easenum,easename,card.id,card.yesCount,card.id,card.noCount,card.id,card.type,card.factId);
ankiDB.database.execSQL(sql1);
Log.e(TAG,"answerCard - unified update in " + (System.currentTimeMillis() - start) + " ms.");
start=System.currentTimeMillis();
Stats.updateAllStats(this.globalStats,this.dailyStats,card,ease,oldState);
Log.e(TAG,"answerCard - update all stats in " + (System.currentTimeMillis() - start) + " ms.");
start=System.currentTimeMillis();
CardHistoryEntry entry=new CardHistoryEntry(this,card,ease,lastDelay);
entry.writeSQL();
modified=now;
Log.e(TAG,"answerCard - review history in " + (System.currentTimeMillis() - start) + " ms.");
start=System.currentTimeMillis();
setUndoEnd(undoName);
Log.e(TAG,"answerCard - set undo in " + (System.currentTimeMillis() - start) + " ms.");
}
