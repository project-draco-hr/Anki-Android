import pycurl
import StringIO
import sys
CROWDIN_KEY = ''
PROJECT_IDENTIFIER = 'ankidroid'
path = '../res/values/'
files = ['01-core', '02-strings', '03-dialogs', '04-network', '05-feedback', '06-statistics', '07-cardbrowser', '08-widget', '09-backup', '10-preferences', '11-arrays', '12-tutorial', '13-newfeatures']
alllang = ['ar', 'ca', 'cs', 'de', 'el', 'es-ES', 'fi', 'fr', 'hu', 'id', 'it', 'ja', 'ko', 'nl', 'pl', 'pt-PT', 'ro', 'ru', 'sr', 'sv-SE', 'tr', 'vi', 'zh-CN', 'zh-TW']
try:
    c = open('crowdin_key.txt', 'r+')
    CROWDIN_KEY = c.readline()
    c.close()
except IOError as e:
    CROWDIN_KEY = raw_input("please enter your crowdin key or create 'crowdin_key.txt': ")
sel = raw_input('update (m)aster file, update (t)ranslation or (r)efresh builds? ')
if (sel == 'm'):
    selu = raw_input('update 0(1)-core, 0(2)-strings, 0(3)-dialogs, 0(4)-network, 0(5)-feedback, 0(6)-statistics, 0(7)-cardbrowser, 0(8)-widget, 0(9)-backup, (10)-preferences, (11)-arrays, (12)-tutorial, (13)-newfeatures? ')
    if (selu == 'all'):
        for n in range(1, 13):
            updateMasterFile(n)
    else:
        updateMasterFile(selu)
elif (sel == 't'):
    print 'still problems with crowding here'
    language = raw_input('enter language code: ')
    selu = raw_input('update 0(1)-core, 0(2)-strings, 0(3)-dialogs, 0(4)-network, 0(5)-feedback, 0(6)-statistics, 0(7)-cardbrowser, 0(8)-widget, 0(9)-backup, (10)-preferences, (11)-arrays, (13)-newfeatures? ')
    if (selu == '12'):
        print 'translations of this file cannot be uploaded'
    elif (selu != 'all'):
        defaultSource = files[(int(selu) - 1)]
        sourcefile = raw_input((('enter source file (default: ' + defaultSource) + '): '))
        if (sourcefile == ''):
            sourcefile = defaultSource
    elif (language == 'all'):
        for language in alllang:
            if (selu == 'all'):
                for s in files:
                    uploadtranslation(language, s, s)
            else:
                uploadtranslation(language, files[(int(selu) - 1)], s)
    elif (selu == 'all'):
        for s in files:
            uploadtranslation(language, s, s)
    else:
        uploadtranslation(language, files[(int(selu) - 1)], sourcefile)
elif (sel == 'r'):
    print 'Force translation export'
    c = pycurl.Curl()
    c.setopt(pycurl.URL, ((('http://crowdin.net/api/project/' + PROJECT_IDENTIFIER) + '/export?&key=') + CROWDIN_KEY))
    b = StringIO.StringIO()
    c.setopt(pycurl.WRITEFUNCTION, b.write)
    c.perform()
    c.close()
    print b.getvalue()
else:
    print 'nothing to do'
