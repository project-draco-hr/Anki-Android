{
  try {
    if (did == 1) {
      JSONObject deck=get(did);
      if (deck.getString("name").contains("::")) {
        deck.put("name","Default");
        save(deck);
      }
      return;
    }
    mCol._logRem(new long[]{did},Sched.REM_DECK);
    if (!mDecks.containsKey(did)) {
      return;
    }
    JSONObject deck=get(did);
    if (deck.getInt("dyn") != 0) {
      mCol.getSched().emptyDyn(did);
      if (childrenToo) {
        for (        long id : children(did).values()) {
          rem(id,cardsToo);
        }
      }
    }
 else {
      if (childrenToo) {
        for (        long id : children(did).values()) {
          rem(id,cardsToo);
        }
      }
      if (cardsToo) {
        ArrayList<Long> cids=mCol.getDb().queryColumn(Long.class,"SELECT id FROM cards WHERE did = " + did + " OR odid = "+ did,0);
        mCol.remCards(Utils.arrayList2array(cids));
      }
    }
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  mDecks.remove(did);
  if (active().contains(did)) {
    select((long)(mDecks.keySet().iterator().next()));
  }
  save();
}
