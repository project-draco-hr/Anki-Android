{
  if (qfmt.length != cards.length || afmt.length != cards.length) {
    throw new IllegalArgumentException("cards, qfmt, and afmt arrays must all be same length");
  }
  ContentValues values=new ContentValues();
  values.put(FlashCardsContract.Model.NAME,name);
  values.put(FlashCardsContract.Model.FIELD_NAMES,AddContentApi.joinFields(fields));
  values.put(FlashCardsContract.Model.NUM_CARDS,cards.length);
  values.put(FlashCardsContract.Model.CSS,css);
  values.put(FlashCardsContract.Model.DECK_ID,did);
  Uri modelUri=mResolver.insert(FlashCardsContract.Model.CONTENT_URI,values);
  Uri templatesUri=Uri.withAppendedPath(modelUri,"templates");
  for (int i=0; i < cards.length; i++) {
    Uri uri=Uri.withAppendedPath(templatesUri,Integer.toString(i));
    values=new ContentValues();
    values.put(FlashCardsContract.CardTemplate.NAME,cards[i]);
    values.put(FlashCardsContract.CardTemplate.QUESTION_FORMAT,qfmt[i]);
    values.put(FlashCardsContract.CardTemplate.ANSWER_FORMAT,afmt[i]);
    values.put(FlashCardsContract.CardTemplate.ANSWER_FORMAT,afmt[i]);
    mResolver.update(uri,values,null,null);
  }
  if (modelUri == null) {
    return null;
  }
 else {
    long mid=Long.parseLong(modelUri.getLastPathSegment());
    final SharedPreferences modelsDb=mContext.getSharedPreferences(MODEL_REF_DB,Context.MODE_PRIVATE);
    modelsDb.edit().putLong(name,mid).commit();
    return mid;
  }
}
