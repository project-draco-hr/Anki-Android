{
  Timber.d("onCollectionLoaded()");
  SlidingTabLayout slidingTabLayout;
  mDropDownDecks=getCol().getDecks().allSorted();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(false);
  mActionBarSpinner=(Spinner)findViewById(R.id.toolbar_spinner);
  mActionBarSpinner.setAdapter(new DeckDropDownAdapter(this,mDropDownDecks));
  mActionBarSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      selectDropDownItem(position);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mActionBarSpinner.setVisibility(View.VISIBLE);
  mTaskHandler=new AnkiStatsTaskHandler(col);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(8);
  slidingTabLayout=(SlidingTabLayout)findViewById(R.id.sliding_tabs);
  slidingTabLayout.setViewPager(mViewPager);
  float size=new TextView(this).getTextSize();
  mTaskHandler.setmStandardTextSize(size);
  supportInvalidateOptionsMenu();
  mSectionsPagerAdapter.notifyDataSetChanged();
  String currentDeckName;
  try {
    currentDeckName=getCol().getDecks().current().getString("name");
  }
 catch (  JSONException e) {
    throw new RuntimeException(e);
  }
  if (mIsWholeCollection) {
    selectDropDownItem(0);
  }
 else {
    for (int dropDownDeckIdx=0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {
      JSONObject deck=mDropDownDecks.get(dropDownDeckIdx);
      String deckName;
      try {
        deckName=deck.getString("name");
      }
 catch (      JSONException e) {
        throw new RuntimeException();
      }
      if (deckName.equals(currentDeckName)) {
        selectDropDownItem(dropDownDeckIdx + 1);
        break;
      }
    }
  }
}
