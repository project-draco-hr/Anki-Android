{
  String decksServer="{}";
  try {
    String data="p=" + URLEncoder.encode(mPassword,"UTF-8") + "&client="+ URLEncoder.encode("ankidroid-" + AnkiDroidApp.getPkgVersion(),"UTF-8")+ "&u="+ URLEncoder.encode(mUsername,"UTF-8")+ "&v="+ URLEncoder.encode(SYNC_VERSION,"UTF-8")+ "&d=None&sources="+ URLEncoder.encode("[]","UTF-8")+ "&libanki="+ URLEncoder.encode(AnkiDroidApp.LIBANKI_VERSION,"UTF-8")+ "&pversion=5";
    HttpPost httpPost=new HttpPost(SYNC_URL + "getDecks");
    StringEntity entity=new StringEntity(data);
    httpPost.setEntity(entity);
    httpPost.setHeader("Accept-Encoding","identity");
    httpPost.setHeader("Content-type","application/x-www-form-urlencoded");
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpResponse response=httpClient.execute(httpPost);
    int respCode=response.getStatusLine().getStatusCode();
    if (respCode != 200) {
      Log.e(AnkiDroidApp.TAG,"getDecks error: " + respCode + " "+ response.getStatusLine().getReasonPhrase());
      return decksServer;
    }
    HttpEntity entityResponse=response.getEntity();
    InputStream content=entityResponse.getContent();
    decksServer=Utils.convertStreamToString(new InflaterInputStream(content));
    Log.i(AnkiDroidApp.TAG,"getDecks response = " + decksServer);
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(AnkiDroidApp.TAG,"getDecks - UnsupportedEncodingException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,"getDecks - " + Log.getStackTraceString(e));
  }
catch (  ClientProtocolException e) {
    Log.e(AnkiDroidApp.TAG,"getDecks - ClientProtocolException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,"getDecks - " + Log.getStackTraceString(e));
  }
catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"getDecks - IOException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,"getDecks - " + Log.getStackTraceString(e));
  }
  return decksServer;
}
