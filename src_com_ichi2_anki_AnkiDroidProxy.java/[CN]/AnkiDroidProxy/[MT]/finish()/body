{
  try {
    String data="p=" + URLEncoder.encode(mPassword,"UTF-8") + "&u="+ URLEncoder.encode(mUsername,"UTF-8")+ "&v="+ URLEncoder.encode(SYNC_VERSION,"UTF-8")+ "&d="+ URLEncoder.encode(mDeckName,"UTF-8");
    HttpPost httpPost=new HttpPost(SYNC_URL + "finish");
    StringEntity entity=new StringEntity(data);
    httpPost.setEntity(entity);
    httpPost.setHeader("Accept-Encoding","identity");
    httpPost.setHeader("Content-type","application/x-www-form-urlencoded");
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpResponse response=httpClient.execute(httpPost);
    HttpEntity entityResponse=response.getEntity();
    int respCode=response.getStatusLine().getStatusCode();
    if (respCode != 200) {
      Log.e(AnkiDroidApp.TAG,"AnkiDroidProxy.finish error: " + respCode + " "+ response.getStatusLine().getReasonPhrase());
      return false;
    }
    InputStream content=entityResponse.getContent();
    String contentString=Utils.convertStreamToString(new InflaterInputStream(content));
    return true;
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(AnkiDroidApp.TAG,"UnsupportedEncodingException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    return false;
  }
catch (  ClientProtocolException e) {
    Log.e(AnkiDroidApp.TAG,"ClientProtocolException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    return false;
  }
catch (  IOException e) {
    Log.e(AnkiDroidApp.TAG,"IOException = " + e.getMessage());
    Log.e(AnkiDroidApp.TAG,Log.getStackTraceString(e));
    return false;
  }
}
