{
  mTextToSpeak=text;
  mQuestionAnswer=qa;
  mDid=did;
  mOrd=ord;
  String language=getLanguage(mDid,mOrd,mQuestionAnswer);
  if (availableTtsLocales.isEmpty()) {
    Locale[] systemLocales=Locale.getAvailableLocales();
    for (    Locale loc : systemLocales) {
      if (mTts.isLanguageAvailable(loc) == TextToSpeech.LANG_COUNTRY_AVAILABLE) {
        availableTtsLocales.add(new String[]{loc.getISO3Language(),loc.getDisplayName()});
      }
    }
  }
  for (int i=0; i < availableTtsLocales.size(); i++) {
    if (language.equals(NO_TTS)) {
      return;
    }
 else     if (language.equals(availableTtsLocales.get(i)[0])) {
      speak(mTextToSpeak,language);
      return;
    }
  }
  Resources res=mReviewer.get().getResources();
  StyledDialog.Builder builder=new StyledDialog.Builder(mReviewer.get());
  if (availableTtsLocales.size() == 0) {
    builder.setMessage(res.getString(R.string.no_tts_available_message));
    builder.setIcon(R.drawable.ic_dialog_alert);
    builder.setPositiveButton(res.getString(R.string.dialog_ok),null);
  }
 else {
    ArrayList<CharSequence> dialogItems=new ArrayList<CharSequence>();
    final ArrayList<String> dialogIds=new ArrayList<String>();
    builder.setTitle(R.string.select_locale_title);
    dialogItems.add(res.getString(R.string.tts_no_tts));
    dialogIds.add(NO_TTS);
    for (int i=0; i < availableTtsLocales.size(); i++) {
      dialogItems.add(availableTtsLocales.get(i)[1]);
      dialogIds.add(availableTtsLocales.get(i)[0]);
    }
    String[] items=new String[dialogItems.size()];
    dialogItems.toArray(items);
    builder.setItems(items,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        MetaDB.storeLanguage(mReviewer.get(),mDid,mOrd,mQuestionAnswer,dialogIds.get(which));
        speak(mTextToSpeak,dialogIds.get(which));
      }
    }
);
  }
  builder.create().show();
}
