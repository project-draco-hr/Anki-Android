{
  JSONObject result=new JSONObject();
  try {
    if (mCol.getDb().queryScalar("SELECT count() FROM cards WHERE nid NOT IN (SELECT id FROM notes)",false) != 0) {
      Timber.e("Sync - SanityCheck: there are cards without mother notes");
      result.put("client","missing notes");
      return result;
    }
    if (mCol.getDb().queryScalar("SELECT count() FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)",false) != 0) {
      Timber.e("Sync - SanityCheck: there are notes without cards");
      result.put("client","missing cards");
      return result;
    }
    if (mCol.getDb().queryScalar("SELECT count() FROM cards WHERE usn = -1",false) != 0) {
      Timber.e("Sync - SanityCheck: there are unsynced cards");
      result.put("client","cards had usn = -1");
      return result;
    }
    if (mCol.getDb().queryScalar("SELECT count() FROM notes WHERE usn = -1",false) != 0) {
      Timber.e("Sync - SanityCheck: there are unsynced notes");
      result.put("client","notes had usn = -1");
      return result;
    }
    if (mCol.getDb().queryScalar("SELECT count() FROM revlog WHERE usn = -1",false) != 0) {
      Timber.e("Sync - SanityCheck: there are unsynced revlogs");
      result.put("client","revlog had usn = -1");
      return result;
    }
    if (mCol.getDb().queryScalar("SELECT count() FROM graves WHERE usn = -1",false) != 0) {
      Timber.e("Sync - SanityCheck: there are unsynced graves");
      result.put("client","graves had usn = -1");
      return result;
    }
    for (    JSONObject g : mCol.getDecks().all()) {
      if (g.getInt("usn") == -1) {
        Timber.e("Sync - SanityCheck: unsynced deck: " + g.getString("name"));
        result.put("client","deck had usn = -1");
        return result;
      }
    }
    for (    Map.Entry<String,Integer> tag : mCol.getTags().allItems()) {
      if (tag.getValue() == -1) {
        Timber.e("Sync - SanityCheck: there are unsynced tags");
        result.put("client","tag had usn = -1");
        return result;
      }
    }
    boolean found=false;
    for (    JSONObject m : mCol.getModels().all()) {
      if (mCol.getServer()) {
        if (m.getInt("usn") < 0) {
          m.put("usn",0);
          found=true;
        }
      }
 else {
        if (m.getInt("usn") == -1) {
          Timber.e("Sync - SanityCheck: unsynced model: " + m.getString("name"));
          result.put("client","model had usn = -1");
          return result;
        }
      }
    }
    if (found) {
      mCol.getModels().save();
    }
    mCol.getSched().reset();
    mCol.getSched().deckDueList();
    JSONArray ja=new JSONArray();
    JSONArray sa=new JSONArray();
    for (    int c : mCol.getSched().counts()) {
      sa.put(c);
    }
    ja.put(sa);
    ja.put(mCol.getDb().queryScalar("SELECT count() FROM cards"));
    ja.put(mCol.getDb().queryScalar("SELECT count() FROM notes"));
    ja.put(mCol.getDb().queryScalar("SELECT count() FROM revlog"));
    ja.put(mCol.getDb().queryScalar("SELECT count() FROM graves"));
    ja.put(mCol.getModels().all().size());
    ja.put(mCol.getDecks().all().size());
    ja.put(mCol.getDecks().allConf().size());
    result.put("client",ja);
    return result;
  }
 catch (  JSONException e) {
    Timber.e(e,"Syncer.sanityCheck()");
    throw new RuntimeException(e);
  }
}
