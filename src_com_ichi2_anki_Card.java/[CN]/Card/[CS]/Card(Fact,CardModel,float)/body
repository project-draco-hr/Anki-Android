{
  tags="";
  id=Util.genID();
  type=2;
  isDue=1;
  timerStarted=Float.NaN;
  timerStopped=Float.NaN;
  modified=System.currentTimeMillis() / 1000f;
  if (created != Float.NaN) {
    this.created=created;
    this.due=created;
  }
 else   due=modified;
  combinedDue=due;
  this.fact=fact;
  this.cardModel=cardModel;
  if (cardModel != null) {
    cardModelId=cardModel.id;
    ordinal=cardModel.ordinal;
    HashMap<String,HashMap<Long,String>> d=new HashMap<String,HashMap<Long,String>>();
    Iterator<FieldModel> iter=fact.model.fieldModels.iterator();
    while (iter.hasNext()) {
      FieldModel fm=iter.next();
      HashMap<Long,String> field=new HashMap<Long,String>();
      field.put(fm.id,fact.getFieldValue(fm.name));
      d.put(fm.name,field);
    }
    HashMap<String,String> qa=CardModel.formatQA(id,fact.modelId,d,splitTags(),cardModel);
    question=qa.get("question");
    answer=qa.get("answer");
  }
}
