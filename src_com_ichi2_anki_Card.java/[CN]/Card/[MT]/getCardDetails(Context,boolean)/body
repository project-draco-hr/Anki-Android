{
  Resources res=context.getResources();
  StringBuilder builder=new StringBuilder();
  builder.append("<html><body text=\"#FFFFFF\"><b>");
  if (full) {
    builder.append(res.getString(R.string.card_details_question));
    builder.append("</b>: ");
    builder.append(Utils.stripHTML(mQuestion));
    builder.append("<br><b>");
    builder.append(res.getString(R.string.card_details_answer));
    builder.append("</b>: ");
    builder.append(Utils.stripHTML(mAnswer));
    builder.append("<br><b>");
  }
  builder.append(res.getString(R.string.card_details_tags));
  builder.append("</b>: ");
  String tags=Arrays.toString(mDeck.allUserTags("WHERE id = " + mFactId));
  builder.append(tags.substring(1,tags.length() - 1));
  builder.append("<br><br>");
  if (full) {
    builder.append(res.getString(R.string.card_details_due));
    builder.append(": ");
    if (mYesCount + mNoCount == 0) {
      builder.append("-");
    }
 else     if (mCombinedDue < mDeck.getDueCutoff()) {
      builder.append("<b>").append(res.getString(R.string.card_details_now)).append("</b>");
    }
 else {
      builder.append(Utils.fmtTimeSpan(mCombinedDue - Utils.now(),Utils.TIME_FORMAT_IN,true));
    }
    builder.append("<br>");
  }
  builder.append(res.getString(R.string.card_details_last_due));
  builder.append(": ");
  if (mYesCount + mNoCount == 0 || mLastDue == 0 || mInterval == 0) {
    builder.append("-");
  }
 else {
    builder.append(Utils.fmtTimeSpan(Utils.now() - mLastDue,Utils.TIME_FORMAT_BEFORE,true));
  }
  builder.append("<br>");
  builder.append(res.getString(R.string.card_details_interval));
  builder.append(": ");
  if (mInterval == 0) {
    builder.append("-");
  }
 else {
    builder.append(Utils.fmtTimeSpan(mInterval * 86400,Utils.TIME_FORMAT_DEFAULT,true));
  }
  builder.append("<br><br>");
  builder.append(res.getString(R.string.card_details_ease));
  builder.append(": <b>");
  double ease=Math.round(mFactor * 100);
  builder.append(ease / 100);
  builder.append("</b><br>");
  builder.append(res.getString(R.string.card_details_average_time));
  builder.append(": <b>");
  if (mYesCount + mNoCount == 0) {
    builder.append("-");
  }
 else {
    builder.append(Utils.doubleToTime(mAverageTime));
  }
  builder.append("</b><br>");
  builder.append(res.getString(R.string.card_details_total_time));
  builder.append(": <b>");
  builder.append(Utils.doubleToTime(mReviewTime));
  builder.append("</b><br><br>");
  builder.append(res.getString(R.string.card_details_yes_count));
  builder.append(": <b>");
  builder.append(mYesCount);
  builder.append("</b><br>");
  builder.append(res.getString(R.string.card_details_no_count));
  builder.append(": <b>");
  builder.append(mNoCount);
  builder.append("</b><br><br>");
  builder.append(res.getString(R.string.card_details_added));
  builder.append(": <b>");
  builder.append(DateFormat.getDateFormat(context).format((long)(mCreated - mDeck.getUtcOffset()) * 1000l));
  builder.append("</b><br>");
  builder.append(res.getString(R.string.card_details_changed));
  builder.append(": <b>");
  builder.append(DateFormat.getDateFormat(context).format((long)(mModified - mDeck.getUtcOffset()) * 1000l));
  builder.append("</b><br><br>");
  builder.append(res.getString(R.string.card_details_model));
  builder.append(": <b>");
  Model model=Model.getModel(mDeck,mCardModelId,false);
  builder.append(model.getName());
  builder.append("</b><br>");
  builder.append(res.getString(R.string.card_details_card_model));
  builder.append(": <b>");
  builder.append(model.getCardModel(mCardModelId).getName());
  builder.append("</b></body></html>");
  return builder.toString();
}
